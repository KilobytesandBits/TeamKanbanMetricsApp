{"changed":true,"filter":false,"title":"App.js","tooltip":"/App.js","value":"var types = Ext.data.Types; // allow shorthand type access\nExt.define('ThroughputDataModel', {\n\textend: 'Ext.data.Model',\n\tfields: [\n                {name: 'FormattedID', mapping: 'FormattedID', type: types.STRING},\n                {name: 'Name', mapping: 'Name', type: types.STRING},\n                {name: 'AcceptedDate', mapping: 'AcceptedDate', type: types.DATE },\n                {name: 'InProgressDate', mapping: 'InProgressDate', type: types.DATE },\n                {name: 'Tags', mapping: 'Tags', type: types.STRING},\n                {name: 'Owner', mapping: 'Owner', type: types.OBJECT},\n                {name: 'CycleTime', mapping: 'CycleTime', type: types.FLOAT},\n                {name: 'CycleTimeCategory', mapping: 'CycleTimeCategory', type: types.STRING}\n            ]\n});\n\nvar NOW = new Date();\n\nExt.define('CustomApp', {\n    extend: 'Rally.app.App',\n    componentCls: 'app',\n    autoScroll: true,\n    defaultTeamSLA: 10,\n    getSettingsFields: function() {\n        return [\n            {\n                name: 'teamSLA',\n                fieldLabel: 'Team SLA value (days)',\n                xtype: 'rallynumberfield'\n            },\n            {\n                name: 'excludeDefects',\n                xtype: 'rallycheckboxfield',\n\t\t        fieldLabel: 'Exclude Defects',\n\t\t        value: false\n            },\n            {\n            \tname: 'excludeWeekends',\n\t\t        xtype: 'rallycheckboxfield',\n\t\t        fieldLabel: 'Exclude Weekends',\n\t\t        value: false\n\t\t    }\n        ];\n    },\n    items:[\n    \t{\n            xtype: 'container', id: 'infoContainer', itemId: 'infoContainer', border: 0\n        },\n    \t{xtype: 'container', itemId: 'throughputCycleTimeReport', id: 'throughputCycleTimeReport', \n            items: [\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t{xtype: 'container', itemId: 'throughputContainer', id: 'throughputContainer', title: 'Throughput'},\n\t\t\t\t{xtype: 'container', itemId: 'cycleTimeContainer', id: 'cycleTimeContainer', title: 'Cycle-Time'}\n\t\t\t],\n\t\t\tlayout:{\n\t\t        type:'hbox',\n\t\t        align:'stretch',\n\t\t        padding:5\n\t\t    }\n\t\t},\t\n    \t{xtype: 'container', itemId: 'WipLimitSLAReport', id: 'WipLimitSLAReport', \n            items: [\t\n            \t{xtype: 'container', itemId: 'slaContainer', id: 'slaContainer', title: 'SLA Counter'},\n            \t{xtype: 'container', itemId: 'wipContainer', id: 'wipContainer', title: 'WIP Limit'}\n\t\t\t],\n    \t\tlayout:{\n\t\t        type:'hbox',\n\t\t        align:'stretch',\n\t\t        padding:5\n\t\t    }\n    \t}\n\t],\n\t\n    layout:{\n        type:'vbox',\n        align:'stretch',\n        padding:5\n    },\n    \n    cycleTimeCategoryNames: [\"0-5 days\", \"6-10 days\", \"11-15 days\", \"16-20 days\", \"21-25 days\", \"26-30 days\", \"31+ days\"],\n    cycleTimeDistRange: 5,\n\t\n    launch: function() {\n    \t\n    \tthis.activeViews = ['throughputCycleTimeReport','WipLimitSLAReport'];\n    \tthis._init();\n        this.currThroughputMessage = '<div>The Throughput for current period (between Start Date & End Date) is : <b> 10 </b></div>';\n\t    this.prevThroughputMessage =  '<div>The Throughput for Previous period (between Start Date & End Date) is : <b> 10 </b></div>';\n\t    \n\t    this._determineDateRangeForKanbanMetrics();\n\t    \n\t    this._initializingInfoForKanbanMetrics();\n        \n        this._createDataStoreForKanbanMetrics();\n    },\n    \n     /* Initializes the app */\n\t_init: function() {\t\n\t\tvar that = this;\n\t\t//dynamicItems hold created ui items, which needs to be destroyed before re-drawing\n\t\tif (typeof this.dynamicItems === \"undefined\"){\n\t\t\tthis.dynamicItems = {};\n\t\t}\n\t\t\n\t\tExt.Array.each(this.activeViews, function(viewName){\n\t\t\tif (typeof that.dynamicItems[viewName] === \"undefined\"){\n\t\t\t\tthat.dynamicItems[viewName] = {};\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar item;\n\t\t\n\t\t\t\tfor (item in that.dynamicItems[viewName]) {\n\t\t\t\t\tthat.dynamicItems[viewName][item].destroy();\n\t\t\t\t}\n\t\t\t}\t\n\t\t});\n\t},\n\t\n\t/* ============================================================================================================================== */\n\t/* This Section is entirely for determine the Kanban Metrics Datastore */\n\t/* ============================================================================================================================== */\n\t\n\t_determineDateRangeForKanbanMetrics: function(){\n        this.curr_End_Date = new Date();\n        \n        //Determine a date 30 days prior to current date.\n        var tmp_Curr_Date = new Date();\n        tmp_Curr_Date.setDate(tmp_Curr_Date.getDate()-30);\n        this.curr_Start_Date = tmp_Curr_Date;\n        \n        this.currStartRallyDateFilter = this.curr_Start_Date.getFullYear() + '-' + (parseInt(this.curr_Start_Date.getMonth(), 10) + 1)  + '-' + this.curr_Start_Date.getDate();\n        this.currEndRallyDateFilter = this.curr_End_Date.getFullYear() + '-' + (parseInt(this.curr_End_Date.getMonth(), 10) + 1)  + '-' + this.curr_End_Date.getDate();\n        \n        var tmp_Prev_Date = new Date();\n        tmp_Prev_Date.setDate(tmp_Prev_Date.getDate()-60);\n        this.prev_Start_Date = tmp_Prev_Date;\n        this.prev_End_Date = Ext.Date.add(this.curr_Start_Date, Ext.Date.DAY, -1);\n        \n        this.prevStartRallyDateFilter = this.prev_Start_Date.getFullYear() + '-' + (parseInt(this.prev_Start_Date.getMonth(), 10)+1) + '-' + this.prev_Start_Date.getDate();\n        this.prevEndRallyDateFilter = this.prev_End_Date.getFullYear() + '-' + (parseInt(this.prev_End_Date.getMonth(), 10)+1) + '-' + this.prev_End_Date.getDate();\n        \n        this.past_Date_SixMonth = Ext.Date.add(this.curr_Start_Date, Ext.Date.MONTH, -5);\n        this.pastDateSixMonthFilter = this.past_Date_SixMonth.getFullYear() + '-' + (parseInt(this.past_Date_SixMonth.getMonth(), 10)+1) + '-' + this.past_Date_SixMonth.getDate();\n    }, \n    \n    _initializingInfoForKanbanMetrics: function(){\n\t    //initiatilizing for SLA & Wip Limit\n\t   this.info = '<div><table style=\"width:100%\"><tr>' + \n\t    \t\t\t\t  '<td style=\"width: 60%;border-collapse: collapse;padding: 5px;text-align: left;\">The <i><b>Current</b></i> period is between <b>' + this.currStartRallyDateFilter + '</b> and <b>'+ this.currEndRallyDateFilter + '</b>.'+\n\t    \t\t\t\t  '&nbsp;&nbsp;&nbsp;&nbsp; The <i><b>Previous</b></i> period is between <b>' + this.prevStartRallyDateFilter + '</b> and <b>'+ this.prevEndRallyDateFilter + '</b>.</td>'+\n\t    \t\t\t\t  '<td style=\"colspan: 2;border-collapse: collapse;padding: 5px;text-align: right;\"><a href=\"https://docs.google.com/a/perceptivesoftware.com/forms/d/1rnekZgmU2TXFLmp6ZnA9r_GVJ_Jtxl3pmD-Ue6d9d_I/viewform\" target=\"_blank\">'+\n\t    \t\t\t\t  '<img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTBcWuf-1wP77kte37enC-cO7QdgPVY0Xv_nsbIiYEWvdVoEhUP\" alt=\"Feedback\" style=\"width:75px;height:15px;border:0\"></a></td>' +\n\t    \t\t\t\t  '</tr></table></div>';\n\t\n        \n        Ext.getCmp('infoContainer').update(this.info);\n    },\n    \n     _createDataStoreForKanbanMetrics: function(){\n        //Determine the data filter for store.\n        this.filter = Ext.create('Rally.data.QueryFilter', {\n\t\t\tproperty: 'AcceptedDate',\n\t\t\toperator: '>=',\n\t\t\tvalue: this.pastDateSixMonthFilter\n\t\t}).and(Ext.create('Rally.data.QueryFilter', {\n\t\t\tproperty: 'AcceptedDate',\n\t\t\toperator: '<=',\n\t\t\tvalue: this.currEndRallyDateFilter\n\t\t})).and(Ext.create('Rally.data.QueryFilter', {\n\t\t\tproperty: 'ScheduleState',\n\t\t\toperator: '=',\n\t\t\tvalue: 'Accepted'\n\t\t}));\n\t\t\n\t\t//Record all columns that needs to be fetched.\n\t\tthis.fetchDataColumns = ['FormattedID', 'Name', 'AcceptedDate', 'InProgressDate', 'Tags', 'Owner', 'c_KanbanState','ScheduleState'];\n\t\t\n\t\t//configure the data store context.\n\t\tthis.contextConfig = {\n            workspace: this.getContext().getWorkspace()._Ref,\n            project: this.getContext().getProject()._ref,\n            projectScopeUp: false,\n            projectScopeDown: true,\n            limit: 'infinity'\n        };\n\t   \n\t   //set the sorter config for data store.\n\t   this.sorterConfig = [{\n                        \tproperty: 'AcceptedDate',\n                        \tdirection: 'ASC'\n                        },\n                        {\n                            property: 'FormattedID',\n                            direction: 'ASC'\n                        }];\n                        \n\t\tthis._createUserStoryDataStore();\n    },\n    \n     _createUserStoryDataStore: function(){\n\t    var myUserStoryStore = Ext.create('Rally.data.wsapi.Store', {\n\t        model: 'HierarchicalRequirement',\n\t        fetch: this.fetchDataColumns,\n\t        autoLoad: true,\n\t        context: this.contextConfig,\n\t        filters: this.filter,\n\t        sorters: this.sorterConfig,\n\t        listeners: {\n\t            load: function(store, data, success){\n\t            \tthis.currUserStoriesColl = [];\n\t                this.prevUserStoriesColl = [];\n\t                this.pastRangeUserStoriesColl = [];\n\t                var that = this;\n\t               \n\t                Ext.Array.each(data, function(userStory) {\n\t                    if(userStory && userStory.get('AcceptedDate')){\n\t                    \tif(userStory.get('AcceptedDate') >= that.curr_Start_Date){\n\t                            that.currUserStoriesColl.push(that._createKanbanmetRicsData(userStory));\n\t                        }if(userStory.get('AcceptedDate') < that.curr_Start_Date && userStory.get('AcceptedDate') >= that.prev_Start_Date){\n\t                            that.prevUserStoriesColl.push(that._createKanbanmetRicsData(userStory));\n\t                        }\n\t                        that.pastRangeUserStoriesColl.push(that._createKanbanmetRicsData(userStory));\n\t                    }\n\t                });\n\t                \n\t                this._createDefectStore();\n\t            },\n\t            scope: this\n\t        }\n\t  });\n\t},\n\t\n\t_createKanbanmetRicsData: function(rallyObject){\n\t    var cycleTime = 0;\n\t    var cycleTimeCat = \"N/A\";\n\t    //Determine the cycle time for each object.\n\t    if(rallyObject.get('AcceptedDate') && rallyObject.get('InProgressDate')){\n\t        cycleTime = Rally.util.DateTime.getDifference(rallyObject.get('AcceptedDate'), rallyObject.get('InProgressDate'), 'day');\n\t    }\n\t    \n\t    for(var i =0; i<this.cycleTimeCategoryNames.length; i++){\n\t        var lowerRange = i*this.cycleTimeDistRange, upperRange = lowerRange + 5;\n\t        \n\t        if((cycleTime >lowerRange && cycleTime <= upperRange) || (lowerRange === 30 && cycleTime > lowerRange))\n\t            cycleTimeCat = this.cycleTimeCategoryNames[i];\n\t    }\n\t    \n\t    //Generate the node for throghput data.\n\t    var data = Ext.create('ThroughputDataModel', {\n\t        FormattedID: rallyObject.get('FormattedID'), \n\t        Name: rallyObject.get('Name'), \n\t        AcceptedDate: rallyObject.get('AcceptedDate'), \n\t        InProgressDate: rallyObject.get('InProgressDate'), \n\t        Tags: rallyObject.get('Tags'), \n\t        Owner: rallyObject.get('Owner'),\n\t        CycleTime: cycleTime,\n\t        CycleTimeCategory: cycleTimeCat\n\t    });\n\t    \n\t    return data;\n\t},\n\t\n\t_createDefectStore: function(){\n\t    var that = this;\n\t    var myDefectStore = Ext.create('Rally.data.wsapi.Store', {\n            model: 'Defect',\n            fetch: this.fetchDataColumns,\n            autoLoad: true,\n            context: this.contextConfig,\n            filters: this.filter,\n            sorters: this.sorterConfig,\n            listeners: {\n                load: function(store, data, success){\n                    Ext.Array.each(data, function(defect){\n                        if(defect && defect.get('AcceptedDate')){\n                        \tif(defect.get('AcceptedDate') >= that.curr_Start_Date){\n                            \tthat._insertRecordInOrder(that.currUserStoriesColl, that._createKanbanmetRicsData(defect));\n                            }if(defect.get('AcceptedDate') < that.curr_Start_Date && defect.get('AcceptedDate') >= that.prev_Start_Date){\n                                that._insertRecordInOrder(that.prevUserStoriesColl, that._createKanbanmetRicsData(defect));\n                            }\n                            that._insertRecordInOrder(that.pastRangeUserStoriesColl, that._createKanbanmetRicsData(defect));\n                        }\n                           \n                    });\n                    \n                   this.currThroughputValue = this.currUserStoriesColl.length;\n\t               this.prevThroughputValue = this.prevUserStoriesColl.length;\n\t               \n\t               this.currAvgCycleTimeValue = this._determineAvgCycleTime(this.currUserStoriesColl);\n\t               this.prevAvgCycleTimeValue = this._determineAvgCycleTime(this.prevUserStoriesColl);\n\t               \n\t               this._determineWIPLimit();\n\t                \n\t               this.currThroughputDataStore = Ext.create('Rally.data.custom.Store', {\n                        data: this.currUserStoriesColl,\n                        pageSize: 100\n                    });\n                    \n                    this.prevThroughputDataStore = Ext.create('Rally.data.custom.Store', {\n                        data: this.prevUserStoriesColl,\n                        pageSize: 100\n                    });\n                    \n                    this.pastRangeThroughputDataStore = Ext.create('Rally.data.custom.Store', {\n                        model: 'ThroughputDataModel',\n                        data: this.pastRangeUserStoriesColl,\n                        pageSize: 100\n                    });\n                    \n                    this._createKanbanMetricsMessagePanel();\n                },\n                scope: this\n            }\n\t  });\n\t},\n\t\n\t_determineAvgCycleTime: function(dataColl){\n\t\tvar totalCycleTime = 0;\n\t\tvar avgCycleTime = 0;\n\t\tvar count = dataColl.length;\n\t\tExt.Array.each(dataColl, function(data) {\n\t\t    var cycleTime = data.get(\"CycleTime\");\n\t\t    \n\t\t    if(cycleTime > 0){\n\t\t    \ttotalCycleTime= totalCycleTime + cycleTime; //Math.ceil(pieData.months[recMonthNameCat].totalCycleTime/ pieData.months[recMonthNameCat].count);\n\t\t    }\n\t\t}); \n\t\t\n\t\tavgCycleTime = count > 0 ? Math.ceil(totalCycleTime / count) : 0;\n\t\t\n\t\treturn avgCycleTime;\n\t},\n\t\n\t_determineWIPLimit: function(){\n\t\t//Determining avg. WIP Limit using Little's Formula\n\t\t//which states: L = N*W where N is the rate of arrival and\n\t\t//W is the total time taken for entire process.\n\t\t\n\t\tvar currDayDiff = Rally.util.DateTime.getDifference(this.curr_End_Date, this.curr_Start_Date, 'day');\n\t\tthis.currWIPLimitValue = Math.ceil((this.currThroughputValue/currDayDiff)*this.currAvgCycleTimeValue);\n\t\t\n\t\tvar prevDayDiff = Rally.util.DateTime.getDifference(this.prev_End_Date, this.prev_Start_Date, 'day');\n\t\tthis.prevWIPLimitValue = Math.ceil((this.prevThroughputValue/prevDayDiff)*this.prevAvgCycleTimeValue);\n\t},\n\t\n\t_insertRecordInOrder: function(dataColl, record){\n\t\tvar closestRecord = record;\n\t\tvar recordDate = record.get(\"AcceptedDate\");\n\t\t\n\t\tExt.Array.each(dataColl, function(data) {\n\t\t    var dataDate = data.get(\"AcceptedDate\");\n\t\t    if(dataDate && recordDate && dataDate.getMonth() === recordDate.getMonth()){\n\t\t    \tif(dataDate <= recordDate)\n\t\t    \t\tclosestRecord = data;\n\t\t    }\n\t\t});\n\t\t\n\t\tvar dataIndex = dataColl.indexOf(closestRecord);\n\t\tif(dataIndex != -1){\n\t\t\tdataColl.splice(dataIndex, 0, record);\n\t\t}\n\t\telse{\n\t\t\tdataColl.push(record);\n\t\t}\n\t},\n\t\n\t _createKanbanMetricsMessagePanel: function(){\n    \t\n    \tthis._configureCycleTimeMetricsContainer('panel1', 'CycleTime', 'cycleTimeContainer', 'throughputCycleTimeReport', true);\n    \t\n\t    this._configureThroughputMetricsContainer('panel2', 'Throughput', 'throughputContainer', 'throughputCycleTimeReport', true);\n\t    \n\t    this._createDataStoreForSLAAndWipLimit();\n\t},\n\t\n\t/* ####################################################################################################################################################################### */\n\t\n\t/* ============================================================================================================================== */\n\t/* This Section is entirely for Configuring CYCLETIME metrics */\n\t/* ============================================================================================================================== */\n\t\n\t_configureCycleTimeMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){\n\t\t//1. Create the message panel container for showing the cumulative data.\n\t\tthis.currCycleTimeMessage = '<div style=\"text-indent: 2em;\"><b>Current</b> Avg. CycleTime is : <font size=\"2\" color=\"Black\"><b> ' + this.currAvgCycleTimeValue + ' days.</b></font></div>';\n\t    this.prevCycleTimeMessage = '<div style=\"text-indent: 5em;\">Previous Avg. CycleTime is : <font size=\"1\" color=\"Black\"><b>' + this.prevAvgCycleTimeValue + ' days.</b></font></div>';\n\t\tvar cycleTimeContainer = this._createMetricsContainer('Cycle Time', this.currCycleTimeMessage, this.prevCycleTimeMessage);\n\t\t\n\t\t\n\t\t//2. Create the throughput graph.\n\t\tthis._processCycleTimeDataForGraph();\n\t\tvar cycleTimeGraphContainer = this.cycleTimePieOrBarGraphChart;\n\t\t\n\t\t//3. cretae the infopanel to add all the above components.\n\t\tvar widthValue = 500;\n\t\t\n\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {\n\t\t\tthis.dynamicItems[reportId][panelId].destroy();\n\t\t}\n\t\t\n\t\tvar infoPanel=Ext.create('Ext.form.Panel', {\n        \tid: panelId,\n        \ttitle: titleName,\n        \tautoScroll: true,\n            renderTo: Ext.getBody(),\n            width: widthValue,\n            height: 500,\n            layout: {\n                type: 'vbox',\n                align: 'stretch',\n                padding: 5\n            },\n            items: [cycleTimeContainer, cycleTimeGraphContainer]\n        });\n\t\t\n\t\t//5. add the nfopanel to the appropriate app container.\n        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);\n\t},\n\t\n\t_processCycleTimeDataForGraph: function(){\n\t\tvar that = this;\n\t\t\n\t   this.pieData = {\n\t   \ttotalCount: 0, \n\t   \tmonths: {},\n\t   \tmonthCount: 0,\n\t   \tcategories: []\n\t   };\n\t\t\n\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {\n\t\t\tthat._buildCycleTimeChartData(record);\n\t\t});\n\t\t\n\t\tthis._initAndDrawCycleTimeCharts(this.pieData);\n\t},\n\t\n\t_buildCycleTimeChartData: function(record){\n\t\tvar pieData = this.pieData;\n\t    var recAcceptedDate = record.get(\"AcceptedDate\");\n\t    var recCycleTime = record.get(\"CycleTime\");\n\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());\n\t    \n\t    if(typeof pieData.months[recMonthNameCat] === \"undefined\"){\n\t        pieData.months[recMonthNameCat] = {count: 0, avgCycleTime: 0, totalCycleTime: 0, cycletimes: []};\n\t        pieData.categories.push(recMonthNameCat);\n\t        \n\t        pieData.monthCount++;\n\t    }\n\t    \n\t    pieData.months[recMonthNameCat].cycletimes.push(recCycleTime);\n\t    pieData.months[recMonthNameCat].count++;\n\t    pieData.months[recMonthNameCat].totalCycleTime = pieData.months[recMonthNameCat].totalCycleTime + recCycleTime;\n\t    pieData.months[recMonthNameCat].avgCycleTime = Math.ceil(pieData.months[recMonthNameCat].totalCycleTime/ pieData.months[recMonthNameCat].count);\n\t    pieData.totalCount++;\n\t   \n\t   this.pieData = pieData;\n\t},\n\t\n\t_initAndDrawCycleTimeCharts: function(pieData) {\t\t\t\t\n\t\tvar cycleTimeData = [], sizeData = [], categories = [];\n\t\t\t\t\t\n\t\tif (pieData.totalCount === 0) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfor (month in pieData.months){\n\t\t\tcycleTimeData.push([month, pieData.months[month].avgCycleTime]);\n\t\t\tsizeData.push([month, pieData.months[month].count]);\n\t\t\tcategories.push(month);\n\t\t}\n\t\t\n\t\tvar cycleTimeHorBarGraph = this._drawCycleTimeHorizontalBarChart(categories, cycleTimeData);\n\t\tthis._createCycleTimeBarGraphContainer(cycleTimeHorBarGraph);\n\t},\n\t\n\t_createCycleTimeBarGraphContainer: function(barGraph){\n\t\t\n\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {\n\t\t\t    itemId: 'defaultPieChartContainer', \n\t\t\t    id: 'defaultPieChartContainer',\n\t            layout: {\n\t                type: 'hbox',\n\t                align: 'stretch',\n\t                padding: 5\n\t            },\n\t            renderTo: Ext.getBody(),\n\t            border: 1,\n\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},\n\t            items: [barGraph]\n\t        });\n\t},\n\t\n\t\t/* Configures and displays a horizontal bar chart */\n\t_drawCycleTimeHorizontalBarChart: function(categories, leadTimeData) {\t\n\t\tvar conf = {\n\t\t\tid: 'horizontalBars',\n\t\t\tseries: [{name: 'Avg. Cycle Time', data: leadTimeData}],\t\n\t\t\tchartType: 'column',\n\t\t\tchartTitle: 'Avg. Cycle Time by Months',\n\t\t\txAxisCategories: categories,\n\t\t\txAxisTitle: 'Months',\n\t\t\tyAxisTitle: 'Days',\n\t\t\t_formatLabelsAppendix: ' days',\n\t\t\tplotOptions: {\n                bar: {\n                    dataLabels: {\n                        enabled: this.getSetting('showDataLabels')\n                    }\n                }\n            }\n\t\t};\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\treturn this._drawCycleTimeBarChart(conf);\n\t},\n\t\n\t/* Draws and displays the bar chart */\n\t_drawCycleTimeBarChart: function (conf) {\t\t\t\t\t\n\t\t\n\t\tvar chart = {\n\t\t\txtype: 'rallychart',\n\t\t\tid: conf.id,\n\t\t\theight: 400,\n\t\t\twidth: 485,\n\t\t\tchartData: {\n\t\t\t\tseries: conf.series\t\t\t\t\t\t\t\t\n\t\t\t},\n\t\t\tchartColors: ['#FF3333', '#00CC00'],\t\n\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tchart: {\n\t\t\t\t\tplotBackgroundColor: null,\n\t\t\t\t\tplotBorderWidth: null,\n\t\t\t\t\tplotShadow: false,\n\t\t\t\t\ttype: conf.chartType\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t},\t\t\t\t\t\t\t\t\n\t\t\t\tlegend: {\t\t\t\t\t\t\t\t\t\n\t\t\t\t\talign: 'right',\n\t\t\t\t\tverticalAlign: 'top',\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 100,\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tlayout: 'vertical'\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: conf.chartTitle\n\t\t\t\t},\n\t\t\t\ttooltip: {\n\t\t\t\t\t_formatLabels: function() {\n\t\t\t\t\t\treturn '<b>'+ this.series.name +'</b><br/>'+\n\t\t\t\t\t\tthis.x +': '+ this.y + conf._formatLabelsAppendix;\n\t\t\t\t\t}\n\t\t\t\t},\t\t\t\t\n\t\t\t\tyAxis: [{\n\t\t\t\t\ttitle: {text: conf.yAxisTitle}\n\t\t\t\t}],\n\t\t\t\txAxis: [{\n\t\t\t\t\ttitle: {text: conf.xAxisTitle},\n\t\t\t\t\tcategories: conf.xAxisCategories\n\t\t\t\t}],\n\t\t\t\tplotOptions: conf.plotOptions\n\t\t\t}\n\t\t};\n\t\t\n\t\treturn chart;\t\n\t},\n\t\n\t/* ####################################################################################################################################################################### */\n\t\n\t/* ============================================================================================================================== */\n\t/* This Section is entirely for Configuring THROUGHPUT metrics */\n\t/* ============================================================================================================================== */\n\t\n\t_configureThroughputMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){\n\t\t\n\t\t//1. Create the message panel container for showing the cumulative data.\n\t\tthis.currThroughputMessage = '<div style=\"text-indent: 1em;\"> <b>Current</b> Throughput is : <font size=\"3\" color=\"Black\"><b>' + this.currThroughputValue + '</b></font></div>';\n\t    this.prevThroughputMessage = '<div style=\"text-indent: 5em;\"> Previous Throughput is : <font size=\"2\" color=\"Black\"><b>' + this.prevThroughputValue + '</b></font></div>';\n\t\tvar throughtputContainer = this._createMetricsContainer('throughput', this.currThroughputMessage, this.prevThroughputMessage);\n\t\t\n\t\t\n\t\t//2. Create the throughput graph.\n\t\tthis._processThroughputDataForGraph();\n\t\tvar throughtputGraphContainer = this._createThroughputGraphContainer(this.throughputChart);\n\t\t\n\t\t//3. cretae the throuput data grid.\n\t\tvar pastRangeThroghtputGridTitle = 'View Throughput Data';\n\t    var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore, 'throughputGrid');\n\t\t\n\t\t//4. cretae the infopanel to add all the above components.\n\t\tvar widthValue = hasGraph? 750 : 450;\n\t\t\n\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {\n\t\t\tthis.dynamicItems[reportId][panelId].destroy();\n\t\t}\n\t\t\n\t\tvar infoPanel=Ext.create('Ext.form.Panel', {\n        \tid: panelId,\n        \ttitle: titleName,\n        \tautoScroll: true,\n            renderTo: Ext.getBody(),\n            width: widthValue,\n            height: 500,\n            layout: {\n                type: 'vbox',\n                align: 'stretch',\n                padding: 5\n            },\n            items: [throughtputContainer, throughtputGraphContainer]\n        });\n\t\t\n\t\t//5. add the nfopanel to the appropriate app container.\n        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);\n\t},\n\t\n\t_processThroughputDataForGraph: function(){\n\t    var that = this;\n\t\tthis.groupedSeries = [];\n\t\t\n\t\t//initialize the groupseries\n\t    Ext.Array.each(that.cycleTimeCategoryNames, function(catName) {\n\t        that.groupedSeries.push({name: catName, data:[], stack: 'qSizes'});\n\t    });\n\t    \n\t    that.groupedSeries.push({name: 'N/A', data: [], stack: 'qSizes'});\n\t    \n\t    this.chartData = {\n\t\t\ttotalCount: 0,\n\t\t\tmonths: {},\n\t\t\tmonthCount: 0,\n\t\t\tcategories: []\n\t\t};\t\n\t\t\n\t\t    \n\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {\n\t\t    that._buildThroughputChartData(record);\n\t\t});\n\t\t\n\t\tthis._initAndDrawThroughputCharts(this.chartData);\n\t},\n\t\n\t_buildThroughputChartData: function(record){\n\t    var chartData = this.chartData;\n\t    var recAcceptedDate = record.get(\"AcceptedDate\");\n\t    var recCycleTimeCat = record.get(\"CycleTimeCategory\");\n\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());\n\t    \n\t    if(typeof chartData.months[recMonthNameCat] === \"undefined\"){\n\t        chartData.months[recMonthNameCat] = {count: 0, monthNum: 0, cycletimes: {}, userStories: []};\n\t        chartData.categories.push(recMonthNameCat);\n\t        \n\t        for(var i=0; i<this.groupedSeries.length; ++i){\n\t            this.groupedSeries[i].data.push(0); //add 0 for each month\n\t        }\n\t        \n\t        chartData.monthCount++;\n\t    }\n\t    \n\t    chartData.months[recMonthNameCat].userStories.push(record);\n\t    if(typeof chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] === 'undefined'){\n\t        chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] =0;\n\t    }\n\t    \n\t    chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat]++;\n\t    chartData.months[recMonthNameCat].count++;\n\t    chartData.totalCount++;\n\t  \n\t    for(var s=0; s<this.groupedSeries.length; ++s){\n\t        if(recCycleTimeCat === this.groupedSeries[s].name){\n\t            this.groupedSeries[s].data[(chartData.monthCount -1)] = chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat];\n\t        }\n\t    }\n\t   \n\t   this.chartData = chartData;\n\t},\n\t\n\t//pre init for the charts \n\t_initAndDrawThroughputCharts: function(inputData) {\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tif (inputData.totalCount === 0) {\n\t\t\treturn;\n\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\n\t\tvar throughput = [], i, qCount = 0, currTotalCount = 0, avgTotals = [], monthAVGs = [];\n\t\t\t\t\t\t\n\t\tfor (i in inputData.months) {\t\t\t\n\t\t\tthroughput.push(inputData.months[i].count);\n\t\t\tcurrTotalCount += inputData.months[i].count;\n\t\t\tqCount++;\n\t\t\t\t\t\n\t\t\tavgTotals.push(Math.round(currTotalCount / qCount, 2));\n\t\t}\n\t\t\t\t\t\n\t\tfor (i = 0; i < inputData.monthCount; ++i) {\n\t\t\tmonthAVGs.push(Math.round(inputData.totalCount / inputData.monthCount, 2));\n\t\t}\n\t\n\t\t//Finalize series\n\t\tthis.groupedSeries.unshift({name: 'Throughput', data: throughput});\n\t\tthis.groupedSeries.push({type: 'spline',name: 'Moving Average', data: avgTotals, color: 'blue', marker: {lineWidth: 1, fillColor: 'red'}});\t\t\t\t\n\t\tthis.groupedSeries.push({type: 'spline',name: 'Average / Month', data: monthAVGs, color: 'purple', marker: {lineWidth: 1, fillColor: 'red'}});\n\t\tthis.groupedSeries.push({name: 'Total UserStories: ' + inputData.totalCount, color: '#fff', stack:'blank'});\n\t\t\t\t\n\t\tthis._drawThroughputVerticalBarChart(inputData.categories, this.groupedSeries);\t\t\t\n\t},\n\t\n\t// Configures and displays a horizontal bar chart\n\t_drawThroughputVerticalBarChart: function(categories, data) {\t\n\t\tvar conf = {\n\t\t\tid: 'verticalBars',\n\t\t\ttargetContainer: '#defaultChartContainer',\n\t\t\tseries: data,\t\n\t\t\tchartType: 'column',\n\t\t\tchartTitle: 'Throughput by Months',\n\t\t\txAxisCategories: categories,\n\t\t\txAxisTitle: 'Months',\n\t\t\tyAxisTitle: 'Count'\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t};\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\tthis._drawThroughputBarChart(conf);\n\t},\t\t\t\t\t\t\t\t\n\t\n\t//Draws and displays the bar chart \n\t_drawThroughputBarChart: function (conf) {\t\t\t\t\t\n\t\tthis.throughputChart = Ext.create('Rally.ui.chart.Chart',{\n\t\t\tid: conf.id,\n\t\t\theight: 400,\n\t\t\tchartData: {series: conf.series},\t\t\t\t\t\t\t\n\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tplotOptions: {\n\t\t\t\t\tcolumn: {\n\t\t\t\t\t\tstacking: 'normal', \n\t\t\t\t\t\tcursor: 'pointer',\n\t\t\t\t\t\tpoint: {\n\t\t\t\t\t\t\tevents: {\n\t\t\t\t\t\t\t\tclick: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//Need to implement\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\tchart: {plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false, type: conf.chartType},\t\t\t\t\t\t\t\t\n\t\t\t\tlegend: {align: 'right', verticalAlign: 'top', x: 0, y: 100,layout: 'vertical'},\n\t\t\t\ttitle: {text: conf.chartTitle},\n\t\t\t\ttooltip: {\n\t\t\t\t\tformatter: function() {\n\t\t\t\t\t\treturn '<b>'+ this.series.name + ' | ' + this.x + '</b><br/>'+\n\t\t\t\t\t\t\t'<b>'+ this.y + '</b> User Stories<br/><i>(Click to view User Stories)</i>';\n\t\t\t\t\t}\n\t\t\t\t},\t\t\t\t\n\t\t\t\tyAxis: [{title: {text: conf.yAxisTitle}}],\n\t\t\t\txAxis: [{\n\t\t\t\t\ttitle: {text: conf.xAxisTitle},\n\t\t\t\t\tcategories: conf.xAxisCategories\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t},\t\t\n\t\n\t_createThroughputGraphContainer: function(throughputChart){\n\t\t\n\t\tvar graphContainer = Ext.create('Ext.container.Container', {\n\t\t\t    itemId: 'defaultChartContainer', \n\t\t\t    id: 'defaultChartContainer',\n\t            layout: {\n\t                type: 'vbox',\n\t                align: 'stretch',\n\t                padding: 5\n\t            },\n\t            renderTo: Ext.getBody(),\n\t            border: 1,\n\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},\n\t            items: [throughputChart]\n\t        });\n\t     \n\t    return graphContainer;\n\t},\n\t\n\t_createThroughputDataGrid: function(title, dataStore, gridId){\n\t\t\n\t    var grid = Ext.create('Rally.ui.grid.Grid', {\n\t    \tid: gridId,\n\t        title: title,\n            store: dataStore,\n            bodyBorder: true,\n            columnCfgs: [\n                {\n                   text: 'Formatted ID', dataIndex: 'FormattedID', width: 100\n                },\n                {\n                    text: 'Name', dataIndex: 'Name', width: 500\n                },\n                {\n                    text: 'Accepted Date', dataIndex: 'AcceptedDate', width: 200, emptyCellText: 'No Date',\n                    renderer: function(value){\n                        if(value)\n                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());\n                    }\n                },\n                {\n                    text: 'InProgress Date', dataIndex: 'InProgressDate', width: 200, emptyCellText: 'No Date',\n                    renderer: function(value){\n                        if(value)\n                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());\n                    }\n                },\n                {\n                    text: 'Owner', dataIndex: 'Owner', flex: 1, emptyCellText: 'No Owner',\n                    renderer: function(value){\n                        if(value && value._refObjectName)\n                            return value._refObjectName;\n                    }\n                },\n                {\n                    text: 'Tags', dataIndex: 'Tags', flex: 1, emptyCellText: 'No Tags',\n                    renderer: function(value){\n                        if(value && value.Name)\n                            return value.Name;\n                    }\n                },\n                {\n                    text: 'CycleTime', dataIndex: 'CycleTime', flex: 1\n                },\n                {\n                    text: 'CycleTime Category', dataIndex: 'CycleTimeCategory', flex: 1\n                },\n             ]\n        });\n        \n        return grid;\n\t},\n\t\n  /* ####################################################################################################################################################################### */\n  \n  /* ============================================================================================================================== */\n  /* This Section is entirely for Configuring SLA & WIP LIMIT metrics */\n  /* ============================================================================================================================== */\n  \n    _createDataStoreForSLAAndWipLimit: function(){\n    \tvar me = this;\n    \tthis._initializingForWipSLAControls();\n    \tthis.loadStoriesAndSnapshots().then(Ext.bind(function(data){\n            \n            me.currWipLimitMessage = '<div style=\"text-indent: 1em;\"><b>Current</b> WIP is : <font size=\"3\" color=\"Black\"><b>'+ me.currWIPLimitValue +'</b></font></div>';\n\t\t\tme.preWipLimitMessage = '<div style=\"text-indent: 5em;\">Previous WIP is : <font size=\"2\" color=\"Black\"><b>'+ me.prevWIPLimitValue +'</b></font></div>';\n\t\t    var wipLimitContainer = me._createMetricsContainer('wipLimit', me.currWipLimitMessage, me.preWipLimitMessage);\n\t\t\tvar pastRangeWipLimitDataGrid = me.getDurationGrid(data.kanbanDurationStore, 'c_KanbanState', 'Durations by Kanban-State');\n\t\t    me._configureMetricsContainer('panel3', 'WIP Limit', wipLimitContainer, 'wipContainer', 'WipLimitSLAReport', pastRangeWipLimitDataGrid, false);\n\t\t        \n\t\t    me.currSLALimitMessage = '<div style=\"text-indent: 1em;\"><b>Current</b> SLA is : <font size=\"3\" color=\"Black\"><b>'+ me.getTeamSLA() + '</b> days</font></div>';\n\t\t    var slaLimitContainer = me._createSLAMetricsContainer('slaLimit', me.currSLALimitMessage);\n\t\t    var overSLAGrid = me.getStoryGrid('overSLAGrid', data.overSLAStore, 'Stories &gt; SLA limit (' + me.getTeamSLA() + ' days)', 'left');\n            var underSLAGrid = me.getStoryGrid('underSLAGrid', data.underSLAStore, 'Stories &lt; SLA Limit  (' + me.getTeamSLA() + ' days)', 'left');\n\t\t    me._configureSLAMetricsContainer('panel4', 'SLA Limit', slaLimitContainer, 'slaContainer', 'WipLimitSLAReport', overSLAGrid, underSLAGrid, true);\n        }));\n    },\n    \n    _initializingForWipSLAControls: function(){\n\t    //initiatilizing for SLA & Wip Limit\n\t    this.defaultTeamSLA = 10;\n        \n        if (this.kanbanDurationGrid) { //Destroy grids\n            this.kanbanDurationGrid.destroy();\n            this.overSLAGrid.destroy();\n            this.underSLAGrid.destroy();\n        }\n        \n        if (!this.isTeamSLASet()) {\n           this.info += '<div id=\"appHint\">Please set a value for the Team SLA in the App-Settings.<br/>A default of <b>' + this.defaultTeamSLA + ' days</b> is used.</div>'; \n        } \n        \n        this.dataStore = {\n                kanbanStateDurations: {},\n                kanbanStates: {}\n            };\n        \n        Ext.getCmp('infoContainer').update(this.info);\n    },\n    \n    isTeamSLASet: function() {\n        return _.parseInt(this.getSetting('teamSLA')) > 0;\n    },\n    \n    loadStoriesAndSnapshots: function() {\n\t\tvar currDate = new Date();\n\t\tvar prevDate = currDate.getDate() - 30;\n\t\t\n\t\tvar start = this.prevStartRallyDateFilter + \"TZ\";\n        var end = this.currEndRallyDateFilter + \"TZ\";\n        \n        var me = this;\n        var snapshots = this.getSnapshots({\n            fetch: ['ObjectID'],\n            findConfig: {\n                \"_TypeHierarchy\": \"HierarchicalRequirement\",\n                \"_PreviousValues.ScheduleState\": {\n                    \"$exists\": true,\n                    \"$lt\": \"Accepted\"\n                },\n                \"ScheduleState\": {\n                    \"$gte\": \"Accepted\"\n                },\n                \"_ValidFrom\": {\n                    \"$lt\": \tend,\t\t\t\t\t//\"2015-01-31TZ\",\t\t\t\t\t//TODO: Need to change to actual start period.\n                    \"$gte\": start\t\t\t\t\t//\"2014-12-01TZ\"\t\t\t\t\t//TODO: Need to change to actual end period.\n                },\n                \"Project\" : this.context.getProject().ObjectID\n            }\n        });\n        \n        return Deft.Promise.all([snapshots]).then(function(results){\n            var ids = [];\n             _.each(results[0], function(r) {\n                if (ids.indexOf(r.ObjectID <0)) {\n                      ids.push(r.ObjectID);\n                }\n            });\n            return me.loadStories(ids);\n        });\n    },\n    \n     getSnapshots: function(config) {\n        var workspaceOid = this.context.getWorkspace().ObjectID;\n        var deferred = new Deft.Deferred();\n        Ext.create('Rally.data.lookback.SnapshotStore', _.merge({\n            // TODO - account for > 20k results\n            autoLoad: true,\n            context: {\n                workspace: '/workspace/' + workspaceOid\n            },\n            listeners: {\n                load: function(store, data, success) {\n                    deferred.resolve(_.pluck(data, 'raw'));\n                }\n            }\n        }, config));\n\n        return deferred.getPromise();\n    },\n    \n    loadStories: function(ids) {\n        var me = Rally.getApp();\n        var snapshots = me.getSnapshots({\n            fetch: ['_ValidFrom', '_ValidTo', 'c_KanbanState', 'ScheduleState', '_UnformattedID', 'Name'],\n            hydrate: ['ScheduleState'],\n            findConfig: {\n                \"ObjectID\": {\n                    \"$in\": ids\n                },\n                 \"c_KanbanState\" : {\n                  \"$exists\": true  \n                }\n            }\n        });\n        \n        return Deft.Promise.all([ snapshots]).then(function(result) {\n            var stories = result[0], workdays, validTo;\n            var results = {stories: {}, totalAcceptedStories:0, totalInProgressWorkDays: 0};\n            me.dataStore.currKanbanStateDurations = {};\n             \n            _.each(stories, function(snapshot) {\n                snapshot.cycleTime = snapshot.cycleTime || 0;\n                snapshot.FormattedID = snapshot.FormattedID || \"US\" + snapshot._UnformattedID;\n                snapshot._ref = snapshot._ref || '/userstory/' + snapshot.ObjectID;\n               \n                validTo = (snapshot._ValidTo.indexOf('9999') >= 0) ? NOW : snapshot._ValidTo;\n                workdays = me.getWorkingDays(snapshot._ValidFrom, validTo);\n                me.initStates(snapshot);\n\n               if (_.isUndefined(results.stories[snapshot.ObjectID])) {\n                    results.stories[snapshot.ObjectID] = snapshot;\n                    results.totalAcceptedStories++;\n                    me.dataStore.kanbanStates[snapshot.ObjectID] = [];\n                }\n                \n                if (snapshot.ScheduleState === 'In-Progress') {\n                    results.stories[snapshot.ObjectID].cycleTime += workdays;\n                    results.totalInProgressWorkDays+= workdays;\n                }\n                \n                me.updateStates(snapshot, workdays, snapshot._ValidFrom);\n            });\n            \n            results.avgCycleTime = Math.ceil(results.totalInProgressWorkDays / results.totalAcceptedStories);\n            results.kanbanDurationStore = me.createCustomStore(_.values(me.dataStore.kanbanStateDurations));\n            results.currKanbanDurationStore = me.createCustomStore(_.values(me.dataStore.currKanbanStateDurations));\n           \n            return me.getOutliers(results);\n        });\n    },\n    \n    initStates: function(snapshot) {\n        this.dataStore.kanbanStateDurations[snapshot.c_KanbanState]  = this.dataStore.kanbanStateDurations[snapshot.c_KanbanState] || {storyCount:0, workdays: 0, snapshot: snapshot};\n        this.dataStore.currKanbanStateDurations[snapshot.c_KanbanState] = this.dataStore.currKanbanStateDurations[snapshot.c_KanbanState] || {storyCount: 0, workdays: 0, snapshot: snapshot};\n    },\n    \n     getWorkingDays: function(startDate, endDate) {\n\t\tvar currentDate = new Date(startDate), result = 0, weekDay, difference;\n\t\tvar minutes = 1000 * 60;\n        var hours = minutes * 60;\n        var days = hours * 24;\n        endDate = new Date(endDate);\n\n\t\twhile (currentDate <= endDate)  {\n            difference = (endDate.getTime() / days) - (currentDate.getTime() / days);\n            if (difference > 0) { \n            \t//only count days when difference is >= 1 day\n                weekDay = currentDate.getDay();\n                if (weekDay !== 0 && weekDay !== 6) {\n                    result += difference > 1 ? 1 : difference;\n                }\n            }\n\t\t\tcurrentDate.setDate(currentDate.getDate()+1); \n\t\t}\n\t\treturn result;\n\t},\n\t\n\tupdateStates: function(snapshot, workdays, validFrom) {\n\t\tvar validFromDate = new Date(validFrom);\n\t\t\n        if (this.dataStore.kanbanStates[snapshot.ObjectID].indexOf(snapshot.c_KanbanState) < 0) {\n            this.dataStore.kanbanStates[snapshot.ObjectID].push(snapshot.c_KanbanState);\n            this.dataStore.kanbanStateDurations[snapshot.c_KanbanState].storyCount++;\n            \n            if(validFromDate >= this.curr_Start_Date && validFromDate <= this.curr_End_Date){\n            \tthis.dataStore.currKanbanStateDurations[snapshot.c_KanbanState].storyCount++;\n            }\n        }\n        \n        this.dataStore.kanbanStateDurations[snapshot.c_KanbanState].workdays += workdays;\n       \n         if(validFromDate >= this.curr_Start_Date && validFromDate <= this.curr_End_Date){\n            \tthis.dataStore.currKanbanStateDurations[snapshot.c_KanbanState].workdays += workdays;\n          }\n    },\n    \n    createCustomStore: function(data) {\n        return Ext.create('Rally.data.custom.Store', {data: data});\n    },\n    \n    getOutliers: function(data) {\n        var teamSLA = this.getTeamSLA();\n        var overSLAStories = [], underSLAStories = [];\n        \n        _.each(data.stories, function(story, ObjectID){\n            if  (story.cycleTime > teamSLA) {\n                overSLAStories.push(story);\n            }\n            if  (story.cycleTime <= teamSLA) {\n                underSLAStories.push(story);\n            }\n        });\n        \n        data.overSLAStore = Rally.getApp().createCustomStore(_.sortBy(overSLAStories, 'cycleTime').reverse());\n        data.underSLAStore = Rally.getApp().createCustomStore(_.sortBy(underSLAStories, 'cycleTime').reverse());\n        \n        return data;\n    },\n    \n    getDurationGrid: function(store, state, title) {\n        return Ext.create('Rally.ui.grid.Grid', {\n            title: title,\n            store: store,\n            showPagingToolbar: false,\n            showRowActionsColumn: false,\n            columnCfgs: [\n                {text: 'State', width: 150, renderer: function(value, meta, record){return record.get('snapshot')[state];}},\n                {text: 'AVG time', renderer: function(value, meta, record) {return Math.ceil(record.get('workdays') / record.get('storyCount')) + ' days';}},\n                {text: '# Stories', dataIndex: 'storyCount'}\n            ]\n        }); \n    },\n    \n    getStoryGrid: function(gridId, store, title, css) {\n        return Ext.create('Rally.ui.grid.Grid', {\n        \tid: gridId,\n        \tbodyBorder: true,\n        \tautoScroll: true,\n        \tborder: 1,\n            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},\n        \tshowPagingToolbar: false,\n            showRowActionsColumn: false,\n            title: title,\n            store: store,\n            width: 350,\n            columnCfgs: [\n                {text: 'Formatted-ID', dataIndex: 'FormattedID',  xtype: 'templatecolumn', tpl: Ext.create('Rally.ui.renderer.template.FormattedIDTemplate')},\n                {text: 'Cycle-Time', renderer: function(value, meta, record){return record.get('cycleTime').toFixed(1) + ' days';}}\n            ],\n            storeConfig: {\n                 model: 'userstory'\n            }\n        });\n    },\n    \n    getTeamSLA: function() {\n        return this.isTeamSLASet() ? this.getSetting('teamSLA') : this.defaultTeamSLA;\n    },\n    \n    _configureSLAMetricsContainer: function(panelId, titleName, slaLimitContainer, containerId, reportId, outRangeDataGrid, inRangeDataGrid, hasGraph){\n\t\tvar widthValue = hasGraph? 750 : 450;\n\t\t\n\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {\n\t\t\tthis.dynamicItems[reportId][panelId].destroy();\n\t\t}\n\t\t\n\t\tvar myGridContainer = Ext.create('Ext.container.Container', {\n         \tid: 'storyGridContainer',\n         \tautoScroll: true,\n         \theight: 200,\n            layout: {\n                type: 'hbox',\n                align: 'fit',\n                padding: 10\n            },\n            renderTo: Ext.getBody(),\n            border: 1,\n            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},\n            items: [outRangeDataGrid, inRangeDataGrid]\n        });\n\t\t\n\t\tvar infoPanel=Ext.create('Ext.form.Panel', {\n        \tid: panelId,\n        \ttitle: titleName,\n        \tautoScroll: true,\n            renderTo: Ext.getBody(),\n            width: widthValue,\n            height: 300,\n            layout: {\n                type: 'vbox',\n                align: 'stretch',\n                padding: 5\n            },\n            items: [slaLimitContainer, myGridContainer]\n        });\n        \n        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);\n\t},\n\t\n\t_createSLAMetricsContainer: function(containerId, currMessage){\n\t\t\n\t\tvar myContainer = Ext.create('Ext.container.Container', {\n         \tid: containerId,\n         \tautoScroll: true,\n            layout: {\n                type: 'vbox',\n                align: 'stretch',\n                padding: 5\n            },\n            renderTo: Ext.getBody(),\n            border: 1,\n            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},\n            items: [{\n                xtype: 'label',\n                html: currMessage\n            }]\n        });\n        \n        return myContainer;\n\t},\n    \n    /* ####################################################################################################################################################################### */\n    \n\t_createMetricsContainer: function(containerId, currMessage, prevMessage){\n\t\t\n\t\tvar myContainer = Ext.create('Ext.container.Container', {\n         \tid: containerId,\n         \tautoScroll: true,\n            layout: {\n                type: 'hbox',\n                align: 'fit',\n                padding: 5\n            },\n            renderTo: Ext.getBody(),\n            border: 1,\n            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},\n            items: [{\n                xtype: 'label',\n                html: currMessage\n            },\n            {\n                xtype: 'label',\n                html: prevMessage\n            }]\n        });\n        \n        return myContainer;\n\t},\n\t\n\t_configureMetricsContainer: function(panelId, titleName, throughtputContainer, containerId, reportId, pastRangeDataGrid, hasGraph){\n\t\tvar widthValue = hasGraph? 750 : 500;\n\t\t\n\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {\n\t\t\tthis.dynamicItems[reportId][panelId].destroy();\n\t\t}\n\t\t\n\t\tvar infoPanel=Ext.create('Ext.form.Panel', {\n        \tid: panelId,\n        \ttitle: titleName,\n        \tautoScroll: true,\n            renderTo: Ext.getBody(),\n            width: widthValue,\n            height: 300,\n            layout: {\n                type: 'vbox',\n                align: 'stretch',\n                padding: 5\n            },\n            items: [throughtputContainer, pastRangeDataGrid]\n        });\n        \n        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);\n\t},\n\t\n\t//Note: Need to refactor to re-use the same methord for Pie or Bar graph.\n\t_createCycleTimePieContainer: function(cycleTimePie, bySizePie){\n\t\t\n\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {\n\t\t\t    itemId: 'defaultPieChartContainer', \n\t\t\t    id: 'defaultPieChartContainer',\n\t            layout: {\n\t                type: 'hbox',\n\t                align: 'stretch',\n\t                padding: 10\n\t            },\n\t            renderTo: Ext.getBody(),\n\t            border: 1,\n\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},\n\t            items: [cycleTimePie, bySizePie]\n\t        });\n\t},\n\t\n\n\t\n\t/* Configures and displays a pie chart*/\n\t_drawPie: function (id, name, text, data, extraData) {\t\n\t\t\n\t\tvar chart = {\n\t\t\txtype: 'rallychart',\n\t\t\tid: id,\n\t\t\theight: 400,\n\t\t\twidth: 400,\t\n\t\t\tstyle: {float: 'left'},\n\t\t\tchartData: {\n\t\t\t\tseries: [{\n\t\t\t\t\ttype: 'pie',\n\t\t\t\t\tname: name,\n\t\t\t\t\tdata: data\n\t\t\t\t}]\n\t\t\t},\n\t\t\tchartConfig: {\t\t\t\t\t\t\t\n\t\t\t\tchart: {\n\t\t\t\t\tplotBackgroundColor: null,\n\t\t\t\t\tplotBorderWidth: null,\n\t\t\t\t\tplotShadow: false,\n\t\t\t\t\ttype: 'pie'\n\t\t\t\t},\n\t\t\t\txAxis: {},//must specify empty x-axis due to bug\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: text\n\t\t\t\t},\n\t\t\t\ttooltip: {\n\t\t\t\t\tpointFormat: '{series.name}: <b>{point.y}</b>',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tpercentageDecimals: 1,\n\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\treturn _formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tplotOptions: {\n\t\t\t\t\tpie: {\n\t\t\t\t\t\tallowPointSelect: true,\n\t\t\t\t\t\tcursor: 'pointer',\n\t\t\t\t\t\tdataLabels: {\n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\tcolor: '#000000',\n\t\t\t\t\t\t\tconnectorColor: '#000000',\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn Rally.getApp()._formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\t\t\t\n\t\treturn chart;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t},\n\t\n\t/* formats lables for charts */\n\t_formatLabels: function(id, that, extraData) {\n\t\tswitch (id) {\n\t\t\tcase 'cycleTimePie':\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\treturn '<b>' + that.point.name +'</b><br/>AVG Cycle Time: '+ that.y;\n\t\t\tcase 'bySizePie' :\n\t\t\t\treturn '<b>'+ that.point.name +'</b><br/>Count: '+ that.y; \n\t\t}\t\t\t\t\n\t}\n\t\n});","undoManager":{"mark":2,"position":5,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":8,"column":0},"action":"remove","lines":["Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    items:{ html:'<a href=\"https://help.rallydev.com/apps/2.0rc3/doc/\">App SDK 2.0rc3 Docs</a>'},","    launch: function() {","        //Write app code here","    }","});",""]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":591,"column":0},"action":"insert","lines":["var types = Ext.data.Types; // allow shorthand type access","Ext.define('ThroughputDataModel', {","\textend: 'Ext.data.Model',","\tfields: [","                {name: 'FormattedID', mapping: 'FormattedID', type: types.STRING},","                {name: 'Name', mapping: 'Name', type: types.STRING},","                {name: 'AcceptedDate', mapping: 'AcceptedDate', type: types.DATE },","                {name: 'InProgressDate', mapping: 'InProgressDate', type: types.DATE },","                {name: 'Tags', mapping: 'Tags', type: types.STRING},","                {name: 'Owner', mapping: 'Owner', type: types.OBJECT},","                {name: 'CycleTime', mapping: 'CycleTime', type: types.FLOAT},","                {name: 'CycleTimeCategory', mapping: 'CycleTimeCategory', type: types.STRING}","            ]","});","","","","Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    items:[","    \t{xtype: 'container', itemId: 'throughputCycleReport', id: 'throughputCycleReport', ","            items: [\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t{xtype: 'container', itemId: 'cycleTimeContainer', id: 'cycleTimeContainer', title: 'Cycle-Time'},","\t\t\t\t{xtype: 'container', itemId: 'throughputContainer', id: 'throughputContainer', title: 'Throughput'}","\t\t\t],","\t\t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:5","\t\t    }","\t\t}],","    layout:{","        type:'vbox',","        align:'stretch',","        padding:10","    },","    ","    cycleTimeCategoryNames: [\"0-5 days\", \"6-10 days\", \"11-15 days\", \"16-20 days\", \"21-25 days\", \"26-30 days\", \"31+ days\"],","    cycleTimeDistRange: 5,","    ","    getSettingsFields:function()","\t{","\t\treturn[{","\t\t\tname:\"excludeWeekends\",","\t\t\txtype:\"rallycheckboxfield\",","\t\t\tfieldLabel:\"Exclude Weekends from Lead Time\"","\t\t}];","\t},","","\tconfig:{","\t\tdefaultSettings:{","\t\t    excludeWeekends:!0","\t\t}","\t},","\t","    launch: function() {","        ","        this._init();","        this._determineDateRangeForThroughput();","        this._createDataStoreForThroughput();","    },","    ","    _init: function() {\t","\t\t//dynamicItems hold created ui items, which needs to be destroyed before re-drawing","\t\tif (typeof this.dynamicItems === \"undefined\"){","\t\t\tthis.dynamicItems = {};","\t\t}","\t\t\t\t","\t\tif (typeof this.dynamicItems['throughputCycleReport'] === \"undefined\"){","\t\t\tthis.dynamicItems['throughputCycleReport'] = {};","\t\t}","\t\telse {","\t\t\tvar item;","\t","\t\t\tfor (item in this.dynamicItems['throughputCycleReport']) {","\t\t\t\tthis.dynamicItems['throughputCycleReport'][item].destroy();","\t\t\t}","\t\t}\t","\t},","    ","    _determineDateRangeForThroughput: function(){","        this.curr_End_Date = new Date();","        ","        //Determine a date 30 days prior to current date.","        var tmp_Curr_Date = new Date();","        tmp_Curr_Date.setDate(tmp_Curr_Date.getDate()-30);","        this.curr_Start_Date = tmp_Curr_Date;","        ","        this.currStartRallyDateFilter = this.curr_Start_Date.getFullYear() + '-' + (parseInt(this.curr_Start_Date.getMonth(), 10) + 1)  + '-' + this.curr_Start_Date.getDate();","        this.currEndRallyDateFilter = this.curr_End_Date.getFullYear() + '-' + (parseInt(this.curr_End_Date.getMonth(), 10) + 1)  + '-' + this.curr_End_Date.getDate();","        ","        var tmp_Prev_Date = new Date();","        tmp_Prev_Date.setDate(tmp_Prev_Date.getDate()-60);","        this.prev_Start_Date = tmp_Prev_Date;","        this.prev_End_Date = Ext.Date.add(this.curr_Start_Date, Ext.Date.DAY, -1);","        ","        this.prevStartRallyDateFilter = this.prev_Start_Date.getFullYear() + '-' + (parseInt(this.prev_Start_Date.getMonth(), 10)+1) + '-' + this.prev_Start_Date.getDate();","        this.prevEndRallyDateFilter = this.prev_End_Date.getFullYear() + '-' + (parseInt(this.prev_End_Date.getMonth(), 10)+1) + '-' + this.prev_End_Date.getDate();","        ","        this.past_Date_SixMonth = Ext.Date.add(this.curr_Start_Date, Ext.Date.MONTH, -5);","        this.pastDateSixMonthFilter = this.past_Date_SixMonth.getFullYear() + '-' + (parseInt(this.past_Date_SixMonth.getMonth(), 10)+1) + '-' + this.past_Date_SixMonth.getDate();","    }, ","    ","    _createDataStoreForThroughput: function(){","        //Determine the data filter for store.","        this.filter = Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '>=',","\t\t\tvalue: this.pastDateSixMonthFilter","\t\t}).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '<=',","\t\t\tvalue: this.currEndRallyDateFilter","\t\t})).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'c_KanbanState',","\t\t\toperator: '=',","\t\t\tvalue: 'Accepted'","\t\t}));","\t\t","\t\t//Record all columns that needs to be fetched.","\t\tthis.fetchDataColumns = ['FormattedID', 'Name', 'AcceptedDate', 'InProgressDate', 'Tags', 'Owner', 'c_KanbanState'];","\t\t","\t\t//configure the data store context.","\t\tthis.contextConfig = {","            workspace: this.getContext().getWorkspace()._Ref,","            project: this.getContext().getProject()._ref,","            projectScopeUp: false,","            projectScopeDown: true,","            limit: 'infinity'","        };","\t   ","\t   //set the sorter config for data store.","\t   this.sorterConfig = [{","                        \tproperty: 'AcceptedDate',","                        \tdirection: 'ASC'","                        },","                        {","                            property: 'FormattedID',","                            direction: 'ASC'","                        }];","                        ","\t\tthis._createUserStoryDataStore();","    },","    ","    _createUserStoryDataStore: function(){","\t    var myUserStoryStore = Ext.create('Rally.data.wsapi.Store', {","\t        model: 'HierarchicalRequirement',","\t        fetch: this.fetchDataColumns,","\t        autoLoad: true,","\t        context: this.contextConfig,","\t        filters: this.filter,","\t        sorters: this.sorterConfig,","\t        listeners: {","\t            load: function(store, data, success){","\t                this.currUserStoriesColl = [];","\t                this.prevUserStoriesColl = [];","\t                this.pastRangeUserStoriesColl = [];","\t                var that = this;","\t               ","\t                Ext.Array.each(data, function(userStory) {","\t                    if(userStory && userStory.get('AcceptedDate')){","\t                        if(userStory.get('AcceptedDate') >= that.curr_Start_Date){","\t                            that.currUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }if(userStory.get('AcceptedDate') < that.curr_Start_Date && userStory.get('AcceptedDate') >= that.prev_Start_Date){","\t                            that.prevUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }","\t                        ","\t                        that.pastRangeUserStoriesColl.push(that._createThroghputData(userStory));","\t                    }","\t                });","\t                ","\t                this._createDefectStore();","\t            },","\t            scope: this","\t        }","\t  });","\t},","\t","\t_createThroghputData: function(rallyObject){","\t    ","\t    var cycleTime = 0;","\t    var cycleTimeCat = \"N/A\";","\t    //Determine the cycle time for each object.","\t    if(rallyObject.get('AcceptedDate') && rallyObject.get('InProgressDate')){","\t        cycleTime = Rally.util.DateTime.getDifference(rallyObject.get('AcceptedDate'), rallyObject.get('InProgressDate'), 'day');","\t    }","\t    ","\t    for(var i =0; i<this.cycleTimeCategoryNames.length; i++){","\t        var lowerRange = i*this.cycleTimeDistRange, upperRange = lowerRange + 5;","\t        ","\t        if((cycleTime >lowerRange && cycleTime <= upperRange) || (lowerRange === 30 && cycleTime > lowerRange))","\t            cycleTimeCat = this.cycleTimeCategoryNames[i];","\t    }","\t    ","\t    //Generate the node for throghput data.","\t    var data = Ext.create('ThroughputDataModel', {","\t        FormattedID: rallyObject.get('FormattedID'), ","\t        Name: rallyObject.get('Name'), ","\t        AcceptedDate: rallyObject.get('AcceptedDate'), ","\t        InProgressDate: rallyObject.get('InProgressDate'), ","\t        Tags: rallyObject.get('Tags'), ","\t        Owner: rallyObject.get('Owner'),","\t        CycleTime: cycleTime,","\t        CycleTimeCategory: cycleTimeCat","\t    });","\t    ","\t    return data;","\t},","\t","\t_createDefectStore: function(){","\t    var that = this;","\t    var myDefectStore = Ext.create('Rally.data.wsapi.Store', {","            model: 'Defect',","            fetch: this.fetchDataColumns,","            autoLoad: true,","            context: this.contextConfig,","            filters: this.filter,","            sorters: this.sorterConfig,","            listeners: {","                load: function(store, data, success){","                    Ext.Array.each(data, function(defect){","                        if(defect && defect.get('AcceptedDate')){","                            if(defect.get('AcceptedDate') >= that.curr_Start_Date){","                            \tthat._insertRecordInOrder(that.currUserStoriesColl, that._createThroghputData(defect));","                            }if(defect.get('AcceptedDate') < that.curr_Start_Date && defect.get('AcceptedDate') >= that.prev_Start_Date){","                                that._insertRecordInOrder(that.prevUserStoriesColl, that._createThroghputData(defect));","                            }","                            ","                            that._insertRecordInOrder(that.pastRangeUserStoriesColl, that._createThroghputData(defect));","                        }","                           ","                    });","                    ","                    console.log('spite out Current US coll with defects: ', this.currUserStoriesColl);","\t                console.log('spite out previous US data coll with defects: ', this.prevUserStoriesColl);","\t                ","\t               this.currThroughputValue = this.currUserStoriesColl.length;","\t               this.prevThroughputValue = this.prevUserStoriesColl.length;","\t                ","\t                this.currThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.currUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.prevThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.prevUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.pastRangeThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        model: 'ThroughputDataModel',","                        data: this.pastRangeUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this._processStoreData();","                },","                scope: this","            }","\t  });","\t},","\t","\t_insertRecordInOrder: function(dataColl, record){","\t\tvar closestRecord = record;","\t\tvar recordDate = record.get(\"AcceptedDate\");","\t\t","\t\tExt.Array.each(dataColl, function(data) {","\t\t    var dataDate = data.get(\"AcceptedDate\");","\t\t    if(dataDate && recordDate && dataDate.getMonth() === recordDate.getMonth()){","\t\t    \tif(dataDate <= recordDate)","\t\t    \t\tclosestRecord = data;","\t\t    }","\t\t});","\t\t","\t\tvar dataIndex = dataColl.indexOf(closestRecord);","\t\tif(dataIndex != -1){","\t\t\tdataColl.splice(dataIndex, 0, record);","\t\t}","\t\telse{","\t\t\tdataColl.push(record);","\t\t}","\t},","\t","\t_processStoreData:  function() {","\t    var currThroghtputGridTitle = 'List all User Stories & defects for Current period (Between ' + this.currStartRallyDateFilter + ' & ' + this.currEndRallyDateFilter + ')';","\t    var currThroughputDataGrid = this._createThroughputDataGrid(currThroghtputGridTitle, this.currThroughputDataStore);","\t    ","\t    var prevThroghtputGridTitle = 'List all User Stories & defects for Previous period: (Between ' + this.prevStartRallyDateFilter + ' & ' + this.prevEndRallyDateFilter + ')';","\t    var prevThroughputDataGrid = this._createThroughputDataGrid(prevThroghtputGridTitle, this.prevThroughputDataStore);","\t    ","\t    var pastRangeThroghtputGridTitle = 'List all User Stories & defects for last 6 Months: (Between ' + this.pastDateSixMonthFilter + ' & ' + this.currEndRallyDateFilter + ')';","\t    var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore);","\t    ","\t    var currThroughputMessage = '<div>The Throughput for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b>' + this.currThroughputValue + '</b></div>';","\t    var prevThroughputMessage = '<div>The Throughput for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b>' + this.prevThroughputValue + '</b></div>';","\t    ","\t    this._createThroghputMessagePanel(currThroughputMessage, prevThroughputMessage);","\t    this._processThroughputDataForGraph();","\t    this._createThroghputGridPanel(currThroughputDataGrid, prevThroughputDataGrid, pastRangeThroughputDataGrid);","\t},","\t","\t_processThroughputDataForGraph: function(){","\t    var that = this;","\t\tthis.groupedSeries = [];","\t\t","\t\t//initialize the groupseries","\t    Ext.Array.each(that.cycleTimeCategoryNames, function(catName) {","\t        that.groupedSeries.push({name: catName, data:[], stack: 'qSizes'});","\t    });","\t    ","\t    that.groupedSeries.push({name: 'N/A', data: [], stack: 'qSizes'});","\t    ","\t    this.chartData = {","\t\t\ttotalCount: 0,","\t\t\tmonths: {},","\t\t\tmonthCount: 0,","\t\t\tcategories: []","\t\t};\t","\t\t    ","\t\tconsole.log('Spite out the Items: ', this.pastRangeUserStoriesColl);","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t    that._buildChartData(record);","\t\t});","\t\t","\t\tconsole.log('chartdata post configuration: ', this.chartData);","\t\tconsole.log('spite out groupedSeries: ', this.groupedSeries);","\t\t","\t\tthis._initAndDrawCharts(this.chartData);","\t},","\t","\t_buildChartData: function(record){","\t    var chartData = this.chartData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTimeCat = record.get(\"CycleTimeCategory\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    console.log(\"spite out accepted Month Number: \", recAcceptedDate.getMonth());","\t    ","\t    if(typeof chartData.months[recMonthNameCat] === \"undefined\"){","\t        chartData.months[recMonthNameCat] = {count: 0, monthNum: 0, cycletimes: {}, userStories: []};","\t        chartData.categories.push(recMonthNameCat);","\t        ","\t        for(var i=0; i<this.groupedSeries.length; ++i){","\t            this.groupedSeries[i].data.push(0); //add 0 for each month","\t        }","\t        ","\t        chartData.monthCount++;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].userStories.push(record);","\t    if(typeof chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] === 'undefined'){","\t        chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] =0;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat]++;","\t    chartData.months[recMonthNameCat].count++;","\t    chartData.totalCount++;","\t  ","\t    for(var s=0; s<this.groupedSeries.length; ++s){","\t        if(recCycleTimeCat === this.groupedSeries[s].name){","\t            this.groupedSeries[s].data[(chartData.monthCount -1)] = chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat];","\t        }","\t    }","\t   ","\t   this.chartData = chartData;","\t},","\t","\t//pre init for the charts ","\t_initAndDrawCharts: function(inputData) {\t\t\t\t\t\t\t\t\t\t\t\t","\t\tif (inputData.totalCount === 0) {","\t\t\treturn;","\t\t}\t\t\t\t\t\t","\t\t\t\t\t","\t\tvar throughput = [], i, qCount = 0, currTotalCount = 0, avgTotals = [], monthAVGs = [];","\t\t\t\t\t\t","\t\tfor (i in inputData.months) {\t\t\t","\t\t\tthroughput.push(inputData.months[i].count);","\t\t\tcurrTotalCount += inputData.months[i].count;","\t\t\tqCount++;","\t\t\t\t\t","\t\t\tavgTotals.push(Math.round(currTotalCount / qCount, 2));","\t\t}","\t\t\t\t\t","\t\tfor (i = 0; i < inputData.monthCount; ++i) {","\t\t\tmonthAVGs.push(Math.round(inputData.totalCount / inputData.monthCount, 2));","\t\t}","\t","\t\t//Finalize series","\t\tthis.groupedSeries.unshift({name: 'Throughput', data: throughput});","\t\tthis.groupedSeries.push({type: 'spline',name: 'Moving Average', data: avgTotals, color: 'blue', marker: {lineWidth: 1, fillColor: 'red'}});\t\t\t\t","\t\tthis.groupedSeries.push({type: 'spline',name: 'Average / Month', data: monthAVGs, color: 'purple', marker: {lineWidth: 1, fillColor: 'red'}});","\t\tthis.groupedSeries.push({name: 'Total UserStories: ' + inputData.totalCount, color: '#fff', stack:'blank'});","\t\t\t\t","\t\tthis._drawHorizontalBarChart(inputData.categories, this.groupedSeries);\t\t\t","\t},","\t","\t// Configures and displays a horizontal bar chart","\t_drawHorizontalBarChart: function(categories, data) {\t","\t\tvar conf = {","\t\t\tid: 'verticalBars',","\t\t\ttargetContainer: '#defaultChartContainer',","\t\t\tseries: data,\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'Throughput by Months',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Count'\t\t\t\t\t\t\t\t\t\t\t\t","\t\t};\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t","\t\tthis._drawBarChart(conf);","\t},\t\t\t\t\t\t\t\t","\t","\t//Draws and displays the bar chart ","\t_drawBarChart: function (conf) {\t\t\t\t\t","\t\tvar throughputChart = Ext.create('Rally.ui.chart.Chart',{","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\tchartData: {series: conf.series},\t\t\t\t\t\t\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tplotOptions: {","\t\t\t\t\tcolumn: {","\t\t\t\t\t\tstacking: 'normal', ","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tpoint: {","\t\t\t\t\t\t\tevents: {","\t\t\t\t\t\t\t\tclick: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t//Need to implement","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}\t\t\t\t\t\t\t\t\t","\t\t\t\t},","\t\t\t\tchart: {plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false, type: conf.chartType},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {align: 'right', verticalAlign: 'top', x: 0, y: 100,layout: 'vertical'},","\t\t\t\ttitle: {text: conf.chartTitle},","\t\t\t\ttooltip: {","\t\t\t\t\tformatter: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name + ' | ' + this.x + '</b><br/>'+","\t\t\t\t\t\t\t'<b>'+ this.y + '</b> User Stories<br/><i>(Click to view User Stories)</i>';","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{title: {text: conf.yAxisTitle}}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}]","\t\t\t}","\t\t});","\t\t","\t\tif(this.throughtputGraphContainer){","\t\t\tthis.throughtputGraphContainer.removeAll(true);","\t\t\tthis.throughtputGraphContainer.add(throughputChart);","\t\t}","\t\telse{","\t\t\t\tthis.throughtputGraphContainer = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultChartContainer', ","\t\t\t    id: 'defaultChartContainer',","\t            layout: {","\t                type: 'vbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [throughputChart]","\t        });","\t        ","\t        this.add(this.throughtputGraphContainer);","\t\t}","\t},\t\t\t\t","\t","\t_createThroghputMessagePanel: function(currThroughputMessage, prevThroughputMessage){","         var throughtputContainer = Ext.create('Ext.container.Container', {","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currThroughputMessage","            },","            {","                xtype: 'label',","                html: prevThroughputMessage","            }]","        });","        ","        //create the panel for displaying computed Throughput.","        if(this.infoPanel){","            this.infoPanel.removeAll(true);","            this.infoPanel.add(throughtputContainer);","        }","        else{","            this.infoPanel=Ext.create('Ext.form.Panel', {","            \t title: 'Throughput',","                renderTo: Ext.getBody(),","                layout: {","                    type: 'vbox',","                    align: 'stretch',","                    padding: 10","                },","                items: [throughtputContainer]","            });","            ","            this.add(this.infoPanel);","        }","\t},","\t","\t_createThroghputGridPanel: function(currThroughputDataGrid, prevThroughputDataGrid, pastRangeThroughputDataGrid){","\t    //create the grid panel to display the grid.","        if(this.gridPanel){","            this.gridPanel.removeAll(true);","            this.gridPanel.add(currThroughputDataGrid);","            this.gridPanel.add(prevThroughputDataGrid);","            this.gridPanel.add(pastRangeThroughputDataGrid);","        }","        else{","            ","            this.gridPanel=Ext.create('Ext.form.Panel', {","                renderTo: Ext.getBody(),","                title: 'View Details: ',","                layout: {","                    type: 'vbox',","                    align: 'stretch',","                    padding: 10","                },","                items: [currThroughputDataGrid, prevThroughputDataGrid, pastRangeThroughputDataGrid]","            });","            ","            this.add(this.gridPanel);","        }","\t},","\t","\t_createThroughputDataGrid: function(title, dataStore){","\t    var grid = Ext.create('Rally.ui.grid.Grid', {","\t        title: title,","            store: dataStore,","            bodyBorder: true,","            columnCfgs: [","                {","                   text: 'Formatted ID', dataIndex: 'FormattedID', width: 100","                },","                {","                    text: 'Name', dataIndex: 'Name', width: 500","                },","                {","                    text: 'Accepted Date', dataIndex: 'AcceptedDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'InProgress Date', dataIndex: 'InProgressDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'Owner', dataIndex: 'Owner', flex: 1, emptyCellText: 'No Owner',","                    renderer: function(value){","                        if(value && value._refObjectName)","                            return value._refObjectName;","                    }","                },","                {","                    text: 'Tags', dataIndex: 'Tags', flex: 1, emptyCellText: 'No Tags',","                    renderer: function(value){","                        if(value && value.Name)","                            return value.Name;","                    }","                },","                {","                    text: 'CycleTime', dataIndex: 'CycleTime', flex: 1","                },","                {","                    text: 'CycleTime Category', dataIndex: 'CycleTimeCategory', flex: 1","                },","             ]","        });","        ","        return grid;","\t}","});",""]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":591,"column":0},"action":"remove","lines":["var types = Ext.data.Types; // allow shorthand type access","Ext.define('ThroughputDataModel', {","\textend: 'Ext.data.Model',","\tfields: [","                {name: 'FormattedID', mapping: 'FormattedID', type: types.STRING},","                {name: 'Name', mapping: 'Name', type: types.STRING},","                {name: 'AcceptedDate', mapping: 'AcceptedDate', type: types.DATE },","                {name: 'InProgressDate', mapping: 'InProgressDate', type: types.DATE },","                {name: 'Tags', mapping: 'Tags', type: types.STRING},","                {name: 'Owner', mapping: 'Owner', type: types.OBJECT},","                {name: 'CycleTime', mapping: 'CycleTime', type: types.FLOAT},","                {name: 'CycleTimeCategory', mapping: 'CycleTimeCategory', type: types.STRING}","            ]","});","","","","Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    items:[","    \t{xtype: 'container', itemId: 'throughputCycleReport', id: 'throughputCycleReport', ","            items: [\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t{xtype: 'container', itemId: 'cycleTimeContainer', id: 'cycleTimeContainer', title: 'Cycle-Time'},","\t\t\t\t{xtype: 'container', itemId: 'throughputContainer', id: 'throughputContainer', title: 'Throughput'}","\t\t\t],","\t\t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:5","\t\t    }","\t\t}],","    layout:{","        type:'vbox',","        align:'stretch',","        padding:10","    },","    ","    cycleTimeCategoryNames: [\"0-5 days\", \"6-10 days\", \"11-15 days\", \"16-20 days\", \"21-25 days\", \"26-30 days\", \"31+ days\"],","    cycleTimeDistRange: 5,","    ","    getSettingsFields:function()","\t{","\t\treturn[{","\t\t\tname:\"excludeWeekends\",","\t\t\txtype:\"rallycheckboxfield\",","\t\t\tfieldLabel:\"Exclude Weekends from Lead Time\"","\t\t}];","\t},","","\tconfig:{","\t\tdefaultSettings:{","\t\t    excludeWeekends:!0","\t\t}","\t},","\t","    launch: function() {","        ","        this._init();","        this._determineDateRangeForThroughput();","        this._createDataStoreForThroughput();","    },","    ","    _init: function() {\t","\t\t//dynamicItems hold created ui items, which needs to be destroyed before re-drawing","\t\tif (typeof this.dynamicItems === \"undefined\"){","\t\t\tthis.dynamicItems = {};","\t\t}","\t\t\t\t","\t\tif (typeof this.dynamicItems['throughputCycleReport'] === \"undefined\"){","\t\t\tthis.dynamicItems['throughputCycleReport'] = {};","\t\t}","\t\telse {","\t\t\tvar item;","\t","\t\t\tfor (item in this.dynamicItems['throughputCycleReport']) {","\t\t\t\tthis.dynamicItems['throughputCycleReport'][item].destroy();","\t\t\t}","\t\t}\t","\t},","    ","    _determineDateRangeForThroughput: function(){","        this.curr_End_Date = new Date();","        ","        //Determine a date 30 days prior to current date.","        var tmp_Curr_Date = new Date();","        tmp_Curr_Date.setDate(tmp_Curr_Date.getDate()-30);","        this.curr_Start_Date = tmp_Curr_Date;","        ","        this.currStartRallyDateFilter = this.curr_Start_Date.getFullYear() + '-' + (parseInt(this.curr_Start_Date.getMonth(), 10) + 1)  + '-' + this.curr_Start_Date.getDate();","        this.currEndRallyDateFilter = this.curr_End_Date.getFullYear() + '-' + (parseInt(this.curr_End_Date.getMonth(), 10) + 1)  + '-' + this.curr_End_Date.getDate();","        ","        var tmp_Prev_Date = new Date();","        tmp_Prev_Date.setDate(tmp_Prev_Date.getDate()-60);","        this.prev_Start_Date = tmp_Prev_Date;","        this.prev_End_Date = Ext.Date.add(this.curr_Start_Date, Ext.Date.DAY, -1);","        ","        this.prevStartRallyDateFilter = this.prev_Start_Date.getFullYear() + '-' + (parseInt(this.prev_Start_Date.getMonth(), 10)+1) + '-' + this.prev_Start_Date.getDate();","        this.prevEndRallyDateFilter = this.prev_End_Date.getFullYear() + '-' + (parseInt(this.prev_End_Date.getMonth(), 10)+1) + '-' + this.prev_End_Date.getDate();","        ","        this.past_Date_SixMonth = Ext.Date.add(this.curr_Start_Date, Ext.Date.MONTH, -5);","        this.pastDateSixMonthFilter = this.past_Date_SixMonth.getFullYear() + '-' + (parseInt(this.past_Date_SixMonth.getMonth(), 10)+1) + '-' + this.past_Date_SixMonth.getDate();","    }, ","    ","    _createDataStoreForThroughput: function(){","        //Determine the data filter for store.","        this.filter = Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '>=',","\t\t\tvalue: this.pastDateSixMonthFilter","\t\t}).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '<=',","\t\t\tvalue: this.currEndRallyDateFilter","\t\t})).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'c_KanbanState',","\t\t\toperator: '=',","\t\t\tvalue: 'Accepted'","\t\t}));","\t\t","\t\t//Record all columns that needs to be fetched.","\t\tthis.fetchDataColumns = ['FormattedID', 'Name', 'AcceptedDate', 'InProgressDate', 'Tags', 'Owner', 'c_KanbanState'];","\t\t","\t\t//configure the data store context.","\t\tthis.contextConfig = {","            workspace: this.getContext().getWorkspace()._Ref,","            project: this.getContext().getProject()._ref,","            projectScopeUp: false,","            projectScopeDown: true,","            limit: 'infinity'","        };","\t   ","\t   //set the sorter config for data store.","\t   this.sorterConfig = [{","                        \tproperty: 'AcceptedDate',","                        \tdirection: 'ASC'","                        },","                        {","                            property: 'FormattedID',","                            direction: 'ASC'","                        }];","                        ","\t\tthis._createUserStoryDataStore();","    },","    ","    _createUserStoryDataStore: function(){","\t    var myUserStoryStore = Ext.create('Rally.data.wsapi.Store', {","\t        model: 'HierarchicalRequirement',","\t        fetch: this.fetchDataColumns,","\t        autoLoad: true,","\t        context: this.contextConfig,","\t        filters: this.filter,","\t        sorters: this.sorterConfig,","\t        listeners: {","\t            load: function(store, data, success){","\t                this.currUserStoriesColl = [];","\t                this.prevUserStoriesColl = [];","\t                this.pastRangeUserStoriesColl = [];","\t                var that = this;","\t               ","\t                Ext.Array.each(data, function(userStory) {","\t                    if(userStory && userStory.get('AcceptedDate')){","\t                        if(userStory.get('AcceptedDate') >= that.curr_Start_Date){","\t                            that.currUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }if(userStory.get('AcceptedDate') < that.curr_Start_Date && userStory.get('AcceptedDate') >= that.prev_Start_Date){","\t                            that.prevUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }","\t                        ","\t                        that.pastRangeUserStoriesColl.push(that._createThroghputData(userStory));","\t                    }","\t                });","\t                ","\t                this._createDefectStore();","\t            },","\t            scope: this","\t        }","\t  });","\t},","\t","\t_createThroghputData: function(rallyObject){","\t    ","\t    var cycleTime = 0;","\t    var cycleTimeCat = \"N/A\";","\t    //Determine the cycle time for each object.","\t    if(rallyObject.get('AcceptedDate') && rallyObject.get('InProgressDate')){","\t        cycleTime = Rally.util.DateTime.getDifference(rallyObject.get('AcceptedDate'), rallyObject.get('InProgressDate'), 'day');","\t    }","\t    ","\t    for(var i =0; i<this.cycleTimeCategoryNames.length; i++){","\t        var lowerRange = i*this.cycleTimeDistRange, upperRange = lowerRange + 5;","\t        ","\t        if((cycleTime >lowerRange && cycleTime <= upperRange) || (lowerRange === 30 && cycleTime > lowerRange))","\t            cycleTimeCat = this.cycleTimeCategoryNames[i];","\t    }","\t    ","\t    //Generate the node for throghput data.","\t    var data = Ext.create('ThroughputDataModel', {","\t        FormattedID: rallyObject.get('FormattedID'), ","\t        Name: rallyObject.get('Name'), ","\t        AcceptedDate: rallyObject.get('AcceptedDate'), ","\t        InProgressDate: rallyObject.get('InProgressDate'), ","\t        Tags: rallyObject.get('Tags'), ","\t        Owner: rallyObject.get('Owner'),","\t        CycleTime: cycleTime,","\t        CycleTimeCategory: cycleTimeCat","\t    });","\t    ","\t    return data;","\t},","\t","\t_createDefectStore: function(){","\t    var that = this;","\t    var myDefectStore = Ext.create('Rally.data.wsapi.Store', {","            model: 'Defect',","            fetch: this.fetchDataColumns,","            autoLoad: true,","            context: this.contextConfig,","            filters: this.filter,","            sorters: this.sorterConfig,","            listeners: {","                load: function(store, data, success){","                    Ext.Array.each(data, function(defect){","                        if(defect && defect.get('AcceptedDate')){","                            if(defect.get('AcceptedDate') >= that.curr_Start_Date){","                            \tthat._insertRecordInOrder(that.currUserStoriesColl, that._createThroghputData(defect));","                            }if(defect.get('AcceptedDate') < that.curr_Start_Date && defect.get('AcceptedDate') >= that.prev_Start_Date){","                                that._insertRecordInOrder(that.prevUserStoriesColl, that._createThroghputData(defect));","                            }","                            ","                            that._insertRecordInOrder(that.pastRangeUserStoriesColl, that._createThroghputData(defect));","                        }","                           ","                    });","                    ","                    console.log('spite out Current US coll with defects: ', this.currUserStoriesColl);","\t                console.log('spite out previous US data coll with defects: ', this.prevUserStoriesColl);","\t                ","\t               this.currThroughputValue = this.currUserStoriesColl.length;","\t               this.prevThroughputValue = this.prevUserStoriesColl.length;","\t                ","\t                this.currThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.currUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.prevThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.prevUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.pastRangeThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        model: 'ThroughputDataModel',","                        data: this.pastRangeUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this._processStoreData();","                },","                scope: this","            }","\t  });","\t},","\t","\t_insertRecordInOrder: function(dataColl, record){","\t\tvar closestRecord = record;","\t\tvar recordDate = record.get(\"AcceptedDate\");","\t\t","\t\tExt.Array.each(dataColl, function(data) {","\t\t    var dataDate = data.get(\"AcceptedDate\");","\t\t    if(dataDate && recordDate && dataDate.getMonth() === recordDate.getMonth()){","\t\t    \tif(dataDate <= recordDate)","\t\t    \t\tclosestRecord = data;","\t\t    }","\t\t});","\t\t","\t\tvar dataIndex = dataColl.indexOf(closestRecord);","\t\tif(dataIndex != -1){","\t\t\tdataColl.splice(dataIndex, 0, record);","\t\t}","\t\telse{","\t\t\tdataColl.push(record);","\t\t}","\t},","\t","\t_processStoreData:  function() {","\t    var currThroghtputGridTitle = 'List all User Stories & defects for Current period (Between ' + this.currStartRallyDateFilter + ' & ' + this.currEndRallyDateFilter + ')';","\t    var currThroughputDataGrid = this._createThroughputDataGrid(currThroghtputGridTitle, this.currThroughputDataStore);","\t    ","\t    var prevThroghtputGridTitle = 'List all User Stories & defects for Previous period: (Between ' + this.prevStartRallyDateFilter + ' & ' + this.prevEndRallyDateFilter + ')';","\t    var prevThroughputDataGrid = this._createThroughputDataGrid(prevThroghtputGridTitle, this.prevThroughputDataStore);","\t    ","\t    var pastRangeThroghtputGridTitle = 'List all User Stories & defects for last 6 Months: (Between ' + this.pastDateSixMonthFilter + ' & ' + this.currEndRallyDateFilter + ')';","\t    var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore);","\t    ","\t    var currThroughputMessage = '<div>The Throughput for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b>' + this.currThroughputValue + '</b></div>';","\t    var prevThroughputMessage = '<div>The Throughput for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b>' + this.prevThroughputValue + '</b></div>';","\t    ","\t    this._createThroghputMessagePanel(currThroughputMessage, prevThroughputMessage);","\t    this._processThroughputDataForGraph();","\t    this._createThroghputGridPanel(currThroughputDataGrid, prevThroughputDataGrid, pastRangeThroughputDataGrid);","\t},","\t","\t_processThroughputDataForGraph: function(){","\t    var that = this;","\t\tthis.groupedSeries = [];","\t\t","\t\t//initialize the groupseries","\t    Ext.Array.each(that.cycleTimeCategoryNames, function(catName) {","\t        that.groupedSeries.push({name: catName, data:[], stack: 'qSizes'});","\t    });","\t    ","\t    that.groupedSeries.push({name: 'N/A', data: [], stack: 'qSizes'});","\t    ","\t    this.chartData = {","\t\t\ttotalCount: 0,","\t\t\tmonths: {},","\t\t\tmonthCount: 0,","\t\t\tcategories: []","\t\t};\t","\t\t    ","\t\tconsole.log('Spite out the Items: ', this.pastRangeUserStoriesColl);","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t    that._buildChartData(record);","\t\t});","\t\t","\t\tconsole.log('chartdata post configuration: ', this.chartData);","\t\tconsole.log('spite out groupedSeries: ', this.groupedSeries);","\t\t","\t\tthis._initAndDrawCharts(this.chartData);","\t},","\t","\t_buildChartData: function(record){","\t    var chartData = this.chartData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTimeCat = record.get(\"CycleTimeCategory\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    console.log(\"spite out accepted Month Number: \", recAcceptedDate.getMonth());","\t    ","\t    if(typeof chartData.months[recMonthNameCat] === \"undefined\"){","\t        chartData.months[recMonthNameCat] = {count: 0, monthNum: 0, cycletimes: {}, userStories: []};","\t        chartData.categories.push(recMonthNameCat);","\t        ","\t        for(var i=0; i<this.groupedSeries.length; ++i){","\t            this.groupedSeries[i].data.push(0); //add 0 for each month","\t        }","\t        ","\t        chartData.monthCount++;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].userStories.push(record);","\t    if(typeof chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] === 'undefined'){","\t        chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] =0;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat]++;","\t    chartData.months[recMonthNameCat].count++;","\t    chartData.totalCount++;","\t  ","\t    for(var s=0; s<this.groupedSeries.length; ++s){","\t        if(recCycleTimeCat === this.groupedSeries[s].name){","\t            this.groupedSeries[s].data[(chartData.monthCount -1)] = chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat];","\t        }","\t    }","\t   ","\t   this.chartData = chartData;","\t},","\t","\t//pre init for the charts ","\t_initAndDrawCharts: function(inputData) {\t\t\t\t\t\t\t\t\t\t\t\t","\t\tif (inputData.totalCount === 0) {","\t\t\treturn;","\t\t}\t\t\t\t\t\t","\t\t\t\t\t","\t\tvar throughput = [], i, qCount = 0, currTotalCount = 0, avgTotals = [], monthAVGs = [];","\t\t\t\t\t\t","\t\tfor (i in inputData.months) {\t\t\t","\t\t\tthroughput.push(inputData.months[i].count);","\t\t\tcurrTotalCount += inputData.months[i].count;","\t\t\tqCount++;","\t\t\t\t\t","\t\t\tavgTotals.push(Math.round(currTotalCount / qCount, 2));","\t\t}","\t\t\t\t\t","\t\tfor (i = 0; i < inputData.monthCount; ++i) {","\t\t\tmonthAVGs.push(Math.round(inputData.totalCount / inputData.monthCount, 2));","\t\t}","\t","\t\t//Finalize series","\t\tthis.groupedSeries.unshift({name: 'Throughput', data: throughput});","\t\tthis.groupedSeries.push({type: 'spline',name: 'Moving Average', data: avgTotals, color: 'blue', marker: {lineWidth: 1, fillColor: 'red'}});\t\t\t\t","\t\tthis.groupedSeries.push({type: 'spline',name: 'Average / Month', data: monthAVGs, color: 'purple', marker: {lineWidth: 1, fillColor: 'red'}});","\t\tthis.groupedSeries.push({name: 'Total UserStories: ' + inputData.totalCount, color: '#fff', stack:'blank'});","\t\t\t\t","\t\tthis._drawHorizontalBarChart(inputData.categories, this.groupedSeries);\t\t\t","\t},","\t","\t// Configures and displays a horizontal bar chart","\t_drawHorizontalBarChart: function(categories, data) {\t","\t\tvar conf = {","\t\t\tid: 'verticalBars',","\t\t\ttargetContainer: '#defaultChartContainer',","\t\t\tseries: data,\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'Throughput by Months',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Count'\t\t\t\t\t\t\t\t\t\t\t\t","\t\t};\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t","\t\tthis._drawBarChart(conf);","\t},\t\t\t\t\t\t\t\t","\t","\t//Draws and displays the bar chart ","\t_drawBarChart: function (conf) {\t\t\t\t\t","\t\tvar throughputChart = Ext.create('Rally.ui.chart.Chart',{","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\tchartData: {series: conf.series},\t\t\t\t\t\t\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tplotOptions: {","\t\t\t\t\tcolumn: {","\t\t\t\t\t\tstacking: 'normal', ","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tpoint: {","\t\t\t\t\t\t\tevents: {","\t\t\t\t\t\t\t\tclick: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t//Need to implement","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}\t\t\t\t\t\t\t\t\t","\t\t\t\t},","\t\t\t\tchart: {plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false, type: conf.chartType},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {align: 'right', verticalAlign: 'top', x: 0, y: 100,layout: 'vertical'},","\t\t\t\ttitle: {text: conf.chartTitle},","\t\t\t\ttooltip: {","\t\t\t\t\tformatter: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name + ' | ' + this.x + '</b><br/>'+","\t\t\t\t\t\t\t'<b>'+ this.y + '</b> User Stories<br/><i>(Click to view User Stories)</i>';","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{title: {text: conf.yAxisTitle}}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}]","\t\t\t}","\t\t});","\t\t","\t\tif(this.throughtputGraphContainer){","\t\t\tthis.throughtputGraphContainer.removeAll(true);","\t\t\tthis.throughtputGraphContainer.add(throughputChart);","\t\t}","\t\telse{","\t\t\t\tthis.throughtputGraphContainer = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultChartContainer', ","\t\t\t    id: 'defaultChartContainer',","\t            layout: {","\t                type: 'vbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [throughputChart]","\t        });","\t        ","\t        this.add(this.throughtputGraphContainer);","\t\t}","\t},\t\t\t\t","\t","\t_createThroghputMessagePanel: function(currThroughputMessage, prevThroughputMessage){","         var throughtputContainer = Ext.create('Ext.container.Container', {","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currThroughputMessage","            },","            {","                xtype: 'label',","                html: prevThroughputMessage","            }]","        });","        ","        //create the panel for displaying computed Throughput.","        if(this.infoPanel){","            this.infoPanel.removeAll(true);","            this.infoPanel.add(throughtputContainer);","        }","        else{","            this.infoPanel=Ext.create('Ext.form.Panel', {","            \t title: 'Throughput',","                renderTo: Ext.getBody(),","                layout: {","                    type: 'vbox',","                    align: 'stretch',","                    padding: 10","                },","                items: [throughtputContainer]","            });","            ","            this.add(this.infoPanel);","        }","\t},","\t","\t_createThroghputGridPanel: function(currThroughputDataGrid, prevThroughputDataGrid, pastRangeThroughputDataGrid){","\t    //create the grid panel to display the grid.","        if(this.gridPanel){","            this.gridPanel.removeAll(true);","            this.gridPanel.add(currThroughputDataGrid);","            this.gridPanel.add(prevThroughputDataGrid);","            this.gridPanel.add(pastRangeThroughputDataGrid);","        }","        else{","            ","            this.gridPanel=Ext.create('Ext.form.Panel', {","                renderTo: Ext.getBody(),","                title: 'View Details: ',","                layout: {","                    type: 'vbox',","                    align: 'stretch',","                    padding: 10","                },","                items: [currThroughputDataGrid, prevThroughputDataGrid, pastRangeThroughputDataGrid]","            });","            ","            this.add(this.gridPanel);","        }","\t},","\t","\t_createThroughputDataGrid: function(title, dataStore){","\t    var grid = Ext.create('Rally.ui.grid.Grid', {","\t        title: title,","            store: dataStore,","            bodyBorder: true,","            columnCfgs: [","                {","                   text: 'Formatted ID', dataIndex: 'FormattedID', width: 100","                },","                {","                    text: 'Name', dataIndex: 'Name', width: 500","                },","                {","                    text: 'Accepted Date', dataIndex: 'AcceptedDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'InProgress Date', dataIndex: 'InProgressDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'Owner', dataIndex: 'Owner', flex: 1, emptyCellText: 'No Owner',","                    renderer: function(value){","                        if(value && value._refObjectName)","                            return value._refObjectName;","                    }","                },","                {","                    text: 'Tags', dataIndex: 'Tags', flex: 1, emptyCellText: 'No Tags',","                    renderer: function(value){","                        if(value && value.Name)","                            return value.Name;","                    }","                },","                {","                    text: 'CycleTime', dataIndex: 'CycleTime', flex: 1","                },","                {","                    text: 'CycleTime Category', dataIndex: 'CycleTimeCategory', flex: 1","                },","             ]","        });","        ","        return grid;","\t}","});",""]},{"start":{"row":0,"column":0},"end":{"row":889,"column":3},"action":"insert","lines":["var types = Ext.data.Types; // allow shorthand type access","Ext.define('ThroughputDataModel', {","\textend: 'Ext.data.Model',","\tfields: [","                {name: 'FormattedID', mapping: 'FormattedID', type: types.STRING},","                {name: 'Name', mapping: 'Name', type: types.STRING},","                {name: 'AcceptedDate', mapping: 'AcceptedDate', type: types.DATE },","                {name: 'InProgressDate', mapping: 'InProgressDate', type: types.DATE },","                {name: 'Tags', mapping: 'Tags', type: types.STRING},","                {name: 'Owner', mapping: 'Owner', type: types.OBJECT},","                {name: 'CycleTime', mapping: 'CycleTime', type: types.FLOAT},","                {name: 'CycleTimeCategory', mapping: 'CycleTimeCategory', type: types.STRING}","            ]","});","","Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    items:[","    \t{xtype: 'container', itemId: 'throughputCycleTimeReport', id: 'throughputCycleTimeReport', ","            items: [\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t{xtype: 'container', itemId: 'throughputContainer', id: 'throughputContainer', title: 'Throughput'},","\t\t\t\t{xtype: 'container', itemId: 'cycleTimeContainer', id: 'cycleTimeContainer', title: 'Cycle-Time'}","\t\t\t],","\t\t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:10","\t\t    }","\t\t},\t","    \t{xtype: 'container', itemId: 'WipLimitSLAReport', id: 'WipLimitSLAReport', ","            items: [\t\t","            \t{xtype: 'container', itemId: 'wipContainer', id: 'wipContainer', title: 'WIP Limit'},","\t\t\t\t{xtype: 'container', itemId: 'slaContainer', id: 'slaContainer', title: 'SLA Counter'}","\t\t\t],","    \t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:10","\t\t    }","    \t}","\t],","\t","    layout:{","        type:'vbox',","        align:'stretch',","        padding:10","    },","    ","    cycleTimeCategoryNames: [\"0-5 days\", \"6-10 days\", \"11-15 days\", \"16-20 days\", \"21-25 days\", \"26-30 days\", \"31+ days\"],","    cycleTimeDistRange: 5,","\t","    launch: function() {","    \t","    \tthis.activeViews = ['throughputCycleTimeReport','WipLimitSLAReport'];","    \tthis._init();","        this.currThroughputMessage = '<div>The Throughput for current period (between Start Date & End Date) is : <b> 10 </b></div>';","\t    this.prevThroughputMessage =  '<div>The Throughput for Previous period (between Start Date & End Date) is : <b> 10 </b></div>';","\t    ","\t    this._determineDateRangeForThroughput();","        ","        this._createDataStoreForThroughput();","    },","    ","    /* Initializes the app */","\t_init: function() {\t","\t\tvar that = this;","\t\t//dynamicItems hold created ui items, which needs to be destroyed before re-drawing","\t\tif (typeof this.dynamicItems === \"undefined\"){","\t\t\tthis.dynamicItems = {};","\t\t}","\t\t","\t\tExt.Array.each(this.activeViews, function(viewName){","\t\t\tif (typeof that.dynamicItems[viewName] === \"undefined\"){","\t\t\t\tthat.dynamicItems[viewName] = {};","\t\t\t}","\t\t\telse {","\t\t\t\tvar item;","\t\t","\t\t\t\tfor (item in that.dynamicItems[viewName]) {","\t\t\t\t\tthat.dynamicItems[viewName][item].destroy();","\t\t\t\t}","\t\t\t}\t","\t\t});","\t},","\t","\t _determineDateRangeForThroughput: function(){","        this.curr_End_Date = new Date();","        ","        //Determine a date 30 days prior to current date.","        var tmp_Curr_Date = new Date();","        tmp_Curr_Date.setDate(tmp_Curr_Date.getDate()-30);","        this.curr_Start_Date = tmp_Curr_Date;","        ","        this.currStartRallyDateFilter = this.curr_Start_Date.getFullYear() + '-' + (parseInt(this.curr_Start_Date.getMonth(), 10) + 1)  + '-' + this.curr_Start_Date.getDate();","        this.currEndRallyDateFilter = this.curr_End_Date.getFullYear() + '-' + (parseInt(this.curr_End_Date.getMonth(), 10) + 1)  + '-' + this.curr_End_Date.getDate();","        ","        var tmp_Prev_Date = new Date();","        tmp_Prev_Date.setDate(tmp_Prev_Date.getDate()-60);","        this.prev_Start_Date = tmp_Prev_Date;","        this.prev_End_Date = Ext.Date.add(this.curr_Start_Date, Ext.Date.DAY, -1);","        ","        this.prevStartRallyDateFilter = this.prev_Start_Date.getFullYear() + '-' + (parseInt(this.prev_Start_Date.getMonth(), 10)+1) + '-' + this.prev_Start_Date.getDate();","        this.prevEndRallyDateFilter = this.prev_End_Date.getFullYear() + '-' + (parseInt(this.prev_End_Date.getMonth(), 10)+1) + '-' + this.prev_End_Date.getDate();","        ","        this.past_Date_SixMonth = Ext.Date.add(this.curr_Start_Date, Ext.Date.MONTH, -5);","        this.pastDateSixMonthFilter = this.past_Date_SixMonth.getFullYear() + '-' + (parseInt(this.past_Date_SixMonth.getMonth(), 10)+1) + '-' + this.past_Date_SixMonth.getDate();","    }, ","    ","     _createDataStoreForThroughput: function(){","        //Determine the data filter for store.","        this.filter = Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '>=',","\t\t\tvalue: this.pastDateSixMonthFilter","\t\t}).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '<=',","\t\t\tvalue: this.currEndRallyDateFilter","\t\t})).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'c_KanbanState',","\t\t\toperator: '=',","\t\t\tvalue: 'Accepted'","\t\t}));","\t\t","\t\t//Record all columns that needs to be fetched.","\t\tthis.fetchDataColumns = ['FormattedID', 'Name', 'AcceptedDate', 'InProgressDate', 'Tags', 'Owner', 'c_KanbanState'];","\t\t","\t\t//configure the data store context.","\t\tthis.contextConfig = {","            workspace: this.getContext().getWorkspace()._Ref,","            project: this.getContext().getProject()._ref,","            projectScopeUp: false,","            projectScopeDown: true,","            limit: 'infinity'","        };","\t   ","\t   //set the sorter config for data store.","\t   this.sorterConfig = [{","                        \tproperty: 'AcceptedDate',","                        \tdirection: 'ASC'","                        },","                        {","                            property: 'FormattedID',","                            direction: 'ASC'","                        }];","                        ","\t\tthis._createUserStoryDataStore();","    },","    ","    _createUserStoryDataStore: function(){","\t    var myUserStoryStore = Ext.create('Rally.data.wsapi.Store', {","\t        model: 'HierarchicalRequirement',","\t        fetch: this.fetchDataColumns,","\t        autoLoad: true,","\t        context: this.contextConfig,","\t        filters: this.filter,","\t        sorters: this.sorterConfig,","\t        listeners: {","\t            load: function(store, data, success){","\t            \tthis.currUserStoriesColl = [];","\t                this.prevUserStoriesColl = [];","\t                this.pastRangeUserStoriesColl = [];","\t                var that = this;","\t               ","\t                Ext.Array.each(data, function(userStory) {","\t                    if(userStory && userStory.get('AcceptedDate')){","\t                    \tif(userStory.get('AcceptedDate') >= that.curr_Start_Date){","\t                            that.currUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }if(userStory.get('AcceptedDate') < that.curr_Start_Date && userStory.get('AcceptedDate') >= that.prev_Start_Date){","\t                            that.prevUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }","\t                        that.pastRangeUserStoriesColl.push(that._createThroghputData(userStory));","\t                    }","\t                });","\t                ","\t                this._createDefectStore();","\t            },","\t            scope: this","\t        }","\t  });","\t},","\t","\t_createThroghputData: function(rallyObject){","\t    var cycleTime = 0;","\t    var cycleTimeCat = \"N/A\";","\t    //Determine the cycle time for each object.","\t    if(rallyObject.get('AcceptedDate') && rallyObject.get('InProgressDate')){","\t        cycleTime = Rally.util.DateTime.getDifference(rallyObject.get('AcceptedDate'), rallyObject.get('InProgressDate'), 'day');","\t    }","\t    ","\t    for(var i =0; i<this.cycleTimeCategoryNames.length; i++){","\t        var lowerRange = i*this.cycleTimeDistRange, upperRange = lowerRange + 5;","\t        ","\t        if((cycleTime >lowerRange && cycleTime <= upperRange) || (lowerRange === 30 && cycleTime > lowerRange))","\t            cycleTimeCat = this.cycleTimeCategoryNames[i];","\t    }","\t    ","\t    //Generate the node for throghput data.","\t    var data = Ext.create('ThroughputDataModel', {","\t        FormattedID: rallyObject.get('FormattedID'), ","\t        Name: rallyObject.get('Name'), ","\t        AcceptedDate: rallyObject.get('AcceptedDate'), ","\t        InProgressDate: rallyObject.get('InProgressDate'), ","\t        Tags: rallyObject.get('Tags'), ","\t        Owner: rallyObject.get('Owner'),","\t        CycleTime: cycleTime,","\t        CycleTimeCategory: cycleTimeCat","\t    });","\t    ","\t    return data;","\t},","\t","\t_createDefectStore: function(){","\t    var that = this;","\t    var myDefectStore = Ext.create('Rally.data.wsapi.Store', {","            model: 'Defect',","            fetch: this.fetchDataColumns,","            autoLoad: true,","            context: this.contextConfig,","            filters: this.filter,","            sorters: this.sorterConfig,","            listeners: {","                load: function(store, data, success){","                    Ext.Array.each(data, function(defect){","                        if(defect && defect.get('AcceptedDate')){","                        \tif(defect.get('AcceptedDate') >= that.curr_Start_Date){","                            \tthat._insertRecordInOrder(that.currUserStoriesColl, that._createThroghputData(defect));","                            }if(defect.get('AcceptedDate') < that.curr_Start_Date && defect.get('AcceptedDate') >= that.prev_Start_Date){","                                that._insertRecordInOrder(that.prevUserStoriesColl, that._createThroghputData(defect));","                            }","                            that._insertRecordInOrder(that.pastRangeUserStoriesColl, that._createThroghputData(defect));","                        }","                           ","                    });","                    ","                   this.currThroughputValue = this.currUserStoriesColl.length;","\t               this.prevThroughputValue = this.prevUserStoriesColl.length;","\t                ","\t               this.currThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.currUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.prevThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.prevUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.pastRangeThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        model: 'ThroughputDataModel',","                        data: this.pastRangeUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this._createThroghputMessagePanel();","                },","                scope: this","            }","\t  });","\t},","\t","\t_insertRecordInOrder: function(dataColl, record){","\t\tvar closestRecord = record;","\t\tvar recordDate = record.get(\"AcceptedDate\");","\t\t","\t\tExt.Array.each(dataColl, function(data) {","\t\t    var dataDate = data.get(\"AcceptedDate\");","\t\t    if(dataDate && recordDate && dataDate.getMonth() === recordDate.getMonth()){","\t\t    \tif(dataDate <= recordDate)","\t\t    \t\tclosestRecord = data;","\t\t    }","\t\t});","\t\t","\t\tvar dataIndex = dataColl.indexOf(closestRecord);","\t\tif(dataIndex != -1){","\t\t\tdataColl.splice(dataIndex, 0, record);","\t\t}","\t\telse{","\t\t\tdataColl.push(record);","\t\t}","\t},","    ","    _createThroghputMessagePanel: function(){","    \t","    \tthis._configureCycleTimeMetricsContainer('panel1', 'CycleTime', 'cycleTimeContainer', 'throughputCycleTimeReport', true);","    \t","\t    this._configureThroughputMetricsContainer('panel2', 'Throughput', 'throughputContainer', 'throughputCycleTimeReport', true);","\t    ","     //   this.currWipLimitMessage = '<div>Work In Progress To be implemented</div>';","\t    // this.preWipLimitMessage = '<div>The Avg. CycleTime for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b> TBI </b></div>';","     //   var wipLimitContainer = this._createMetricsContainer('wipLimit', this.currThroughputMessage, this.prevThroughputMessage);","     //   var pastRangeWipLimitGridTitle = 'View Wip Limit Data';","\t    // var pastRangeWipLimitDataGrid = this._createThroughputDataGrid(pastRangeWipLimitGridTitle, this.pastRangeThroughputDataStore, 'wipLimitGrid');","     //   this._configureMetricsContainer('panel3', 'WIP Limit', wipLimitContainer, 'wipContainer', 'WipLimitSLAReport', pastRangeWipLimitDataGrid, false);","        ","     //   this.currCycleTimeMessage = '<div>The Avg. CycleTime for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b> TBI </b></div>';","\t    // this.prevCycleTimeMessage = '<div>The Avg. CycleTime for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b> TBI </b></div>';","     //   var slaLimitContainer = this._createMetricsContainer('slaLimit', this.currThroughputMessage, this.prevThroughputMessage);","     //   var pastRangeSLALimitGridTitle = 'View SLA Limit Data';","\t    // var pastRangeSLALimitDataGrid = this._createThroughputDataGrid(pastRangeSLALimitGridTitle, this.pastRangeThroughputDataStore, 'slaLimitGrid');","     //   this._configureMetricsContainer('panel4', 'SLA Limit', slaLimitContainer, 'slaContainer', 'WipLimitSLAReport', pastRangeSLALimitDataGrid, false);","\t},","\t","\t_createThroughputDataGrid: function(title, dataStore, gridId){","\t\tconsole.log('Data Grid creation................');","\t\t","\t    var grid = Ext.create('Rally.ui.grid.Grid', {","\t    \tid: gridId,","\t        title: title,","            store: dataStore,","            bodyBorder: true,","            columnCfgs: [","                {","                   text: 'Formatted ID', dataIndex: 'FormattedID', width: 100","                },","                {","                    text: 'Name', dataIndex: 'Name', width: 500","                },","                {","                    text: 'Accepted Date', dataIndex: 'AcceptedDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'InProgress Date', dataIndex: 'InProgressDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'Owner', dataIndex: 'Owner', flex: 1, emptyCellText: 'No Owner',","                    renderer: function(value){","                        if(value && value._refObjectName)","                            return value._refObjectName;","                    }","                },","                {","                    text: 'Tags', dataIndex: 'Tags', flex: 1, emptyCellText: 'No Tags',","                    renderer: function(value){","                        if(value && value.Name)","                            return value.Name;","                    }","                },","                {","                    text: 'CycleTime', dataIndex: 'CycleTime', flex: 1","                },","                {","                    text: 'CycleTime Category', dataIndex: 'CycleTimeCategory', flex: 1","                },","             ]","        });","        ","        return grid;","\t},","\t","\t_createMetricsContainer: function(containerId, currThroughputMessage, prevThroughputMessage){","\t\tconsole.log('creating metrics container.......');","\t\t","\t\tvar myContainer = Ext.create('Ext.container.Container', {","         \tid: containerId,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 15","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currThroughputMessage","            },","            {","                xtype: 'label',","                html: prevThroughputMessage","            }]","        });","        ","        return myContainer;","\t},","\t","\t_configureMetricsContainer: function(panelId, titleName, throughtputContainer, containerId, reportId, pastRangeDataGrid, hasGraph){","\t\tconsole.log('start configuring the metrics container.......... for ' + containerId);","\t\tvar widthValue = hasGraph? 850 : 600;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tconsole.log('creating info panel to load message container and grid. for ' + containerId);","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 300,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 15","            },","            items: [throughtputContainer, pastRangeDataGrid]","        });","        ","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_configureCycleTimeMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){","\t\t//1. Create the message panel container for showing the cumulative data.","\t\tthis.currCycleTimeMessage = '<div>The Avg. CycleTime for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b> TBI </b></div>';","\t    this.prevCycleTimeMessage = '<div>The Avg. CycleTime for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b> TBI </b></div>';","\t\tvar cycleTimeContainer = this._createMetricsContainer('Cycle Time', this.currCycleTimeMessage, this.prevCycleTimeMessage);","\t\t","\t\t","\t\t//2. Create the throughput graph.","\t\tthis._processCycleTimeDataForGraph();","\t\tvar cycleTimeGraphContainer = this.cycleTimePieOrBarGraphChart;","\t\t","\t\t//3. cretae the throuput data grid.","\t\t// var pastRangeThroghtputGridTitle = 'View Throughput Data';","\t \t// var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore, 'throughputGrid');","\t\t","\t\t//4. cretae the infopanel to add all the above components.","\t\tvar widthValue = 600;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 550,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 15","            },","            items: [cycleTimeContainer, cycleTimeGraphContainer]","        });","\t\t","\t\t//5. add the nfopanel to the appropriate app container.","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_processCycleTimeDataForGraph: function(){","\t\tvar that = this;","\t\t","\t   this.pieData = {","\t   \ttotalCount: 0, ","\t   \tmonths: {},","\t   \tmonthCount: 0,","\t   \tcategories: []","\t   };","\t\t","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t\tthat._buildCycleTimeChartData(record);","\t\t});","\t\t","\t\tthis._initAndDrawCycleTimeCharts(this.pieData);","\t},","\t","\t_buildCycleTimeChartData: function(record){","\t\tvar pieData = this.pieData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTime = record.get(\"CycleTime\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    if(typeof pieData.months[recMonthNameCat] === \"undefined\"){","\t        pieData.months[recMonthNameCat] = {count: 0, avgCycleTime: 0, totalCycleTime: 0, cycletimes: []};","\t        pieData.categories.push(recMonthNameCat);","\t        ","\t        pieData.monthCount++;","\t    }","\t    ","\t    pieData.months[recMonthNameCat].cycletimes.push(recCycleTime);","\t    pieData.months[recMonthNameCat].count++;","\t    pieData.months[recMonthNameCat].totalCycleTime = pieData.months[recMonthNameCat].totalCycleTime + recCycleTime;","\t    pieData.months[recMonthNameCat].avgCycleTime = Math.ceil(pieData.months[recMonthNameCat].totalCycleTime/ pieData.months[recMonthNameCat].count);","\t    pieData.totalCount++;","\t   ","\t   this.pieData = pieData;","\t},","","\t_initAndDrawCycleTimeCharts: function(pieData) {\t\t\t\t","\t\tvar cycleTimeData = [], sizeData = [], categories = [];","\t\t\t\t\t","\t\tif (pieData.totalCount === 0) {","\t\t\treturn;","\t\t}","\t\t","\t\tfor (month in pieData.months){","\t\t\tcycleTimeData.push([month, pieData.months[month].avgCycleTime]);","\t\t\tsizeData.push([month, pieData.months[month].count]);","\t\t\tcategories.push(month);","\t\t}","\t\t","\t\tvar cycleTimeHorBarGraph = this._drawCycleTimeHorizontalBarChart(categories, cycleTimeData);","\t\tthis._createCycleTimeBarGraphContainer(cycleTimeHorBarGraph);","\t\t","\t\t// var cycleTimePie = this._drawPie('cycleTimePie', 'Cycle Time', 'Monthwise Avg. Cycle Time', cycleTimeData, pieData);","\t\t// var bySizePie = this._drawPie('bySizePie', 'Count', 'Monthwise Count', sizeData, pieData);\t","\t\t// this._createCycleTimePieContainer(cycleTimePie, bySizePie);","\t},","\t","\t_createCycleTimeBarGraphContainer: function(barGraph){","\t\t","\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultPieChartContainer', ","\t\t\t    id: 'defaultPieChartContainer',","\t            layout: {","\t                type: 'hbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [barGraph]","\t        });","\t},","\t","\t//Note: Need to refactor to re-use the same methord for Pie or Bar graph.","\t_createCycleTimePieContainer: function(cycleTimePie, bySizePie){","\t\t","\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultPieChartContainer', ","\t\t\t    id: 'defaultPieChartContainer',","\t            layout: {","\t                type: 'hbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [cycleTimePie, bySizePie]","\t        });","\t},","\t","\t/* Configures and displays a horizontal bar chart */","\t_drawCycleTimeHorizontalBarChart: function(categories, leadTimeData) {\t","\t\tvar conf = {","\t\t\tid: 'horizontalBars',","\t\t\tseries: [{name: 'Cycle Time', data: leadTimeData}],\t","\t\t\tchartType: 'bar',","\t\t\tchartTitle: 'UserStory Cycle Time',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Days',","\t\t\t_formatLabelsAppendix: ' days',","\t\t\tplotOptions: {","                bar: {","                    dataLabels: {","                        enabled: this.getSetting('showDataLabels')","                    }","                }","            }","\t\t};\t\t\t\t\t\t\t\t\t\t","\t\t","\t\treturn this._drawCycleTimeBarChart(conf);","\t},","\t","\t/* Draws and displays the bar chart */","\t_drawCycleTimeBarChart: function (conf) {\t\t\t\t\t","\t\t","\t\tvar chart = {","\t\t\txtype: 'rallychart',","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\twidth: 550,","\t\t\tchartData: {","\t\t\t\tseries: conf.series\t\t\t\t\t\t\t\t","\t\t\t},","\t\t\tchartColors: ['#FF3333', '#00CC00'],\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tchart: {","\t\t\t\t\tplotBackgroundColor: null,","\t\t\t\t\tplotBorderWidth: null,","\t\t\t\t\tplotShadow: false,","\t\t\t\t\ttype: conf.chartType\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {\t\t\t\t\t\t\t\t\t","\t\t\t\t\talign: 'right',","\t\t\t\t\tverticalAlign: 'top',","\t\t\t\t\tx: 0,","\t\t\t\t\ty: 100,\t\t\t\t\t\t\t\t\t","\t\t\t\t\tlayout: 'vertical'","\t\t\t\t},","\t\t\t\ttitle: {","\t\t\t\t\ttext: conf.chartTitle","\t\t\t\t},","\t\t\t\ttooltip: {","\t\t\t\t\t_formatLabels: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name +'</b><br/>'+","\t\t\t\t\t\tthis.x +': '+ this.y + conf._formatLabelsAppendix;","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{","\t\t\t\t\ttitle: {text: conf.yAxisTitle}","\t\t\t\t}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}],","\t\t\t\tplotOptions: conf.plotOptions","\t\t\t}","\t\t};","\t\t","\t\treturn chart;\t","\t},","\t","\t/* Configures and displays a pie chart*/","\t_drawPie: function (id, name, text, data, extraData) {\t","\t\t","\t\tvar chart = {","\t\t\txtype: 'rallychart',","\t\t\tid: id,","\t\t\theight: 400,","\t\t\twidth: 400,\t","\t\t\tstyle: {float: 'left'},","\t\t\tchartData: {","\t\t\t\tseries: [{","\t\t\t\t\ttype: 'pie',","\t\t\t\t\tname: name,","\t\t\t\t\tdata: data","\t\t\t\t}]","\t\t\t},","\t\t\tchartConfig: {\t\t\t\t\t\t\t","\t\t\t\tchart: {","\t\t\t\t\tplotBackgroundColor: null,","\t\t\t\t\tplotBorderWidth: null,","\t\t\t\t\tplotShadow: false,","\t\t\t\t\ttype: 'pie'","\t\t\t\t},","\t\t\t\txAxis: {},//must specify empty x-axis due to bug","\t\t\t\ttitle: {","\t\t\t\t\ttext: text","\t\t\t\t},","\t\t\t\ttooltip: {","\t\t\t\t\tpointFormat: '{series.name}: <b>{point.y}</b>',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\tpercentageDecimals: 1,","\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\treturn _formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t},","\t\t\t\tplotOptions: {","\t\t\t\t\tpie: {","\t\t\t\t\t\tallowPointSelect: true,","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tdataLabels: {","\t\t\t\t\t\t\tenabled: true,","\t\t\t\t\t\t\tcolor: '#000000',","\t\t\t\t\t\t\tconnectorColor: '#000000',\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\treturn Rally.getApp()._formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t};","\t\t\t\t\t","\t\treturn chart;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t},","\t","\t/* formats lables for charts */","\t_formatLabels: function(id, that, extraData) {","\t\tswitch (id) {","\t\t\tcase 'cycleTimePie':\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\treturn '<b>' + that.point.name +'</b><br/>AVG Cycle Time: '+ that.y;","\t\t\tcase 'bySizePie' :","\t\t\t\treturn '<b>'+ that.point.name +'</b><br/>Count: '+ that.y; ","\t\t}\t\t\t\t","\t},","\t","\t_configureThroughputMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){","\t\t","\t\t//1. Create the message panel container for showing the cumulative data.","\t\tthis.currThroughputMessage = '<div>The Throughput for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b>' + this.currThroughputValue + '</b></div>';","\t    this.prevThroughputMessage = '<div>The Throughput for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b>' + this.prevThroughputValue + '</b></div>';","\t\tvar throughtputContainer = this._createMetricsContainer('throughput', this.currThroughputMessage, this.prevThroughputMessage);","\t\t","\t\t","\t\t//2. Create the throughput graph.","\t\tthis._processThroughputDataForGraph();","\t\tvar throughtputGraphContainer = this._createThroughputGraphContainer(this.throughputChart);","\t\t","\t\t//3. cretae the throuput data grid.","\t\tvar pastRangeThroghtputGridTitle = 'View Throughput Data';","\t    var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore, 'throughputGrid');","\t\t","\t\t//4. cretae the infopanel to add all the above components.","\t\tvar widthValue = hasGraph? 850 : 600;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 550,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 15","            },","            items: [throughtputContainer, throughtputGraphContainer]","        });","\t\t","\t\t//5. add the nfopanel to the appropriate app container.","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_createThroughputGraphContainer: function(throughputChart){","\t\t","\t\tvar graphContainer = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultChartContainer', ","\t\t\t    id: 'defaultChartContainer',","\t            layout: {","\t                type: 'vbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [throughputChart]","\t        });","\t     ","\t    return graphContainer;","\t},","\t","\t_processThroughputDataForGraph: function(){","\t    var that = this;","\t\tthis.groupedSeries = [];","\t\t","\t\t//initialize the groupseries","\t    Ext.Array.each(that.cycleTimeCategoryNames, function(catName) {","\t        that.groupedSeries.push({name: catName, data:[], stack: 'qSizes'});","\t    });","\t    ","\t    that.groupedSeries.push({name: 'N/A', data: [], stack: 'qSizes'});","\t    ","\t    this.chartData = {","\t\t\ttotalCount: 0,","\t\t\tmonths: {},","\t\t\tmonthCount: 0,","\t\t\tcategories: []","\t\t};\t","\t\t","\t\t    ","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t    that._buildThroughputChartData(record);","\t\t});","\t\t","\t\tthis._initAndDrawThroughputCharts(this.chartData);","\t},","\t","\t_buildThroughputChartData: function(record){","\t    var chartData = this.chartData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTimeCat = record.get(\"CycleTimeCategory\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    console.log(\"spite out accepted Month Number: \", recAcceptedDate.getMonth());","\t    ","\t    if(typeof chartData.months[recMonthNameCat] === \"undefined\"){","\t        chartData.months[recMonthNameCat] = {count: 0, monthNum: 0, cycletimes: {}, userStories: []};","\t        chartData.categories.push(recMonthNameCat);","\t        ","\t        for(var i=0; i<this.groupedSeries.length; ++i){","\t            this.groupedSeries[i].data.push(0); //add 0 for each month","\t        }","\t        ","\t        chartData.monthCount++;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].userStories.push(record);","\t    if(typeof chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] === 'undefined'){","\t        chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] =0;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat]++;","\t    chartData.months[recMonthNameCat].count++;","\t    chartData.totalCount++;","\t  ","\t    for(var s=0; s<this.groupedSeries.length; ++s){","\t        if(recCycleTimeCat === this.groupedSeries[s].name){","\t            this.groupedSeries[s].data[(chartData.monthCount -1)] = chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat];","\t        }","\t    }","\t   ","\t   this.chartData = chartData;","\t},","\t","\t//pre init for the charts ","\t_initAndDrawThroughputCharts: function(inputData) {\t\t\t\t\t\t\t\t\t\t\t\t","\t\tif (inputData.totalCount === 0) {","\t\t\treturn;","\t\t}\t\t\t\t\t\t","\t\t\t\t\t","\t\tvar throughput = [], i, qCount = 0, currTotalCount = 0, avgTotals = [], monthAVGs = [];","\t\t\t\t\t\t","\t\tfor (i in inputData.months) {\t\t\t","\t\t\tthroughput.push(inputData.months[i].count);","\t\t\tcurrTotalCount += inputData.months[i].count;","\t\t\tqCount++;","\t\t\t\t\t","\t\t\tavgTotals.push(Math.round(currTotalCount / qCount, 2));","\t\t}","\t\t\t\t\t","\t\tfor (i = 0; i < inputData.monthCount; ++i) {","\t\t\tmonthAVGs.push(Math.round(inputData.totalCount / inputData.monthCount, 2));","\t\t}","\t","\t\t//Finalize series","\t\tthis.groupedSeries.unshift({name: 'Throughput', data: throughput});","\t\tthis.groupedSeries.push({type: 'spline',name: 'Moving Average', data: avgTotals, color: 'blue', marker: {lineWidth: 1, fillColor: 'red'}});\t\t\t\t","\t\tthis.groupedSeries.push({type: 'spline',name: 'Average / Month', data: monthAVGs, color: 'purple', marker: {lineWidth: 1, fillColor: 'red'}});","\t\tthis.groupedSeries.push({name: 'Total UserStories: ' + inputData.totalCount, color: '#fff', stack:'blank'});","\t\t\t\t","\t\tthis._drawThroughputVerticalBarChart(inputData.categories, this.groupedSeries);\t\t\t","\t},","\t","\t// Configures and displays a horizontal bar chart","\t_drawThroughputVerticalBarChart: function(categories, data) {\t","\t\tvar conf = {","\t\t\tid: 'verticalBars',","\t\t\ttargetContainer: '#defaultChartContainer',","\t\t\tseries: data,\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'Throughput by Months',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Count'\t\t\t\t\t\t\t\t\t\t\t\t","\t\t};\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t","\t\tthis._drawThroughputBarChart(conf);","\t},\t\t\t\t\t\t\t\t","\t","\t//Draws and displays the bar chart ","\t_drawThroughputBarChart: function (conf) {\t\t\t\t\t","\t\tthis.throughputChart = Ext.create('Rally.ui.chart.Chart',{","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\tchartData: {series: conf.series},\t\t\t\t\t\t\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tplotOptions: {","\t\t\t\t\tcolumn: {","\t\t\t\t\t\tstacking: 'normal', ","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tpoint: {","\t\t\t\t\t\t\tevents: {","\t\t\t\t\t\t\t\tclick: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t//Need to implement","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}\t\t\t\t\t\t\t\t\t","\t\t\t\t},","\t\t\t\tchart: {plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false, type: conf.chartType},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {align: 'right', verticalAlign: 'top', x: 0, y: 100,layout: 'vertical'},","\t\t\t\ttitle: {text: conf.chartTitle},","\t\t\t\ttooltip: {","\t\t\t\t\tformatter: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name + ' | ' + this.x + '</b><br/>'+","\t\t\t\t\t\t\t'<b>'+ this.y + '</b> User Stories<br/><i>(Click to view User Stories)</i>';","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{title: {text: conf.yAxisTitle}}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}]","\t\t\t}","\t\t});","\t}\t\t\t","\t","});"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":889,"column":3},"action":"remove","lines":["var types = Ext.data.Types; // allow shorthand type access","Ext.define('ThroughputDataModel', {","\textend: 'Ext.data.Model',","\tfields: [","                {name: 'FormattedID', mapping: 'FormattedID', type: types.STRING},","                {name: 'Name', mapping: 'Name', type: types.STRING},","                {name: 'AcceptedDate', mapping: 'AcceptedDate', type: types.DATE },","                {name: 'InProgressDate', mapping: 'InProgressDate', type: types.DATE },","                {name: 'Tags', mapping: 'Tags', type: types.STRING},","                {name: 'Owner', mapping: 'Owner', type: types.OBJECT},","                {name: 'CycleTime', mapping: 'CycleTime', type: types.FLOAT},","                {name: 'CycleTimeCategory', mapping: 'CycleTimeCategory', type: types.STRING}","            ]","});","","Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    items:[","    \t{xtype: 'container', itemId: 'throughputCycleTimeReport', id: 'throughputCycleTimeReport', ","            items: [\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t{xtype: 'container', itemId: 'throughputContainer', id: 'throughputContainer', title: 'Throughput'},","\t\t\t\t{xtype: 'container', itemId: 'cycleTimeContainer', id: 'cycleTimeContainer', title: 'Cycle-Time'}","\t\t\t],","\t\t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:10","\t\t    }","\t\t},\t","    \t{xtype: 'container', itemId: 'WipLimitSLAReport', id: 'WipLimitSLAReport', ","            items: [\t\t","            \t{xtype: 'container', itemId: 'wipContainer', id: 'wipContainer', title: 'WIP Limit'},","\t\t\t\t{xtype: 'container', itemId: 'slaContainer', id: 'slaContainer', title: 'SLA Counter'}","\t\t\t],","    \t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:10","\t\t    }","    \t}","\t],","\t","    layout:{","        type:'vbox',","        align:'stretch',","        padding:10","    },","    ","    cycleTimeCategoryNames: [\"0-5 days\", \"6-10 days\", \"11-15 days\", \"16-20 days\", \"21-25 days\", \"26-30 days\", \"31+ days\"],","    cycleTimeDistRange: 5,","\t","    launch: function() {","    \t","    \tthis.activeViews = ['throughputCycleTimeReport','WipLimitSLAReport'];","    \tthis._init();","        this.currThroughputMessage = '<div>The Throughput for current period (between Start Date & End Date) is : <b> 10 </b></div>';","\t    this.prevThroughputMessage =  '<div>The Throughput for Previous period (between Start Date & End Date) is : <b> 10 </b></div>';","\t    ","\t    this._determineDateRangeForThroughput();","        ","        this._createDataStoreForThroughput();","    },","    ","    /* Initializes the app */","\t_init: function() {\t","\t\tvar that = this;","\t\t//dynamicItems hold created ui items, which needs to be destroyed before re-drawing","\t\tif (typeof this.dynamicItems === \"undefined\"){","\t\t\tthis.dynamicItems = {};","\t\t}","\t\t","\t\tExt.Array.each(this.activeViews, function(viewName){","\t\t\tif (typeof that.dynamicItems[viewName] === \"undefined\"){","\t\t\t\tthat.dynamicItems[viewName] = {};","\t\t\t}","\t\t\telse {","\t\t\t\tvar item;","\t\t","\t\t\t\tfor (item in that.dynamicItems[viewName]) {","\t\t\t\t\tthat.dynamicItems[viewName][item].destroy();","\t\t\t\t}","\t\t\t}\t","\t\t});","\t},","\t","\t _determineDateRangeForThroughput: function(){","        this.curr_End_Date = new Date();","        ","        //Determine a date 30 days prior to current date.","        var tmp_Curr_Date = new Date();","        tmp_Curr_Date.setDate(tmp_Curr_Date.getDate()-30);","        this.curr_Start_Date = tmp_Curr_Date;","        ","        this.currStartRallyDateFilter = this.curr_Start_Date.getFullYear() + '-' + (parseInt(this.curr_Start_Date.getMonth(), 10) + 1)  + '-' + this.curr_Start_Date.getDate();","        this.currEndRallyDateFilter = this.curr_End_Date.getFullYear() + '-' + (parseInt(this.curr_End_Date.getMonth(), 10) + 1)  + '-' + this.curr_End_Date.getDate();","        ","        var tmp_Prev_Date = new Date();","        tmp_Prev_Date.setDate(tmp_Prev_Date.getDate()-60);","        this.prev_Start_Date = tmp_Prev_Date;","        this.prev_End_Date = Ext.Date.add(this.curr_Start_Date, Ext.Date.DAY, -1);","        ","        this.prevStartRallyDateFilter = this.prev_Start_Date.getFullYear() + '-' + (parseInt(this.prev_Start_Date.getMonth(), 10)+1) + '-' + this.prev_Start_Date.getDate();","        this.prevEndRallyDateFilter = this.prev_End_Date.getFullYear() + '-' + (parseInt(this.prev_End_Date.getMonth(), 10)+1) + '-' + this.prev_End_Date.getDate();","        ","        this.past_Date_SixMonth = Ext.Date.add(this.curr_Start_Date, Ext.Date.MONTH, -5);","        this.pastDateSixMonthFilter = this.past_Date_SixMonth.getFullYear() + '-' + (parseInt(this.past_Date_SixMonth.getMonth(), 10)+1) + '-' + this.past_Date_SixMonth.getDate();","    }, ","    ","     _createDataStoreForThroughput: function(){","        //Determine the data filter for store.","        this.filter = Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '>=',","\t\t\tvalue: this.pastDateSixMonthFilter","\t\t}).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '<=',","\t\t\tvalue: this.currEndRallyDateFilter","\t\t})).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'c_KanbanState',","\t\t\toperator: '=',","\t\t\tvalue: 'Accepted'","\t\t}));","\t\t","\t\t//Record all columns that needs to be fetched.","\t\tthis.fetchDataColumns = ['FormattedID', 'Name', 'AcceptedDate', 'InProgressDate', 'Tags', 'Owner', 'c_KanbanState'];","\t\t","\t\t//configure the data store context.","\t\tthis.contextConfig = {","            workspace: this.getContext().getWorkspace()._Ref,","            project: this.getContext().getProject()._ref,","            projectScopeUp: false,","            projectScopeDown: true,","            limit: 'infinity'","        };","\t   ","\t   //set the sorter config for data store.","\t   this.sorterConfig = [{","                        \tproperty: 'AcceptedDate',","                        \tdirection: 'ASC'","                        },","                        {","                            property: 'FormattedID',","                            direction: 'ASC'","                        }];","                        ","\t\tthis._createUserStoryDataStore();","    },","    ","    _createUserStoryDataStore: function(){","\t    var myUserStoryStore = Ext.create('Rally.data.wsapi.Store', {","\t        model: 'HierarchicalRequirement',","\t        fetch: this.fetchDataColumns,","\t        autoLoad: true,","\t        context: this.contextConfig,","\t        filters: this.filter,","\t        sorters: this.sorterConfig,","\t        listeners: {","\t            load: function(store, data, success){","\t            \tthis.currUserStoriesColl = [];","\t                this.prevUserStoriesColl = [];","\t                this.pastRangeUserStoriesColl = [];","\t                var that = this;","\t               ","\t                Ext.Array.each(data, function(userStory) {","\t                    if(userStory && userStory.get('AcceptedDate')){","\t                    \tif(userStory.get('AcceptedDate') >= that.curr_Start_Date){","\t                            that.currUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }if(userStory.get('AcceptedDate') < that.curr_Start_Date && userStory.get('AcceptedDate') >= that.prev_Start_Date){","\t                            that.prevUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }","\t                        that.pastRangeUserStoriesColl.push(that._createThroghputData(userStory));","\t                    }","\t                });","\t                ","\t                this._createDefectStore();","\t            },","\t            scope: this","\t        }","\t  });","\t},","\t","\t_createThroghputData: function(rallyObject){","\t    var cycleTime = 0;","\t    var cycleTimeCat = \"N/A\";","\t    //Determine the cycle time for each object.","\t    if(rallyObject.get('AcceptedDate') && rallyObject.get('InProgressDate')){","\t        cycleTime = Rally.util.DateTime.getDifference(rallyObject.get('AcceptedDate'), rallyObject.get('InProgressDate'), 'day');","\t    }","\t    ","\t    for(var i =0; i<this.cycleTimeCategoryNames.length; i++){","\t        var lowerRange = i*this.cycleTimeDistRange, upperRange = lowerRange + 5;","\t        ","\t        if((cycleTime >lowerRange && cycleTime <= upperRange) || (lowerRange === 30 && cycleTime > lowerRange))","\t            cycleTimeCat = this.cycleTimeCategoryNames[i];","\t    }","\t    ","\t    //Generate the node for throghput data.","\t    var data = Ext.create('ThroughputDataModel', {","\t        FormattedID: rallyObject.get('FormattedID'), ","\t        Name: rallyObject.get('Name'), ","\t        AcceptedDate: rallyObject.get('AcceptedDate'), ","\t        InProgressDate: rallyObject.get('InProgressDate'), ","\t        Tags: rallyObject.get('Tags'), ","\t        Owner: rallyObject.get('Owner'),","\t        CycleTime: cycleTime,","\t        CycleTimeCategory: cycleTimeCat","\t    });","\t    ","\t    return data;","\t},","\t","\t_createDefectStore: function(){","\t    var that = this;","\t    var myDefectStore = Ext.create('Rally.data.wsapi.Store', {","            model: 'Defect',","            fetch: this.fetchDataColumns,","            autoLoad: true,","            context: this.contextConfig,","            filters: this.filter,","            sorters: this.sorterConfig,","            listeners: {","                load: function(store, data, success){","                    Ext.Array.each(data, function(defect){","                        if(defect && defect.get('AcceptedDate')){","                        \tif(defect.get('AcceptedDate') >= that.curr_Start_Date){","                            \tthat._insertRecordInOrder(that.currUserStoriesColl, that._createThroghputData(defect));","                            }if(defect.get('AcceptedDate') < that.curr_Start_Date && defect.get('AcceptedDate') >= that.prev_Start_Date){","                                that._insertRecordInOrder(that.prevUserStoriesColl, that._createThroghputData(defect));","                            }","                            that._insertRecordInOrder(that.pastRangeUserStoriesColl, that._createThroghputData(defect));","                        }","                           ","                    });","                    ","                   this.currThroughputValue = this.currUserStoriesColl.length;","\t               this.prevThroughputValue = this.prevUserStoriesColl.length;","\t                ","\t               this.currThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.currUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.prevThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.prevUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.pastRangeThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        model: 'ThroughputDataModel',","                        data: this.pastRangeUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this._createThroghputMessagePanel();","                },","                scope: this","            }","\t  });","\t},","\t","\t_insertRecordInOrder: function(dataColl, record){","\t\tvar closestRecord = record;","\t\tvar recordDate = record.get(\"AcceptedDate\");","\t\t","\t\tExt.Array.each(dataColl, function(data) {","\t\t    var dataDate = data.get(\"AcceptedDate\");","\t\t    if(dataDate && recordDate && dataDate.getMonth() === recordDate.getMonth()){","\t\t    \tif(dataDate <= recordDate)","\t\t    \t\tclosestRecord = data;","\t\t    }","\t\t});","\t\t","\t\tvar dataIndex = dataColl.indexOf(closestRecord);","\t\tif(dataIndex != -1){","\t\t\tdataColl.splice(dataIndex, 0, record);","\t\t}","\t\telse{","\t\t\tdataColl.push(record);","\t\t}","\t},","    ","    _createThroghputMessagePanel: function(){","    \t","    \tthis._configureCycleTimeMetricsContainer('panel1', 'CycleTime', 'cycleTimeContainer', 'throughputCycleTimeReport', true);","    \t","\t    this._configureThroughputMetricsContainer('panel2', 'Throughput', 'throughputContainer', 'throughputCycleTimeReport', true);","\t    ","     //   this.currWipLimitMessage = '<div>Work In Progress To be implemented</div>';","\t    // this.preWipLimitMessage = '<div>The Avg. CycleTime for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b> TBI </b></div>';","     //   var wipLimitContainer = this._createMetricsContainer('wipLimit', this.currThroughputMessage, this.prevThroughputMessage);","     //   var pastRangeWipLimitGridTitle = 'View Wip Limit Data';","\t    // var pastRangeWipLimitDataGrid = this._createThroughputDataGrid(pastRangeWipLimitGridTitle, this.pastRangeThroughputDataStore, 'wipLimitGrid');","     //   this._configureMetricsContainer('panel3', 'WIP Limit', wipLimitContainer, 'wipContainer', 'WipLimitSLAReport', pastRangeWipLimitDataGrid, false);","        ","     //   this.currCycleTimeMessage = '<div>The Avg. CycleTime for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b> TBI </b></div>';","\t    // this.prevCycleTimeMessage = '<div>The Avg. CycleTime for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b> TBI </b></div>';","     //   var slaLimitContainer = this._createMetricsContainer('slaLimit', this.currThroughputMessage, this.prevThroughputMessage);","     //   var pastRangeSLALimitGridTitle = 'View SLA Limit Data';","\t    // var pastRangeSLALimitDataGrid = this._createThroughputDataGrid(pastRangeSLALimitGridTitle, this.pastRangeThroughputDataStore, 'slaLimitGrid');","     //   this._configureMetricsContainer('panel4', 'SLA Limit', slaLimitContainer, 'slaContainer', 'WipLimitSLAReport', pastRangeSLALimitDataGrid, false);","\t},","\t","\t_createThroughputDataGrid: function(title, dataStore, gridId){","\t\tconsole.log('Data Grid creation................');","\t\t","\t    var grid = Ext.create('Rally.ui.grid.Grid', {","\t    \tid: gridId,","\t        title: title,","            store: dataStore,","            bodyBorder: true,","            columnCfgs: [","                {","                   text: 'Formatted ID', dataIndex: 'FormattedID', width: 100","                },","                {","                    text: 'Name', dataIndex: 'Name', width: 500","                },","                {","                    text: 'Accepted Date', dataIndex: 'AcceptedDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'InProgress Date', dataIndex: 'InProgressDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'Owner', dataIndex: 'Owner', flex: 1, emptyCellText: 'No Owner',","                    renderer: function(value){","                        if(value && value._refObjectName)","                            return value._refObjectName;","                    }","                },","                {","                    text: 'Tags', dataIndex: 'Tags', flex: 1, emptyCellText: 'No Tags',","                    renderer: function(value){","                        if(value && value.Name)","                            return value.Name;","                    }","                },","                {","                    text: 'CycleTime', dataIndex: 'CycleTime', flex: 1","                },","                {","                    text: 'CycleTime Category', dataIndex: 'CycleTimeCategory', flex: 1","                },","             ]","        });","        ","        return grid;","\t},","\t","\t_createMetricsContainer: function(containerId, currThroughputMessage, prevThroughputMessage){","\t\tconsole.log('creating metrics container.......');","\t\t","\t\tvar myContainer = Ext.create('Ext.container.Container', {","         \tid: containerId,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 15","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currThroughputMessage","            },","            {","                xtype: 'label',","                html: prevThroughputMessage","            }]","        });","        ","        return myContainer;","\t},","\t","\t_configureMetricsContainer: function(panelId, titleName, throughtputContainer, containerId, reportId, pastRangeDataGrid, hasGraph){","\t\tconsole.log('start configuring the metrics container.......... for ' + containerId);","\t\tvar widthValue = hasGraph? 850 : 600;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tconsole.log('creating info panel to load message container and grid. for ' + containerId);","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 300,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 15","            },","            items: [throughtputContainer, pastRangeDataGrid]","        });","        ","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_configureCycleTimeMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){","\t\t//1. Create the message panel container for showing the cumulative data.","\t\tthis.currCycleTimeMessage = '<div>The Avg. CycleTime for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b> TBI </b></div>';","\t    this.prevCycleTimeMessage = '<div>The Avg. CycleTime for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b> TBI </b></div>';","\t\tvar cycleTimeContainer = this._createMetricsContainer('Cycle Time', this.currCycleTimeMessage, this.prevCycleTimeMessage);","\t\t","\t\t","\t\t//2. Create the throughput graph.","\t\tthis._processCycleTimeDataForGraph();","\t\tvar cycleTimeGraphContainer = this.cycleTimePieOrBarGraphChart;","\t\t","\t\t//3. cretae the throuput data grid.","\t\t// var pastRangeThroghtputGridTitle = 'View Throughput Data';","\t \t// var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore, 'throughputGrid');","\t\t","\t\t//4. cretae the infopanel to add all the above components.","\t\tvar widthValue = 600;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 550,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 15","            },","            items: [cycleTimeContainer, cycleTimeGraphContainer]","        });","\t\t","\t\t//5. add the nfopanel to the appropriate app container.","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_processCycleTimeDataForGraph: function(){","\t\tvar that = this;","\t\t","\t   this.pieData = {","\t   \ttotalCount: 0, ","\t   \tmonths: {},","\t   \tmonthCount: 0,","\t   \tcategories: []","\t   };","\t\t","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t\tthat._buildCycleTimeChartData(record);","\t\t});","\t\t","\t\tthis._initAndDrawCycleTimeCharts(this.pieData);","\t},","\t","\t_buildCycleTimeChartData: function(record){","\t\tvar pieData = this.pieData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTime = record.get(\"CycleTime\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    if(typeof pieData.months[recMonthNameCat] === \"undefined\"){","\t        pieData.months[recMonthNameCat] = {count: 0, avgCycleTime: 0, totalCycleTime: 0, cycletimes: []};","\t        pieData.categories.push(recMonthNameCat);","\t        ","\t        pieData.monthCount++;","\t    }","\t    ","\t    pieData.months[recMonthNameCat].cycletimes.push(recCycleTime);","\t    pieData.months[recMonthNameCat].count++;","\t    pieData.months[recMonthNameCat].totalCycleTime = pieData.months[recMonthNameCat].totalCycleTime + recCycleTime;","\t    pieData.months[recMonthNameCat].avgCycleTime = Math.ceil(pieData.months[recMonthNameCat].totalCycleTime/ pieData.months[recMonthNameCat].count);","\t    pieData.totalCount++;","\t   ","\t   this.pieData = pieData;","\t},","","\t_initAndDrawCycleTimeCharts: function(pieData) {\t\t\t\t","\t\tvar cycleTimeData = [], sizeData = [], categories = [];","\t\t\t\t\t","\t\tif (pieData.totalCount === 0) {","\t\t\treturn;","\t\t}","\t\t","\t\tfor (month in pieData.months){","\t\t\tcycleTimeData.push([month, pieData.months[month].avgCycleTime]);","\t\t\tsizeData.push([month, pieData.months[month].count]);","\t\t\tcategories.push(month);","\t\t}","\t\t","\t\tvar cycleTimeHorBarGraph = this._drawCycleTimeHorizontalBarChart(categories, cycleTimeData);","\t\tthis._createCycleTimeBarGraphContainer(cycleTimeHorBarGraph);","\t\t","\t\t// var cycleTimePie = this._drawPie('cycleTimePie', 'Cycle Time', 'Monthwise Avg. Cycle Time', cycleTimeData, pieData);","\t\t// var bySizePie = this._drawPie('bySizePie', 'Count', 'Monthwise Count', sizeData, pieData);\t","\t\t// this._createCycleTimePieContainer(cycleTimePie, bySizePie);","\t},","\t","\t_createCycleTimeBarGraphContainer: function(barGraph){","\t\t","\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultPieChartContainer', ","\t\t\t    id: 'defaultPieChartContainer',","\t            layout: {","\t                type: 'hbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [barGraph]","\t        });","\t},","\t","\t//Note: Need to refactor to re-use the same methord for Pie or Bar graph.","\t_createCycleTimePieContainer: function(cycleTimePie, bySizePie){","\t\t","\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultPieChartContainer', ","\t\t\t    id: 'defaultPieChartContainer',","\t            layout: {","\t                type: 'hbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [cycleTimePie, bySizePie]","\t        });","\t},","\t","\t/* Configures and displays a horizontal bar chart */","\t_drawCycleTimeHorizontalBarChart: function(categories, leadTimeData) {\t","\t\tvar conf = {","\t\t\tid: 'horizontalBars',","\t\t\tseries: [{name: 'Cycle Time', data: leadTimeData}],\t","\t\t\tchartType: 'bar',","\t\t\tchartTitle: 'UserStory Cycle Time',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Days',","\t\t\t_formatLabelsAppendix: ' days',","\t\t\tplotOptions: {","                bar: {","                    dataLabels: {","                        enabled: this.getSetting('showDataLabels')","                    }","                }","            }","\t\t};\t\t\t\t\t\t\t\t\t\t","\t\t","\t\treturn this._drawCycleTimeBarChart(conf);","\t},","\t","\t/* Draws and displays the bar chart */","\t_drawCycleTimeBarChart: function (conf) {\t\t\t\t\t","\t\t","\t\tvar chart = {","\t\t\txtype: 'rallychart',","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\twidth: 550,","\t\t\tchartData: {","\t\t\t\tseries: conf.series\t\t\t\t\t\t\t\t","\t\t\t},","\t\t\tchartColors: ['#FF3333', '#00CC00'],\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tchart: {","\t\t\t\t\tplotBackgroundColor: null,","\t\t\t\t\tplotBorderWidth: null,","\t\t\t\t\tplotShadow: false,","\t\t\t\t\ttype: conf.chartType\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {\t\t\t\t\t\t\t\t\t","\t\t\t\t\talign: 'right',","\t\t\t\t\tverticalAlign: 'top',","\t\t\t\t\tx: 0,","\t\t\t\t\ty: 100,\t\t\t\t\t\t\t\t\t","\t\t\t\t\tlayout: 'vertical'","\t\t\t\t},","\t\t\t\ttitle: {","\t\t\t\t\ttext: conf.chartTitle","\t\t\t\t},","\t\t\t\ttooltip: {","\t\t\t\t\t_formatLabels: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name +'</b><br/>'+","\t\t\t\t\t\tthis.x +': '+ this.y + conf._formatLabelsAppendix;","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{","\t\t\t\t\ttitle: {text: conf.yAxisTitle}","\t\t\t\t}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}],","\t\t\t\tplotOptions: conf.plotOptions","\t\t\t}","\t\t};","\t\t","\t\treturn chart;\t","\t},","\t","\t/* Configures and displays a pie chart*/","\t_drawPie: function (id, name, text, data, extraData) {\t","\t\t","\t\tvar chart = {","\t\t\txtype: 'rallychart',","\t\t\tid: id,","\t\t\theight: 400,","\t\t\twidth: 400,\t","\t\t\tstyle: {float: 'left'},","\t\t\tchartData: {","\t\t\t\tseries: [{","\t\t\t\t\ttype: 'pie',","\t\t\t\t\tname: name,","\t\t\t\t\tdata: data","\t\t\t\t}]","\t\t\t},","\t\t\tchartConfig: {\t\t\t\t\t\t\t","\t\t\t\tchart: {","\t\t\t\t\tplotBackgroundColor: null,","\t\t\t\t\tplotBorderWidth: null,","\t\t\t\t\tplotShadow: false,","\t\t\t\t\ttype: 'pie'","\t\t\t\t},","\t\t\t\txAxis: {},//must specify empty x-axis due to bug","\t\t\t\ttitle: {","\t\t\t\t\ttext: text","\t\t\t\t},","\t\t\t\ttooltip: {","\t\t\t\t\tpointFormat: '{series.name}: <b>{point.y}</b>',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\tpercentageDecimals: 1,","\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\treturn _formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t},","\t\t\t\tplotOptions: {","\t\t\t\t\tpie: {","\t\t\t\t\t\tallowPointSelect: true,","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tdataLabels: {","\t\t\t\t\t\t\tenabled: true,","\t\t\t\t\t\t\tcolor: '#000000',","\t\t\t\t\t\t\tconnectorColor: '#000000',\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\treturn Rally.getApp()._formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t};","\t\t\t\t\t","\t\treturn chart;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t},","\t","\t/* formats lables for charts */","\t_formatLabels: function(id, that, extraData) {","\t\tswitch (id) {","\t\t\tcase 'cycleTimePie':\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\treturn '<b>' + that.point.name +'</b><br/>AVG Cycle Time: '+ that.y;","\t\t\tcase 'bySizePie' :","\t\t\t\treturn '<b>'+ that.point.name +'</b><br/>Count: '+ that.y; ","\t\t}\t\t\t\t","\t},","\t","\t_configureThroughputMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){","\t\t","\t\t//1. Create the message panel container for showing the cumulative data.","\t\tthis.currThroughputMessage = '<div>The Throughput for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b>' + this.currThroughputValue + '</b></div>';","\t    this.prevThroughputMessage = '<div>The Throughput for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b>' + this.prevThroughputValue + '</b></div>';","\t\tvar throughtputContainer = this._createMetricsContainer('throughput', this.currThroughputMessage, this.prevThroughputMessage);","\t\t","\t\t","\t\t//2. Create the throughput graph.","\t\tthis._processThroughputDataForGraph();","\t\tvar throughtputGraphContainer = this._createThroughputGraphContainer(this.throughputChart);","\t\t","\t\t//3. cretae the throuput data grid.","\t\tvar pastRangeThroghtputGridTitle = 'View Throughput Data';","\t    var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore, 'throughputGrid');","\t\t","\t\t//4. cretae the infopanel to add all the above components.","\t\tvar widthValue = hasGraph? 850 : 600;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 550,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 15","            },","            items: [throughtputContainer, throughtputGraphContainer]","        });","\t\t","\t\t//5. add the nfopanel to the appropriate app container.","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_createThroughputGraphContainer: function(throughputChart){","\t\t","\t\tvar graphContainer = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultChartContainer', ","\t\t\t    id: 'defaultChartContainer',","\t            layout: {","\t                type: 'vbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [throughputChart]","\t        });","\t     ","\t    return graphContainer;","\t},","\t","\t_processThroughputDataForGraph: function(){","\t    var that = this;","\t\tthis.groupedSeries = [];","\t\t","\t\t//initialize the groupseries","\t    Ext.Array.each(that.cycleTimeCategoryNames, function(catName) {","\t        that.groupedSeries.push({name: catName, data:[], stack: 'qSizes'});","\t    });","\t    ","\t    that.groupedSeries.push({name: 'N/A', data: [], stack: 'qSizes'});","\t    ","\t    this.chartData = {","\t\t\ttotalCount: 0,","\t\t\tmonths: {},","\t\t\tmonthCount: 0,","\t\t\tcategories: []","\t\t};\t","\t\t","\t\t    ","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t    that._buildThroughputChartData(record);","\t\t});","\t\t","\t\tthis._initAndDrawThroughputCharts(this.chartData);","\t},","\t","\t_buildThroughputChartData: function(record){","\t    var chartData = this.chartData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTimeCat = record.get(\"CycleTimeCategory\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    console.log(\"spite out accepted Month Number: \", recAcceptedDate.getMonth());","\t    ","\t    if(typeof chartData.months[recMonthNameCat] === \"undefined\"){","\t        chartData.months[recMonthNameCat] = {count: 0, monthNum: 0, cycletimes: {}, userStories: []};","\t        chartData.categories.push(recMonthNameCat);","\t        ","\t        for(var i=0; i<this.groupedSeries.length; ++i){","\t            this.groupedSeries[i].data.push(0); //add 0 for each month","\t        }","\t        ","\t        chartData.monthCount++;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].userStories.push(record);","\t    if(typeof chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] === 'undefined'){","\t        chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] =0;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat]++;","\t    chartData.months[recMonthNameCat].count++;","\t    chartData.totalCount++;","\t  ","\t    for(var s=0; s<this.groupedSeries.length; ++s){","\t        if(recCycleTimeCat === this.groupedSeries[s].name){","\t            this.groupedSeries[s].data[(chartData.monthCount -1)] = chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat];","\t        }","\t    }","\t   ","\t   this.chartData = chartData;","\t},","\t","\t//pre init for the charts ","\t_initAndDrawThroughputCharts: function(inputData) {\t\t\t\t\t\t\t\t\t\t\t\t","\t\tif (inputData.totalCount === 0) {","\t\t\treturn;","\t\t}\t\t\t\t\t\t","\t\t\t\t\t","\t\tvar throughput = [], i, qCount = 0, currTotalCount = 0, avgTotals = [], monthAVGs = [];","\t\t\t\t\t\t","\t\tfor (i in inputData.months) {\t\t\t","\t\t\tthroughput.push(inputData.months[i].count);","\t\t\tcurrTotalCount += inputData.months[i].count;","\t\t\tqCount++;","\t\t\t\t\t","\t\t\tavgTotals.push(Math.round(currTotalCount / qCount, 2));","\t\t}","\t\t\t\t\t","\t\tfor (i = 0; i < inputData.monthCount; ++i) {","\t\t\tmonthAVGs.push(Math.round(inputData.totalCount / inputData.monthCount, 2));","\t\t}","\t","\t\t//Finalize series","\t\tthis.groupedSeries.unshift({name: 'Throughput', data: throughput});","\t\tthis.groupedSeries.push({type: 'spline',name: 'Moving Average', data: avgTotals, color: 'blue', marker: {lineWidth: 1, fillColor: 'red'}});\t\t\t\t","\t\tthis.groupedSeries.push({type: 'spline',name: 'Average / Month', data: monthAVGs, color: 'purple', marker: {lineWidth: 1, fillColor: 'red'}});","\t\tthis.groupedSeries.push({name: 'Total UserStories: ' + inputData.totalCount, color: '#fff', stack:'blank'});","\t\t\t\t","\t\tthis._drawThroughputVerticalBarChart(inputData.categories, this.groupedSeries);\t\t\t","\t},","\t","\t// Configures and displays a horizontal bar chart","\t_drawThroughputVerticalBarChart: function(categories, data) {\t","\t\tvar conf = {","\t\t\tid: 'verticalBars',","\t\t\ttargetContainer: '#defaultChartContainer',","\t\t\tseries: data,\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'Throughput by Months',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Count'\t\t\t\t\t\t\t\t\t\t\t\t","\t\t};\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t","\t\tthis._drawThroughputBarChart(conf);","\t},\t\t\t\t\t\t\t\t","\t","\t//Draws and displays the bar chart ","\t_drawThroughputBarChart: function (conf) {\t\t\t\t\t","\t\tthis.throughputChart = Ext.create('Rally.ui.chart.Chart',{","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\tchartData: {series: conf.series},\t\t\t\t\t\t\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tplotOptions: {","\t\t\t\t\tcolumn: {","\t\t\t\t\t\tstacking: 'normal', ","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tpoint: {","\t\t\t\t\t\t\tevents: {","\t\t\t\t\t\t\t\tclick: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t//Need to implement","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}\t\t\t\t\t\t\t\t\t","\t\t\t\t},","\t\t\t\tchart: {plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false, type: conf.chartType},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {align: 'right', verticalAlign: 'top', x: 0, y: 100,layout: 'vertical'},","\t\t\t\ttitle: {text: conf.chartTitle},","\t\t\t\ttooltip: {","\t\t\t\t\tformatter: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name + ' | ' + this.x + '</b><br/>'+","\t\t\t\t\t\t\t'<b>'+ this.y + '</b> User Stories<br/><i>(Click to view User Stories)</i>';","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{title: {text: conf.yAxisTitle}}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}]","\t\t\t}","\t\t});","\t}\t\t\t","\t","});"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":1226,"column":3},"action":"insert","lines":["var types = Ext.data.Types; // allow shorthand type access","Ext.define('ThroughputDataModel', {","\textend: 'Ext.data.Model',","\tfields: [","                {name: 'FormattedID', mapping: 'FormattedID', type: types.STRING},","                {name: 'Name', mapping: 'Name', type: types.STRING},","                {name: 'AcceptedDate', mapping: 'AcceptedDate', type: types.DATE },","                {name: 'InProgressDate', mapping: 'InProgressDate', type: types.DATE },","                {name: 'Tags', mapping: 'Tags', type: types.STRING},","                {name: 'Owner', mapping: 'Owner', type: types.OBJECT},","                {name: 'CycleTime', mapping: 'CycleTime', type: types.FLOAT},","                {name: 'CycleTimeCategory', mapping: 'CycleTimeCategory', type: types.STRING}","            ]","});","","var NOW = new Date();","","Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    autoScroll: true,","    defaultTeamSLA: 10,","    getSettingsFields: function() {","        return [","            {","                name: 'teamSLA',","                fieldLabel: 'Team SLA value (days)',","                xtype: 'rallynumberfield'","            }","        ];","    },","    items:[","    \t{","            xtype: 'container', id: 'infoContainer', itemId: 'infoContainer', border: 0","        },","    \t{xtype: 'container', itemId: 'throughputCycleTimeReport', id: 'throughputCycleTimeReport', ","            items: [\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t{xtype: 'container', itemId: 'throughputContainer', id: 'throughputContainer', title: 'Throughput'},","\t\t\t\t{xtype: 'container', itemId: 'cycleTimeContainer', id: 'cycleTimeContainer', title: 'Cycle-Time'}","\t\t\t],","\t\t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:5","\t\t    }","\t\t},\t","    \t{xtype: 'container', itemId: 'WipLimitSLAReport', id: 'WipLimitSLAReport', ","            items: [\t","            \t{xtype: 'container', itemId: 'slaContainer', id: 'slaContainer', title: 'SLA Counter'},","            \t{xtype: 'container', itemId: 'wipContainer', id: 'wipContainer', title: 'WIP Limit'}","\t\t\t],","    \t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:5","\t\t    }","    \t}","\t],","\t","    layout:{","        type:'vbox',","        align:'stretch',","        padding:5","    },","    ","    cycleTimeCategoryNames: [\"0-5 days\", \"6-10 days\", \"11-15 days\", \"16-20 days\", \"21-25 days\", \"26-30 days\", \"31+ days\"],","    cycleTimeDistRange: 5,","\t","    launch: function() {","    \t","    \tthis.activeViews = ['throughputCycleTimeReport','WipLimitSLAReport'];","    \tthis._init();","        this.currThroughputMessage = '<div>The Throughput for current period (between Start Date & End Date) is : <b> 10 </b></div>';","\t    this.prevThroughputMessage =  '<div>The Throughput for Previous period (between Start Date & End Date) is : <b> 10 </b></div>';","\t    ","\t    this._determineDateRangeForKanbanMetrics();","\t    ","\t    this._initializingInfoForKanbanMetrics();","        ","        this._createDataStoreForKanbanMetrics();","    },","    ","     /* Initializes the app */","\t_init: function() {\t","\t\tvar that = this;","\t\t//dynamicItems hold created ui items, which needs to be destroyed before re-drawing","\t\tif (typeof this.dynamicItems === \"undefined\"){","\t\t\tthis.dynamicItems = {};","\t\t}","\t\t","\t\tExt.Array.each(this.activeViews, function(viewName){","\t\t\tif (typeof that.dynamicItems[viewName] === \"undefined\"){","\t\t\t\tthat.dynamicItems[viewName] = {};","\t\t\t}","\t\t\telse {","\t\t\t\tvar item;","\t\t","\t\t\t\tfor (item in that.dynamicItems[viewName]) {","\t\t\t\t\tthat.dynamicItems[viewName][item].destroy();","\t\t\t\t}","\t\t\t}\t","\t\t});","\t},","\t","\t/* ============================================================================================================================== */","\t/* This Section is entirely for determine the Kanban Metrics Datastore */","\t/* ============================================================================================================================== */","\t","\t_determineDateRangeForKanbanMetrics: function(){","        this.curr_End_Date = new Date();","        ","        //Determine a date 30 days prior to current date.","        var tmp_Curr_Date = new Date();","        tmp_Curr_Date.setDate(tmp_Curr_Date.getDate()-30);","        this.curr_Start_Date = tmp_Curr_Date;","        ","        this.currStartRallyDateFilter = this.curr_Start_Date.getFullYear() + '-' + (parseInt(this.curr_Start_Date.getMonth(), 10) + 1)  + '-' + this.curr_Start_Date.getDate();","        this.currEndRallyDateFilter = this.curr_End_Date.getFullYear() + '-' + (parseInt(this.curr_End_Date.getMonth(), 10) + 1)  + '-' + this.curr_End_Date.getDate();","        ","        var tmp_Prev_Date = new Date();","        tmp_Prev_Date.setDate(tmp_Prev_Date.getDate()-60);","        this.prev_Start_Date = tmp_Prev_Date;","        this.prev_End_Date = Ext.Date.add(this.curr_Start_Date, Ext.Date.DAY, -1);","        ","        this.prevStartRallyDateFilter = this.prev_Start_Date.getFullYear() + '-' + (parseInt(this.prev_Start_Date.getMonth(), 10)+1) + '-' + this.prev_Start_Date.getDate();","        this.prevEndRallyDateFilter = this.prev_End_Date.getFullYear() + '-' + (parseInt(this.prev_End_Date.getMonth(), 10)+1) + '-' + this.prev_End_Date.getDate();","        ","        this.past_Date_SixMonth = Ext.Date.add(this.curr_Start_Date, Ext.Date.MONTH, -5);","        this.pastDateSixMonthFilter = this.past_Date_SixMonth.getFullYear() + '-' + (parseInt(this.past_Date_SixMonth.getMonth(), 10)+1) + '-' + this.past_Date_SixMonth.getDate();","    }, ","    ","    _initializingInfoForKanbanMetrics: function(){","\t    //initiatilizing for SLA & Wip Limit","\t\tthis.info = '<div> The <i><b>Current</b></i> period is between <b>' + this.currStartRallyDateFilter + '</b> and <b>' + this.currEndRallyDateFilter + '</b>. &nbsp;&nbsp; The <i><b>Previous</b></i> period is between <b>' + this.prevStartRallyDateFilter + '</b> and <b>' + this.prevEndRallyDateFilter + '</b>.</div>';","        ","        Ext.getCmp('infoContainer').update(this.info);","    },","    ","     _createDataStoreForKanbanMetrics: function(){","        //Determine the data filter for store.","        this.filter = Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '>=',","\t\t\tvalue: this.pastDateSixMonthFilter","\t\t}).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '<=',","\t\t\tvalue: this.currEndRallyDateFilter","\t\t})).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'ScheduleState',","\t\t\toperator: '=',","\t\t\tvalue: 'Accepted'","\t\t}));","\t\t","\t\t//Record all columns that needs to be fetched.","\t\tthis.fetchDataColumns = ['FormattedID', 'Name', 'AcceptedDate', 'InProgressDate', 'Tags', 'Owner', 'c_KanbanState','ScheduleState'];","\t\t","\t\t//configure the data store context.","\t\tthis.contextConfig = {","            workspace: this.getContext().getWorkspace()._Ref,","            project: this.getContext().getProject()._ref,","            projectScopeUp: false,","            projectScopeDown: true,","            limit: 'infinity'","        };","\t   ","\t   //set the sorter config for data store.","\t   this.sorterConfig = [{","                        \tproperty: 'AcceptedDate',","                        \tdirection: 'ASC'","                        },","                        {","                            property: 'FormattedID',","                            direction: 'ASC'","                        }];","                        ","\t\tthis._createUserStoryDataStore();","    },","    ","     _createUserStoryDataStore: function(){","\t    var myUserStoryStore = Ext.create('Rally.data.wsapi.Store', {","\t        model: 'HierarchicalRequirement',","\t        fetch: this.fetchDataColumns,","\t        autoLoad: true,","\t        context: this.contextConfig,","\t        filters: this.filter,","\t        sorters: this.sorterConfig,","\t        listeners: {","\t            load: function(store, data, success){","\t            \tthis.currUserStoriesColl = [];","\t                this.prevUserStoriesColl = [];","\t                this.pastRangeUserStoriesColl = [];","\t                var that = this;","\t               ","\t                Ext.Array.each(data, function(userStory) {","\t                    if(userStory && userStory.get('AcceptedDate')){","\t                    \tif(userStory.get('AcceptedDate') >= that.curr_Start_Date){","\t                            that.currUserStoriesColl.push(that._createKanbanmetRicsData(userStory));","\t                        }if(userStory.get('AcceptedDate') < that.curr_Start_Date && userStory.get('AcceptedDate') >= that.prev_Start_Date){","\t                            that.prevUserStoriesColl.push(that._createKanbanmetRicsData(userStory));","\t                        }","\t                        that.pastRangeUserStoriesColl.push(that._createKanbanmetRicsData(userStory));","\t                    }","\t                });","\t                ","\t                this._createDefectStore();","\t            },","\t            scope: this","\t        }","\t  });","\t},","\t","\t_createKanbanmetRicsData: function(rallyObject){","\t    var cycleTime = 0;","\t    var cycleTimeCat = \"N/A\";","\t    //Determine the cycle time for each object.","\t    if(rallyObject.get('AcceptedDate') && rallyObject.get('InProgressDate')){","\t        cycleTime = Rally.util.DateTime.getDifference(rallyObject.get('AcceptedDate'), rallyObject.get('InProgressDate'), 'day');","\t    }","\t    ","\t    for(var i =0; i<this.cycleTimeCategoryNames.length; i++){","\t        var lowerRange = i*this.cycleTimeDistRange, upperRange = lowerRange + 5;","\t        ","\t        if((cycleTime >lowerRange && cycleTime <= upperRange) || (lowerRange === 30 && cycleTime > lowerRange))","\t            cycleTimeCat = this.cycleTimeCategoryNames[i];","\t    }","\t    ","\t    //Generate the node for throghput data.","\t    var data = Ext.create('ThroughputDataModel', {","\t        FormattedID: rallyObject.get('FormattedID'), ","\t        Name: rallyObject.get('Name'), ","\t        AcceptedDate: rallyObject.get('AcceptedDate'), ","\t        InProgressDate: rallyObject.get('InProgressDate'), ","\t        Tags: rallyObject.get('Tags'), ","\t        Owner: rallyObject.get('Owner'),","\t        CycleTime: cycleTime,","\t        CycleTimeCategory: cycleTimeCat","\t    });","\t    ","\t    return data;","\t},","\t","\t_createDefectStore: function(){","\t    var that = this;","\t    var myDefectStore = Ext.create('Rally.data.wsapi.Store', {","            model: 'Defect',","            fetch: this.fetchDataColumns,","            autoLoad: true,","            context: this.contextConfig,","            filters: this.filter,","            sorters: this.sorterConfig,","            listeners: {","                load: function(store, data, success){","                    Ext.Array.each(data, function(defect){","                        if(defect && defect.get('AcceptedDate')){","                        \tif(defect.get('AcceptedDate') >= that.curr_Start_Date){","                            \tthat._insertRecordInOrder(that.currUserStoriesColl, that._createKanbanmetRicsData(defect));","                            }if(defect.get('AcceptedDate') < that.curr_Start_Date && defect.get('AcceptedDate') >= that.prev_Start_Date){","                                that._insertRecordInOrder(that.prevUserStoriesColl, that._createKanbanmetRicsData(defect));","                            }","                            that._insertRecordInOrder(that.pastRangeUserStoriesColl, that._createKanbanmetRicsData(defect));","                        }","                           ","                    });","                    ","                   this.currThroughputValue = this.currUserStoriesColl.length;","\t               this.prevThroughputValue = this.prevUserStoriesColl.length;","\t                ","\t               this.currThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.currUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.prevThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.prevUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.pastRangeThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        model: 'ThroughputDataModel',","                        data: this.pastRangeUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this._createKanbanMetricsMessagePanel();","                },","                scope: this","            }","\t  });","\t},","\t","\t_insertRecordInOrder: function(dataColl, record){","\t\tvar closestRecord = record;","\t\tvar recordDate = record.get(\"AcceptedDate\");","\t\t","\t\tExt.Array.each(dataColl, function(data) {","\t\t    var dataDate = data.get(\"AcceptedDate\");","\t\t    if(dataDate && recordDate && dataDate.getMonth() === recordDate.getMonth()){","\t\t    \tif(dataDate <= recordDate)","\t\t    \t\tclosestRecord = data;","\t\t    }","\t\t});","\t\t","\t\tvar dataIndex = dataColl.indexOf(closestRecord);","\t\tif(dataIndex != -1){","\t\t\tdataColl.splice(dataIndex, 0, record);","\t\t}","\t\telse{","\t\t\tdataColl.push(record);","\t\t}","\t},","\t","\t _createKanbanMetricsMessagePanel: function(){","    \t","    \tthis._configureCycleTimeMetricsContainer('panel1', 'CycleTime', 'cycleTimeContainer', 'throughputCycleTimeReport', true);","    \t","\t    this._configureThroughputMetricsContainer('panel2', 'Throughput', 'throughputContainer', 'throughputCycleTimeReport', true);","\t    ","\t    this._createDataStoreForSLAAndWipLimit();","\t},","\t","\t/* ####################################################################################################################################################################### */","\t","\t/* ============================================================================================================================== */","\t/* This Section is entirely for Configuring CYCLETIME metrics */","\t/* ============================================================================================================================== */","\t","\t_configureCycleTimeMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){","\t\t//1. Create the message panel container for showing the cumulative data.","\t\tthis.currCycleTimeMessage = '<div style=\"text-indent: 2em;\"><b>Current</b> Avg. CycleTime is : <font size=\"3\" color=\"Black\"><b> [WIP]. </b></font></div>';","\t    this.prevCycleTimeMessage = '<div style=\"text-indent: 5em;\">Previous Avg. CycleTime is : <font size=\"2\" color=\"Black\"><b> [WIP]. </b></font></div>';","\t\tvar cycleTimeContainer = this._createMetricsContainer('Cycle Time', this.currCycleTimeMessage, this.prevCycleTimeMessage);","\t\t","\t\t","\t\t//2. Create the throughput graph.","\t\tthis._processCycleTimeDataForGraph();","\t\tvar cycleTimeGraphContainer = this.cycleTimePieOrBarGraphChart;","\t\t","\t\t//3. cretae the infopanel to add all the above components.","\t\tvar widthValue = 500;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","        \tautoScroll: true,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 500,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            items: [cycleTimeContainer, cycleTimeGraphContainer]","        });","\t\t","\t\t//5. add the nfopanel to the appropriate app container.","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_processCycleTimeDataForGraph: function(){","\t\tvar that = this;","\t\t","\t   this.pieData = {","\t   \ttotalCount: 0, ","\t   \tmonths: {},","\t   \tmonthCount: 0,","\t   \tcategories: []","\t   };","\t\t","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t\tthat._buildCycleTimeChartData(record);","\t\t});","\t\t","\t\tthis._initAndDrawCycleTimeCharts(this.pieData);","\t},","\t","\t_buildCycleTimeChartData: function(record){","\t\tvar pieData = this.pieData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTime = record.get(\"CycleTime\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    if(typeof pieData.months[recMonthNameCat] === \"undefined\"){","\t        pieData.months[recMonthNameCat] = {count: 0, avgCycleTime: 0, totalCycleTime: 0, cycletimes: []};","\t        pieData.categories.push(recMonthNameCat);","\t        ","\t        pieData.monthCount++;","\t    }","\t    ","\t    pieData.months[recMonthNameCat].cycletimes.push(recCycleTime);","\t    pieData.months[recMonthNameCat].count++;","\t    pieData.months[recMonthNameCat].totalCycleTime = pieData.months[recMonthNameCat].totalCycleTime + recCycleTime;","\t    pieData.months[recMonthNameCat].avgCycleTime = Math.ceil(pieData.months[recMonthNameCat].totalCycleTime/ pieData.months[recMonthNameCat].count);","\t    pieData.totalCount++;","\t   ","\t   this.pieData = pieData;","\t},","\t","\t_initAndDrawCycleTimeCharts: function(pieData) {\t\t\t\t","\t\tvar cycleTimeData = [], sizeData = [], categories = [];","\t\t\t\t\t","\t\tif (pieData.totalCount === 0) {","\t\t\treturn;","\t\t}","\t\t","\t\tfor (month in pieData.months){","\t\t\tcycleTimeData.push([month, pieData.months[month].avgCycleTime]);","\t\t\tsizeData.push([month, pieData.months[month].count]);","\t\t\tcategories.push(month);","\t\t}","\t\t","\t\tvar cycleTimeHorBarGraph = this._drawCycleTimeHorizontalBarChart(categories, cycleTimeData);","\t\tthis._createCycleTimeBarGraphContainer(cycleTimeHorBarGraph);","\t},","\t","\t_createCycleTimeBarGraphContainer: function(barGraph){","\t\t","\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultPieChartContainer', ","\t\t\t    id: 'defaultPieChartContainer',","\t            layout: {","\t                type: 'hbox',","\t                align: 'stretch',","\t                padding: 5","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [barGraph]","\t        });","\t},","\t","\t\t/* Configures and displays a horizontal bar chart */","\t_drawCycleTimeHorizontalBarChart: function(categories, leadTimeData) {\t","\t\tvar conf = {","\t\t\tid: 'horizontalBars',","\t\t\tseries: [{name: 'Cycle Time', data: leadTimeData}],\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'UserStory Cycle Time',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Days',","\t\t\t_formatLabelsAppendix: ' days',","\t\t\tplotOptions: {","                bar: {","                    dataLabels: {","                        enabled: this.getSetting('showDataLabels')","                    }","                }","            }","\t\t};\t\t\t\t\t\t\t\t\t\t","\t\t","\t\treturn this._drawCycleTimeBarChart(conf);","\t},","\t","\t/* Draws and displays the bar chart */","\t_drawCycleTimeBarChart: function (conf) {\t\t\t\t\t","\t\t","\t\tvar chart = {","\t\t\txtype: 'rallychart',","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\twidth: 485,","\t\t\tchartData: {","\t\t\t\tseries: conf.series\t\t\t\t\t\t\t\t","\t\t\t},","\t\t\tchartColors: ['#FF3333', '#00CC00'],\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tchart: {","\t\t\t\t\tplotBackgroundColor: null,","\t\t\t\t\tplotBorderWidth: null,","\t\t\t\t\tplotShadow: false,","\t\t\t\t\ttype: conf.chartType\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {\t\t\t\t\t\t\t\t\t","\t\t\t\t\talign: 'right',","\t\t\t\t\tverticalAlign: 'top',","\t\t\t\t\tx: 0,","\t\t\t\t\ty: 100,\t\t\t\t\t\t\t\t\t","\t\t\t\t\tlayout: 'vertical'","\t\t\t\t},","\t\t\t\ttitle: {","\t\t\t\t\ttext: conf.chartTitle","\t\t\t\t},","\t\t\t\ttooltip: {","\t\t\t\t\t_formatLabels: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name +'</b><br/>'+","\t\t\t\t\t\tthis.x +': '+ this.y + conf._formatLabelsAppendix;","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{","\t\t\t\t\ttitle: {text: conf.yAxisTitle}","\t\t\t\t}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}],","\t\t\t\tplotOptions: conf.plotOptions","\t\t\t}","\t\t};","\t\t","\t\treturn chart;\t","\t},","\t","\t/* ####################################################################################################################################################################### */","\t","\t/* ============================================================================================================================== */","\t/* This Section is entirely for Configuring THROUGHPUT metrics */","\t/* ============================================================================================================================== */","\t","\t_configureThroughputMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){","\t\t","\t\t//1. Create the message panel container for showing the cumulative data.","\t\tthis.currThroughputMessage = '<div style=\"text-indent: 1em;\"> <b>Current</b> Throughput is : <font size=\"3\" color=\"Black\"><b>' + this.currThroughputValue + '</b></font></div>';","\t    this.prevThroughputMessage = '<div style=\"text-indent: 5em;\"> Previous Throughput is : <font size=\"2\" color=\"Black\"><b>' + this.prevThroughputValue + '</b></font></div>';","\t\tvar throughtputContainer = this._createMetricsContainer('throughput', this.currThroughputMessage, this.prevThroughputMessage);","\t\t","\t\t","\t\t//2. Create the throughput graph.","\t\tthis._processThroughputDataForGraph();","\t\tvar throughtputGraphContainer = this._createThroughputGraphContainer(this.throughputChart);","\t\t","\t\t//3. cretae the throuput data grid.","\t\tvar pastRangeThroghtputGridTitle = 'View Throughput Data';","\t    var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore, 'throughputGrid');","\t\t","\t\t//4. cretae the infopanel to add all the above components.","\t\tvar widthValue = hasGraph? 750 : 450;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","        \tautoScroll: true,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 500,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            items: [throughtputContainer, throughtputGraphContainer]","        });","\t\t","\t\t//5. add the nfopanel to the appropriate app container.","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_processThroughputDataForGraph: function(){","\t    var that = this;","\t\tthis.groupedSeries = [];","\t\t","\t\t//initialize the groupseries","\t    Ext.Array.each(that.cycleTimeCategoryNames, function(catName) {","\t        that.groupedSeries.push({name: catName, data:[], stack: 'qSizes'});","\t    });","\t    ","\t    that.groupedSeries.push({name: 'N/A', data: [], stack: 'qSizes'});","\t    ","\t    this.chartData = {","\t\t\ttotalCount: 0,","\t\t\tmonths: {},","\t\t\tmonthCount: 0,","\t\t\tcategories: []","\t\t};\t","\t\t","\t\t    ","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t    that._buildThroughputChartData(record);","\t\t});","\t\t","\t\tthis._initAndDrawThroughputCharts(this.chartData);","\t},","\t","\t_buildThroughputChartData: function(record){","\t    var chartData = this.chartData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTimeCat = record.get(\"CycleTimeCategory\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    if(typeof chartData.months[recMonthNameCat] === \"undefined\"){","\t        chartData.months[recMonthNameCat] = {count: 0, monthNum: 0, cycletimes: {}, userStories: []};","\t        chartData.categories.push(recMonthNameCat);","\t        ","\t        for(var i=0; i<this.groupedSeries.length; ++i){","\t            this.groupedSeries[i].data.push(0); //add 0 for each month","\t        }","\t        ","\t        chartData.monthCount++;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].userStories.push(record);","\t    if(typeof chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] === 'undefined'){","\t        chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] =0;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat]++;","\t    chartData.months[recMonthNameCat].count++;","\t    chartData.totalCount++;","\t  ","\t    for(var s=0; s<this.groupedSeries.length; ++s){","\t        if(recCycleTimeCat === this.groupedSeries[s].name){","\t            this.groupedSeries[s].data[(chartData.monthCount -1)] = chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat];","\t        }","\t    }","\t   ","\t   this.chartData = chartData;","\t},","\t","\t//pre init for the charts ","\t_initAndDrawThroughputCharts: function(inputData) {\t\t\t\t\t\t\t\t\t\t\t\t","\t\tif (inputData.totalCount === 0) {","\t\t\treturn;","\t\t}\t\t\t\t\t\t","\t\t\t\t\t","\t\tvar throughput = [], i, qCount = 0, currTotalCount = 0, avgTotals = [], monthAVGs = [];","\t\t\t\t\t\t","\t\tfor (i in inputData.months) {\t\t\t","\t\t\tthroughput.push(inputData.months[i].count);","\t\t\tcurrTotalCount += inputData.months[i].count;","\t\t\tqCount++;","\t\t\t\t\t","\t\t\tavgTotals.push(Math.round(currTotalCount / qCount, 2));","\t\t}","\t\t\t\t\t","\t\tfor (i = 0; i < inputData.monthCount; ++i) {","\t\t\tmonthAVGs.push(Math.round(inputData.totalCount / inputData.monthCount, 2));","\t\t}","\t","\t\t//Finalize series","\t\tthis.groupedSeries.unshift({name: 'Throughput', data: throughput});","\t\tthis.groupedSeries.push({type: 'spline',name: 'Moving Average', data: avgTotals, color: 'blue', marker: {lineWidth: 1, fillColor: 'red'}});\t\t\t\t","\t\tthis.groupedSeries.push({type: 'spline',name: 'Average / Month', data: monthAVGs, color: 'purple', marker: {lineWidth: 1, fillColor: 'red'}});","\t\tthis.groupedSeries.push({name: 'Total UserStories: ' + inputData.totalCount, color: '#fff', stack:'blank'});","\t\t\t\t","\t\tthis._drawThroughputVerticalBarChart(inputData.categories, this.groupedSeries);\t\t\t","\t},","\t","\t// Configures and displays a horizontal bar chart","\t_drawThroughputVerticalBarChart: function(categories, data) {\t","\t\tvar conf = {","\t\t\tid: 'verticalBars',","\t\t\ttargetContainer: '#defaultChartContainer',","\t\t\tseries: data,\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'Throughput by Months',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Count'\t\t\t\t\t\t\t\t\t\t\t\t","\t\t};\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t","\t\tthis._drawThroughputBarChart(conf);","\t},\t\t\t\t\t\t\t\t","\t","\t//Draws and displays the bar chart ","\t_drawThroughputBarChart: function (conf) {\t\t\t\t\t","\t\tthis.throughputChart = Ext.create('Rally.ui.chart.Chart',{","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\tchartData: {series: conf.series},\t\t\t\t\t\t\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tplotOptions: {","\t\t\t\t\tcolumn: {","\t\t\t\t\t\tstacking: 'normal', ","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tpoint: {","\t\t\t\t\t\t\tevents: {","\t\t\t\t\t\t\t\tclick: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t//Need to implement","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}\t\t\t\t\t\t\t\t\t","\t\t\t\t},","\t\t\t\tchart: {plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false, type: conf.chartType},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {align: 'right', verticalAlign: 'top', x: 0, y: 100,layout: 'vertical'},","\t\t\t\ttitle: {text: conf.chartTitle},","\t\t\t\ttooltip: {","\t\t\t\t\tformatter: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name + ' | ' + this.x + '</b><br/>'+","\t\t\t\t\t\t\t'<b>'+ this.y + '</b> User Stories<br/><i>(Click to view User Stories)</i>';","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{title: {text: conf.yAxisTitle}}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}]","\t\t\t}","\t\t});","\t},\t\t","\t","\t_createThroughputGraphContainer: function(throughputChart){","\t\t","\t\tvar graphContainer = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultChartContainer', ","\t\t\t    id: 'defaultChartContainer',","\t            layout: {","\t                type: 'vbox',","\t                align: 'stretch',","\t                padding: 5","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [throughputChart]","\t        });","\t     ","\t    return graphContainer;","\t},","\t","\t_createThroughputDataGrid: function(title, dataStore, gridId){","\t\t","\t    var grid = Ext.create('Rally.ui.grid.Grid', {","\t    \tid: gridId,","\t        title: title,","            store: dataStore,","            bodyBorder: true,","            columnCfgs: [","                {","                   text: 'Formatted ID', dataIndex: 'FormattedID', width: 100","                },","                {","                    text: 'Name', dataIndex: 'Name', width: 500","                },","                {","                    text: 'Accepted Date', dataIndex: 'AcceptedDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'InProgress Date', dataIndex: 'InProgressDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'Owner', dataIndex: 'Owner', flex: 1, emptyCellText: 'No Owner',","                    renderer: function(value){","                        if(value && value._refObjectName)","                            return value._refObjectName;","                    }","                },","                {","                    text: 'Tags', dataIndex: 'Tags', flex: 1, emptyCellText: 'No Tags',","                    renderer: function(value){","                        if(value && value.Name)","                            return value.Name;","                    }","                },","                {","                    text: 'CycleTime', dataIndex: 'CycleTime', flex: 1","                },","                {","                    text: 'CycleTime Category', dataIndex: 'CycleTimeCategory', flex: 1","                },","             ]","        });","        ","        return grid;","\t},","\t","  /* ####################################################################################################################################################################### */","  ","  /* ============================================================================================================================== */","  /* This Section is entirely for Configuring SLA & WIP LIMIT metrics */","  /* ============================================================================================================================== */","  ","    _createDataStoreForSLAAndWipLimit: function(){","    \tvar me = this;","    \tthis._initializingForWipSLAControls();","    \tthis.loadStoriesAndSnapshots().then(Ext.bind(function(data){","            ","            me.currWipLimitMessage = '<div style=\"text-indent: 1em;\"><b>Current</b> WIP is : <font size=\"3\" color=\"Black\"><b>[WIP]</b></font></div>';","\t\t\tme.preWipLimitMessage = '<div style=\"text-indent: 5em;\">Previous WIP is : <font size=\"2\" color=\"Black\"><b>[WIP]</b></font></div>';","\t\t    var wipLimitContainer = me._createMetricsContainer('wipLimit', me.currWipLimitMessage, me.preWipLimitMessage);","\t\t\tvar pastRangeWipLimitDataGrid = me.getDurationGrid(data.kanbanDurationStore, 'c_KanbanState', 'Durations by Kanban-State');","\t\t    me._configureMetricsContainer('panel3', 'WIP Limit', wipLimitContainer, 'wipContainer', 'WipLimitSLAReport', pastRangeWipLimitDataGrid, false);","\t\t        ","\t\t    me.currSLALimitMessage = '<div style=\"text-indent: 1em;\"><b>Current</b> SLA is : <font size=\"3\" color=\"Black\"><b>'+ me.getTeamSLA() + '</b> days</font></div>';","\t\t    var slaLimitContainer = me._createSLAMetricsContainer('slaLimit', me.currSLALimitMessage);","\t\t    var overSLAGrid = me.getStoryGrid('overSLAGrid', data.overSLAStore, 'Stories &gt; SLA limit (' + me.getTeamSLA() + ' days)', 'left');","            var underSLAGrid = me.getStoryGrid('underSLAGrid', data.underSLAStore, 'Stories &lt; SLA Limit  (' + me.getTeamSLA() + ' days)', 'left');","\t\t    me._configureSLAMetricsContainer('panel4', 'SLA Limit', slaLimitContainer, 'slaContainer', 'WipLimitSLAReport', overSLAGrid, underSLAGrid, true);","        }));","    },","    ","    _initializingForWipSLAControls: function(){","\t    //initiatilizing for SLA & Wip Limit","\t    this.defaultTeamSLA = 10;","        ","        if (this.kanbanDurationGrid) { //Destroy grids","            this.kanbanDurationGrid.destroy();","            this.overSLAGrid.destroy();","            this.underSLAGrid.destroy();","        }","        ","        if (!this.isTeamSLASet()) {","           this.info += '<div id=\"appHint\">Please set a value for the Team SLA in the App-Settings.<br/>A default of <b>' + this.defaultTeamSLA + ' days</b> is used.</div>'; ","        } ","        ","        this.dataStore = {","                kanbanStateDurations: {},","                kanbanStates: {}","            };","        ","        Ext.getCmp('infoContainer').update(this.info);","    },","    ","    isTeamSLASet: function() {","        return _.parseInt(this.getSetting('teamSLA')) > 0;","    },","    ","    loadStoriesAndSnapshots: function() {","\t\tvar currDate = new Date();","\t\tvar prevDate = currDate.getDate() - 30;","\t\t","        var start =  Ext.Date.format(currDate.getDate(), \"Y-m-d\");","        var end = Ext.Date.format(this.currEndRallyDateFilter, \"Y-m-d\");","        ","        var me = this;","        var snapshots = this.getSnapshots({","            fetch: ['ObjectID'],","            findConfig: {","                \"_TypeHierarchy\": \"HierarchicalRequirement\",","                \"_PreviousValues.ScheduleState\": {","                    \"$exists\": true,","                    \"$lt\": \"Accepted\"","                },","                \"ScheduleState\": {","                    \"$gte\": \"Accepted\"","                },","                \"_ValidFrom\": {","                    \"$lt\": \"2015-01-31TZ\",","                    \"$gte\": \"2014-12-01TZ\"","                },","                \"Project\" : this.context.getProject().ObjectID","            }","        });","        ","        return Deft.Promise.all([snapshots]).then(function(results){","            var ids = [];","             _.each(results[0], function(r) {","                if (ids.indexOf(r.ObjectID <0)) {","                      ids.push(r.ObjectID);","                }","            });","            return me.loadStories(ids);","        });","    },","    ","     getSnapshots: function(config) {","        var workspaceOid = this.context.getWorkspace().ObjectID;","        var deferred = new Deft.Deferred();","        Ext.create('Rally.data.lookback.SnapshotStore', _.merge({","            // TODO - account for > 20k results","            autoLoad: true,","            context: {","                workspace: '/workspace/' + workspaceOid","            },","            listeners: {","                load: function(store, data, success) {","                    deferred.resolve(_.pluck(data, 'raw'));","                }","            }","        }, config));","","        return deferred.getPromise();","    },","    ","    loadStories: function(ids) {","        var me = Rally.getApp();","        var snapshots = me.getSnapshots({","            fetch: ['_ValidFrom', '_ValidTo', 'c_KanbanState', 'ScheduleState', '_UnformattedID', 'Name'],","            hydrate: ['ScheduleState'],","            findConfig: {","                \"ObjectID\": {","                    \"$in\": ids","                },","                 \"c_KanbanState\" : {","                  \"$exists\": true  ","                }","            }","        });","        ","        return Deft.Promise.all([ snapshots]).then(function(result) {","            var stories = result[0], workdays, validTo;","            var results = {stories: {}, totalAcceptedStories:0, totalInProgressWorkDays: 0};","             ","            _.each(stories, function(snapshot) {","                snapshot.cycleTime = snapshot.cycleTime || 0;","                snapshot.FormattedID = snapshot.FormattedID || \"US\" + snapshot._UnformattedID;","                snapshot._ref = snapshot._ref || '/userstory/' + snapshot.ObjectID;","        ","                me.initStates(snapshot);","                validTo = (snapshot._ValidTo.indexOf('9999') >= 0) ? NOW : snapshot._ValidTo;","                workdays = me.getWorkingDays(snapshot._ValidFrom, validTo);","","               if (_.isUndefined(results.stories[snapshot.ObjectID])) {","                    results.stories[snapshot.ObjectID] = snapshot;","                    results.totalAcceptedStories++;","                    me.dataStore.kanbanStates[snapshot.ObjectID] = [];","                }","                ","                if (snapshot.ScheduleState === 'In-Progress') {","                    results.stories[snapshot.ObjectID].cycleTime += workdays;","                    results.totalInProgressWorkDays+= workdays;","                }","                ","                me.updateStates(snapshot, workdays);","            });","            ","            results.avgCycleTime = Math.ceil(results.totalInProgressWorkDays / results.totalAcceptedStories);","            results.kanbanDurationStore = me.createCustomStore(_.values(me.dataStore.kanbanStateDurations));","           ","            return me.getOutliers(results);","        });","    },","    ","    initStates: function(snapshot) {","        this.dataStore.kanbanStateDurations[snapshot.c_KanbanState]  = this.dataStore.kanbanStateDurations[snapshot.c_KanbanState] || {storyCount:0, workdays: 0, snapshot: snapshot};","    },","    ","     getWorkingDays: function(startDate, endDate) {","\t\tvar currentDate = new Date(startDate), result = 0, weekDay, difference;","\t\tvar minutes = 1000 * 60;","        var hours = minutes * 60;","        var days = hours * 24;","        endDate = new Date(endDate);","","\t\twhile (currentDate <= endDate)  {","            difference = (endDate.getTime() / days) - (currentDate.getTime() / days);","            if (difference > 0) { //only count days when difference is >= 1 day","                weekDay = currentDate.getDay();","                if (weekDay !== 0 && weekDay !== 6) {","                    result += difference > 1 ? 1 : difference;","                }","            }","\t\t\tcurrentDate.setDate(currentDate.getDate()+1); ","\t\t}","\t\treturn result;","\t},","\t","\tupdateStates: function(snapshot, workdays) {","        if (this.dataStore.kanbanStates[snapshot.ObjectID].indexOf(snapshot.c_KanbanState) < 0) {","            this.dataStore.kanbanStates[snapshot.ObjectID].push(snapshot.c_KanbanState);","            this.dataStore.kanbanStateDurations[snapshot.c_KanbanState].storyCount++;","        }","        ","        this.dataStore.kanbanStateDurations[snapshot.c_KanbanState].workdays += workdays;","    },","    ","    createCustomStore: function(data) {","        return Ext.create('Rally.data.custom.Store', {data: data});","    },","    ","    getOutliers: function(data) {","        var teamSLA = this.getTeamSLA();","        var overSLAStories = [], underSLAStories = [];","        ","        _.each(data.stories, function(story, ObjectID){","            if  (story.cycleTime > teamSLA) {","                overSLAStories.push(story);","            }","            if  (story.cycleTime <= teamSLA) {","                underSLAStories.push(story);","            }","        });","        ","        data.overSLAStore = Rally.getApp().createCustomStore(_.sortBy(overSLAStories, 'cycleTime').reverse());","        data.underSLAStore = Rally.getApp().createCustomStore(_.sortBy(underSLAStories, 'cycleTime').reverse());","        ","        return data;","    },","    ","    getDurationGrid: function(store, state, title) {","        return Ext.create('Rally.ui.grid.Grid', {","            title: title,","            store: store,","            showPagingToolbar: false,","            showRowActionsColumn: false,","            columnCfgs: [","                {text: 'State', width: 150, renderer: function(value, meta, record){return record.get('snapshot')[state];}},","                {text: 'AVG time', renderer: function(value, meta, record) {return Math.ceil(record.get('workdays') / record.get('storyCount')) + ' days';}},","                {text: '# Stories', dataIndex: 'storyCount'}","            ]","        }); ","    },","    ","    getStoryGrid: function(gridId, store, title, css) {","        return Ext.create('Rally.ui.grid.Grid', {","        \tid: gridId,","        \tbodyBorder: true,","        \tautoScroll: true,","        \tborder: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","        \tshowPagingToolbar: false,","            showRowActionsColumn: false,","            title: title,","            store: store,","            width: 350,","            columnCfgs: [","                {text: 'Formatted-ID', dataIndex: 'FormattedID',  xtype: 'templatecolumn', tpl: Ext.create('Rally.ui.renderer.template.FormattedIDTemplate')},","                {text: 'Cycle-Time', renderer: function(value, meta, record){return record.get('cycleTime').toFixed(1) + ' days';}}","            ],","            storeConfig: {","                 model: 'userstory'","            }","        });","    },","    ","    getTeamSLA: function() {","        return this.isTeamSLASet() ? this.getSetting('teamSLA') : this.defaultTeamSLA;","    },","    ","    _configureSLAMetricsContainer: function(panelId, titleName, slaLimitContainer, containerId, reportId, outRangeDataGrid, inRangeDataGrid, hasGraph){","\t\tvar widthValue = hasGraph? 750 : 450;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar myGridContainer = Ext.create('Ext.container.Container', {","         \tid: 'storyGridContainer',","         \tautoScroll: true,","         \theight: 200,","            layout: {","                type: 'hbox',","                align: 'fit',","                padding: 10","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [outRangeDataGrid, inRangeDataGrid]","        });","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","        \tautoScroll: true,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 300,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            items: [slaLimitContainer, myGridContainer]","        });","        ","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_createSLAMetricsContainer: function(containerId, currMessage){","\t\t","\t\tvar myContainer = Ext.create('Ext.container.Container', {","         \tid: containerId,","         \tautoScroll: true,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currMessage","            }]","        });","        ","        return myContainer;","\t},","    ","    /* ####################################################################################################################################################################### */","    ","\t_createMetricsContainer: function(containerId, currMessage, prevMessage){","\t\t","\t\tvar myContainer = Ext.create('Ext.container.Container', {","         \tid: containerId,","         \tautoScroll: true,","            layout: {","                type: 'hbox',","                align: 'fit',","                padding: 5","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currMessage","            },","            {","                xtype: 'label',","                html: prevMessage","            }]","        });","        ","        return myContainer;","\t},","\t","\t_configureMetricsContainer: function(panelId, titleName, throughtputContainer, containerId, reportId, pastRangeDataGrid, hasGraph){","\t\tvar widthValue = hasGraph? 750 : 500;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","        \tautoScroll: true,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 300,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            items: [throughtputContainer, pastRangeDataGrid]","        });","        ","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t//Note: Need to refactor to re-use the same methord for Pie or Bar graph.","\t_createCycleTimePieContainer: function(cycleTimePie, bySizePie){","\t\t","\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultPieChartContainer', ","\t\t\t    id: 'defaultPieChartContainer',","\t            layout: {","\t                type: 'hbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [cycleTimePie, bySizePie]","\t        });","\t},","\t","","\t","\t/* Configures and displays a pie chart*/","\t_drawPie: function (id, name, text, data, extraData) {\t","\t\t","\t\tvar chart = {","\t\t\txtype: 'rallychart',","\t\t\tid: id,","\t\t\theight: 400,","\t\t\twidth: 400,\t","\t\t\tstyle: {float: 'left'},","\t\t\tchartData: {","\t\t\t\tseries: [{","\t\t\t\t\ttype: 'pie',","\t\t\t\t\tname: name,","\t\t\t\t\tdata: data","\t\t\t\t}]","\t\t\t},","\t\t\tchartConfig: {\t\t\t\t\t\t\t","\t\t\t\tchart: {","\t\t\t\t\tplotBackgroundColor: null,","\t\t\t\t\tplotBorderWidth: null,","\t\t\t\t\tplotShadow: false,","\t\t\t\t\ttype: 'pie'","\t\t\t\t},","\t\t\t\txAxis: {},//must specify empty x-axis due to bug","\t\t\t\ttitle: {","\t\t\t\t\ttext: text","\t\t\t\t},","\t\t\t\ttooltip: {","\t\t\t\t\tpointFormat: '{series.name}: <b>{point.y}</b>',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\tpercentageDecimals: 1,","\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\treturn _formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t},","\t\t\t\tplotOptions: {","\t\t\t\t\tpie: {","\t\t\t\t\t\tallowPointSelect: true,","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tdataLabels: {","\t\t\t\t\t\t\tenabled: true,","\t\t\t\t\t\t\tcolor: '#000000',","\t\t\t\t\t\t\tconnectorColor: '#000000',\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\treturn Rally.getApp()._formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t};","\t\t\t\t\t","\t\treturn chart;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t},","\t","\t/* formats lables for charts */","\t_formatLabels: function(id, that, extraData) {","\t\tswitch (id) {","\t\t\tcase 'cycleTimePie':\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\treturn '<b>' + that.point.name +'</b><br/>AVG Cycle Time: '+ that.y;","\t\t\tcase 'bySizePie' :","\t\t\t\treturn '<b>'+ that.point.name +'</b><br/>Count: '+ that.y; ","\t\t}\t\t\t\t","\t}","\t","});"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":1226,"column":3},"action":"remove","lines":["var types = Ext.data.Types; // allow shorthand type access","Ext.define('ThroughputDataModel', {","\textend: 'Ext.data.Model',","\tfields: [","                {name: 'FormattedID', mapping: 'FormattedID', type: types.STRING},","                {name: 'Name', mapping: 'Name', type: types.STRING},","                {name: 'AcceptedDate', mapping: 'AcceptedDate', type: types.DATE },","                {name: 'InProgressDate', mapping: 'InProgressDate', type: types.DATE },","                {name: 'Tags', mapping: 'Tags', type: types.STRING},","                {name: 'Owner', mapping: 'Owner', type: types.OBJECT},","                {name: 'CycleTime', mapping: 'CycleTime', type: types.FLOAT},","                {name: 'CycleTimeCategory', mapping: 'CycleTimeCategory', type: types.STRING}","            ]","});","","var NOW = new Date();","","Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    autoScroll: true,","    defaultTeamSLA: 10,","    getSettingsFields: function() {","        return [","            {","                name: 'teamSLA',","                fieldLabel: 'Team SLA value (days)',","                xtype: 'rallynumberfield'","            }","        ];","    },","    items:[","    \t{","            xtype: 'container', id: 'infoContainer', itemId: 'infoContainer', border: 0","        },","    \t{xtype: 'container', itemId: 'throughputCycleTimeReport', id: 'throughputCycleTimeReport', ","            items: [\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t{xtype: 'container', itemId: 'throughputContainer', id: 'throughputContainer', title: 'Throughput'},","\t\t\t\t{xtype: 'container', itemId: 'cycleTimeContainer', id: 'cycleTimeContainer', title: 'Cycle-Time'}","\t\t\t],","\t\t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:5","\t\t    }","\t\t},\t","    \t{xtype: 'container', itemId: 'WipLimitSLAReport', id: 'WipLimitSLAReport', ","            items: [\t","            \t{xtype: 'container', itemId: 'slaContainer', id: 'slaContainer', title: 'SLA Counter'},","            \t{xtype: 'container', itemId: 'wipContainer', id: 'wipContainer', title: 'WIP Limit'}","\t\t\t],","    \t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:5","\t\t    }","    \t}","\t],","\t","    layout:{","        type:'vbox',","        align:'stretch',","        padding:5","    },","    ","    cycleTimeCategoryNames: [\"0-5 days\", \"6-10 days\", \"11-15 days\", \"16-20 days\", \"21-25 days\", \"26-30 days\", \"31+ days\"],","    cycleTimeDistRange: 5,","\t","    launch: function() {","    \t","    \tthis.activeViews = ['throughputCycleTimeReport','WipLimitSLAReport'];","    \tthis._init();","        this.currThroughputMessage = '<div>The Throughput for current period (between Start Date & End Date) is : <b> 10 </b></div>';","\t    this.prevThroughputMessage =  '<div>The Throughput for Previous period (between Start Date & End Date) is : <b> 10 </b></div>';","\t    ","\t    this._determineDateRangeForKanbanMetrics();","\t    ","\t    this._initializingInfoForKanbanMetrics();","        ","        this._createDataStoreForKanbanMetrics();","    },","    ","     /* Initializes the app */","\t_init: function() {\t","\t\tvar that = this;","\t\t//dynamicItems hold created ui items, which needs to be destroyed before re-drawing","\t\tif (typeof this.dynamicItems === \"undefined\"){","\t\t\tthis.dynamicItems = {};","\t\t}","\t\t","\t\tExt.Array.each(this.activeViews, function(viewName){","\t\t\tif (typeof that.dynamicItems[viewName] === \"undefined\"){","\t\t\t\tthat.dynamicItems[viewName] = {};","\t\t\t}","\t\t\telse {","\t\t\t\tvar item;","\t\t","\t\t\t\tfor (item in that.dynamicItems[viewName]) {","\t\t\t\t\tthat.dynamicItems[viewName][item].destroy();","\t\t\t\t}","\t\t\t}\t","\t\t});","\t},","\t","\t/* ============================================================================================================================== */","\t/* This Section is entirely for determine the Kanban Metrics Datastore */","\t/* ============================================================================================================================== */","\t","\t_determineDateRangeForKanbanMetrics: function(){","        this.curr_End_Date = new Date();","        ","        //Determine a date 30 days prior to current date.","        var tmp_Curr_Date = new Date();","        tmp_Curr_Date.setDate(tmp_Curr_Date.getDate()-30);","        this.curr_Start_Date = tmp_Curr_Date;","        ","        this.currStartRallyDateFilter = this.curr_Start_Date.getFullYear() + '-' + (parseInt(this.curr_Start_Date.getMonth(), 10) + 1)  + '-' + this.curr_Start_Date.getDate();","        this.currEndRallyDateFilter = this.curr_End_Date.getFullYear() + '-' + (parseInt(this.curr_End_Date.getMonth(), 10) + 1)  + '-' + this.curr_End_Date.getDate();","        ","        var tmp_Prev_Date = new Date();","        tmp_Prev_Date.setDate(tmp_Prev_Date.getDate()-60);","        this.prev_Start_Date = tmp_Prev_Date;","        this.prev_End_Date = Ext.Date.add(this.curr_Start_Date, Ext.Date.DAY, -1);","        ","        this.prevStartRallyDateFilter = this.prev_Start_Date.getFullYear() + '-' + (parseInt(this.prev_Start_Date.getMonth(), 10)+1) + '-' + this.prev_Start_Date.getDate();","        this.prevEndRallyDateFilter = this.prev_End_Date.getFullYear() + '-' + (parseInt(this.prev_End_Date.getMonth(), 10)+1) + '-' + this.prev_End_Date.getDate();","        ","        this.past_Date_SixMonth = Ext.Date.add(this.curr_Start_Date, Ext.Date.MONTH, -5);","        this.pastDateSixMonthFilter = this.past_Date_SixMonth.getFullYear() + '-' + (parseInt(this.past_Date_SixMonth.getMonth(), 10)+1) + '-' + this.past_Date_SixMonth.getDate();","    }, ","    ","    _initializingInfoForKanbanMetrics: function(){","\t    //initiatilizing for SLA & Wip Limit","\t\tthis.info = '<div> The <i><b>Current</b></i> period is between <b>' + this.currStartRallyDateFilter + '</b> and <b>' + this.currEndRallyDateFilter + '</b>. &nbsp;&nbsp; The <i><b>Previous</b></i> period is between <b>' + this.prevStartRallyDateFilter + '</b> and <b>' + this.prevEndRallyDateFilter + '</b>.</div>';","        ","        Ext.getCmp('infoContainer').update(this.info);","    },","    ","     _createDataStoreForKanbanMetrics: function(){","        //Determine the data filter for store.","        this.filter = Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '>=',","\t\t\tvalue: this.pastDateSixMonthFilter","\t\t}).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '<=',","\t\t\tvalue: this.currEndRallyDateFilter","\t\t})).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'ScheduleState',","\t\t\toperator: '=',","\t\t\tvalue: 'Accepted'","\t\t}));","\t\t","\t\t//Record all columns that needs to be fetched.","\t\tthis.fetchDataColumns = ['FormattedID', 'Name', 'AcceptedDate', 'InProgressDate', 'Tags', 'Owner', 'c_KanbanState','ScheduleState'];","\t\t","\t\t//configure the data store context.","\t\tthis.contextConfig = {","            workspace: this.getContext().getWorkspace()._Ref,","            project: this.getContext().getProject()._ref,","            projectScopeUp: false,","            projectScopeDown: true,","            limit: 'infinity'","        };","\t   ","\t   //set the sorter config for data store.","\t   this.sorterConfig = [{","                        \tproperty: 'AcceptedDate',","                        \tdirection: 'ASC'","                        },","                        {","                            property: 'FormattedID',","                            direction: 'ASC'","                        }];","                        ","\t\tthis._createUserStoryDataStore();","    },","    ","     _createUserStoryDataStore: function(){","\t    var myUserStoryStore = Ext.create('Rally.data.wsapi.Store', {","\t        model: 'HierarchicalRequirement',","\t        fetch: this.fetchDataColumns,","\t        autoLoad: true,","\t        context: this.contextConfig,","\t        filters: this.filter,","\t        sorters: this.sorterConfig,","\t        listeners: {","\t            load: function(store, data, success){","\t            \tthis.currUserStoriesColl = [];","\t                this.prevUserStoriesColl = [];","\t                this.pastRangeUserStoriesColl = [];","\t                var that = this;","\t               ","\t                Ext.Array.each(data, function(userStory) {","\t                    if(userStory && userStory.get('AcceptedDate')){","\t                    \tif(userStory.get('AcceptedDate') >= that.curr_Start_Date){","\t                            that.currUserStoriesColl.push(that._createKanbanmetRicsData(userStory));","\t                        }if(userStory.get('AcceptedDate') < that.curr_Start_Date && userStory.get('AcceptedDate') >= that.prev_Start_Date){","\t                            that.prevUserStoriesColl.push(that._createKanbanmetRicsData(userStory));","\t                        }","\t                        that.pastRangeUserStoriesColl.push(that._createKanbanmetRicsData(userStory));","\t                    }","\t                });","\t                ","\t                this._createDefectStore();","\t            },","\t            scope: this","\t        }","\t  });","\t},","\t","\t_createKanbanmetRicsData: function(rallyObject){","\t    var cycleTime = 0;","\t    var cycleTimeCat = \"N/A\";","\t    //Determine the cycle time for each object.","\t    if(rallyObject.get('AcceptedDate') && rallyObject.get('InProgressDate')){","\t        cycleTime = Rally.util.DateTime.getDifference(rallyObject.get('AcceptedDate'), rallyObject.get('InProgressDate'), 'day');","\t    }","\t    ","\t    for(var i =0; i<this.cycleTimeCategoryNames.length; i++){","\t        var lowerRange = i*this.cycleTimeDistRange, upperRange = lowerRange + 5;","\t        ","\t        if((cycleTime >lowerRange && cycleTime <= upperRange) || (lowerRange === 30 && cycleTime > lowerRange))","\t            cycleTimeCat = this.cycleTimeCategoryNames[i];","\t    }","\t    ","\t    //Generate the node for throghput data.","\t    var data = Ext.create('ThroughputDataModel', {","\t        FormattedID: rallyObject.get('FormattedID'), ","\t        Name: rallyObject.get('Name'), ","\t        AcceptedDate: rallyObject.get('AcceptedDate'), ","\t        InProgressDate: rallyObject.get('InProgressDate'), ","\t        Tags: rallyObject.get('Tags'), ","\t        Owner: rallyObject.get('Owner'),","\t        CycleTime: cycleTime,","\t        CycleTimeCategory: cycleTimeCat","\t    });","\t    ","\t    return data;","\t},","\t","\t_createDefectStore: function(){","\t    var that = this;","\t    var myDefectStore = Ext.create('Rally.data.wsapi.Store', {","            model: 'Defect',","            fetch: this.fetchDataColumns,","            autoLoad: true,","            context: this.contextConfig,","            filters: this.filter,","            sorters: this.sorterConfig,","            listeners: {","                load: function(store, data, success){","                    Ext.Array.each(data, function(defect){","                        if(defect && defect.get('AcceptedDate')){","                        \tif(defect.get('AcceptedDate') >= that.curr_Start_Date){","                            \tthat._insertRecordInOrder(that.currUserStoriesColl, that._createKanbanmetRicsData(defect));","                            }if(defect.get('AcceptedDate') < that.curr_Start_Date && defect.get('AcceptedDate') >= that.prev_Start_Date){","                                that._insertRecordInOrder(that.prevUserStoriesColl, that._createKanbanmetRicsData(defect));","                            }","                            that._insertRecordInOrder(that.pastRangeUserStoriesColl, that._createKanbanmetRicsData(defect));","                        }","                           ","                    });","                    ","                   this.currThroughputValue = this.currUserStoriesColl.length;","\t               this.prevThroughputValue = this.prevUserStoriesColl.length;","\t                ","\t               this.currThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.currUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.prevThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.prevUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.pastRangeThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        model: 'ThroughputDataModel',","                        data: this.pastRangeUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this._createKanbanMetricsMessagePanel();","                },","                scope: this","            }","\t  });","\t},","\t","\t_insertRecordInOrder: function(dataColl, record){","\t\tvar closestRecord = record;","\t\tvar recordDate = record.get(\"AcceptedDate\");","\t\t","\t\tExt.Array.each(dataColl, function(data) {","\t\t    var dataDate = data.get(\"AcceptedDate\");","\t\t    if(dataDate && recordDate && dataDate.getMonth() === recordDate.getMonth()){","\t\t    \tif(dataDate <= recordDate)","\t\t    \t\tclosestRecord = data;","\t\t    }","\t\t});","\t\t","\t\tvar dataIndex = dataColl.indexOf(closestRecord);","\t\tif(dataIndex != -1){","\t\t\tdataColl.splice(dataIndex, 0, record);","\t\t}","\t\telse{","\t\t\tdataColl.push(record);","\t\t}","\t},","\t","\t _createKanbanMetricsMessagePanel: function(){","    \t","    \tthis._configureCycleTimeMetricsContainer('panel1', 'CycleTime', 'cycleTimeContainer', 'throughputCycleTimeReport', true);","    \t","\t    this._configureThroughputMetricsContainer('panel2', 'Throughput', 'throughputContainer', 'throughputCycleTimeReport', true);","\t    ","\t    this._createDataStoreForSLAAndWipLimit();","\t},","\t","\t/* ####################################################################################################################################################################### */","\t","\t/* ============================================================================================================================== */","\t/* This Section is entirely for Configuring CYCLETIME metrics */","\t/* ============================================================================================================================== */","\t","\t_configureCycleTimeMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){","\t\t//1. Create the message panel container for showing the cumulative data.","\t\tthis.currCycleTimeMessage = '<div style=\"text-indent: 2em;\"><b>Current</b> Avg. CycleTime is : <font size=\"3\" color=\"Black\"><b> [WIP]. </b></font></div>';","\t    this.prevCycleTimeMessage = '<div style=\"text-indent: 5em;\">Previous Avg. CycleTime is : <font size=\"2\" color=\"Black\"><b> [WIP]. </b></font></div>';","\t\tvar cycleTimeContainer = this._createMetricsContainer('Cycle Time', this.currCycleTimeMessage, this.prevCycleTimeMessage);","\t\t","\t\t","\t\t//2. Create the throughput graph.","\t\tthis._processCycleTimeDataForGraph();","\t\tvar cycleTimeGraphContainer = this.cycleTimePieOrBarGraphChart;","\t\t","\t\t//3. cretae the infopanel to add all the above components.","\t\tvar widthValue = 500;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","        \tautoScroll: true,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 500,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            items: [cycleTimeContainer, cycleTimeGraphContainer]","        });","\t\t","\t\t//5. add the nfopanel to the appropriate app container.","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_processCycleTimeDataForGraph: function(){","\t\tvar that = this;","\t\t","\t   this.pieData = {","\t   \ttotalCount: 0, ","\t   \tmonths: {},","\t   \tmonthCount: 0,","\t   \tcategories: []","\t   };","\t\t","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t\tthat._buildCycleTimeChartData(record);","\t\t});","\t\t","\t\tthis._initAndDrawCycleTimeCharts(this.pieData);","\t},","\t","\t_buildCycleTimeChartData: function(record){","\t\tvar pieData = this.pieData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTime = record.get(\"CycleTime\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    if(typeof pieData.months[recMonthNameCat] === \"undefined\"){","\t        pieData.months[recMonthNameCat] = {count: 0, avgCycleTime: 0, totalCycleTime: 0, cycletimes: []};","\t        pieData.categories.push(recMonthNameCat);","\t        ","\t        pieData.monthCount++;","\t    }","\t    ","\t    pieData.months[recMonthNameCat].cycletimes.push(recCycleTime);","\t    pieData.months[recMonthNameCat].count++;","\t    pieData.months[recMonthNameCat].totalCycleTime = pieData.months[recMonthNameCat].totalCycleTime + recCycleTime;","\t    pieData.months[recMonthNameCat].avgCycleTime = Math.ceil(pieData.months[recMonthNameCat].totalCycleTime/ pieData.months[recMonthNameCat].count);","\t    pieData.totalCount++;","\t   ","\t   this.pieData = pieData;","\t},","\t","\t_initAndDrawCycleTimeCharts: function(pieData) {\t\t\t\t","\t\tvar cycleTimeData = [], sizeData = [], categories = [];","\t\t\t\t\t","\t\tif (pieData.totalCount === 0) {","\t\t\treturn;","\t\t}","\t\t","\t\tfor (month in pieData.months){","\t\t\tcycleTimeData.push([month, pieData.months[month].avgCycleTime]);","\t\t\tsizeData.push([month, pieData.months[month].count]);","\t\t\tcategories.push(month);","\t\t}","\t\t","\t\tvar cycleTimeHorBarGraph = this._drawCycleTimeHorizontalBarChart(categories, cycleTimeData);","\t\tthis._createCycleTimeBarGraphContainer(cycleTimeHorBarGraph);","\t},","\t","\t_createCycleTimeBarGraphContainer: function(barGraph){","\t\t","\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultPieChartContainer', ","\t\t\t    id: 'defaultPieChartContainer',","\t            layout: {","\t                type: 'hbox',","\t                align: 'stretch',","\t                padding: 5","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [barGraph]","\t        });","\t},","\t","\t\t/* Configures and displays a horizontal bar chart */","\t_drawCycleTimeHorizontalBarChart: function(categories, leadTimeData) {\t","\t\tvar conf = {","\t\t\tid: 'horizontalBars',","\t\t\tseries: [{name: 'Cycle Time', data: leadTimeData}],\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'UserStory Cycle Time',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Days',","\t\t\t_formatLabelsAppendix: ' days',","\t\t\tplotOptions: {","                bar: {","                    dataLabels: {","                        enabled: this.getSetting('showDataLabels')","                    }","                }","            }","\t\t};\t\t\t\t\t\t\t\t\t\t","\t\t","\t\treturn this._drawCycleTimeBarChart(conf);","\t},","\t","\t/* Draws and displays the bar chart */","\t_drawCycleTimeBarChart: function (conf) {\t\t\t\t\t","\t\t","\t\tvar chart = {","\t\t\txtype: 'rallychart',","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\twidth: 485,","\t\t\tchartData: {","\t\t\t\tseries: conf.series\t\t\t\t\t\t\t\t","\t\t\t},","\t\t\tchartColors: ['#FF3333', '#00CC00'],\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tchart: {","\t\t\t\t\tplotBackgroundColor: null,","\t\t\t\t\tplotBorderWidth: null,","\t\t\t\t\tplotShadow: false,","\t\t\t\t\ttype: conf.chartType\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {\t\t\t\t\t\t\t\t\t","\t\t\t\t\talign: 'right',","\t\t\t\t\tverticalAlign: 'top',","\t\t\t\t\tx: 0,","\t\t\t\t\ty: 100,\t\t\t\t\t\t\t\t\t","\t\t\t\t\tlayout: 'vertical'","\t\t\t\t},","\t\t\t\ttitle: {","\t\t\t\t\ttext: conf.chartTitle","\t\t\t\t},","\t\t\t\ttooltip: {","\t\t\t\t\t_formatLabels: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name +'</b><br/>'+","\t\t\t\t\t\tthis.x +': '+ this.y + conf._formatLabelsAppendix;","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{","\t\t\t\t\ttitle: {text: conf.yAxisTitle}","\t\t\t\t}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}],","\t\t\t\tplotOptions: conf.plotOptions","\t\t\t}","\t\t};","\t\t","\t\treturn chart;\t","\t},","\t","\t/* ####################################################################################################################################################################### */","\t","\t/* ============================================================================================================================== */","\t/* This Section is entirely for Configuring THROUGHPUT metrics */","\t/* ============================================================================================================================== */","\t","\t_configureThroughputMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){","\t\t","\t\t//1. Create the message panel container for showing the cumulative data.","\t\tthis.currThroughputMessage = '<div style=\"text-indent: 1em;\"> <b>Current</b> Throughput is : <font size=\"3\" color=\"Black\"><b>' + this.currThroughputValue + '</b></font></div>';","\t    this.prevThroughputMessage = '<div style=\"text-indent: 5em;\"> Previous Throughput is : <font size=\"2\" color=\"Black\"><b>' + this.prevThroughputValue + '</b></font></div>';","\t\tvar throughtputContainer = this._createMetricsContainer('throughput', this.currThroughputMessage, this.prevThroughputMessage);","\t\t","\t\t","\t\t//2. Create the throughput graph.","\t\tthis._processThroughputDataForGraph();","\t\tvar throughtputGraphContainer = this._createThroughputGraphContainer(this.throughputChart);","\t\t","\t\t//3. cretae the throuput data grid.","\t\tvar pastRangeThroghtputGridTitle = 'View Throughput Data';","\t    var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore, 'throughputGrid');","\t\t","\t\t//4. cretae the infopanel to add all the above components.","\t\tvar widthValue = hasGraph? 750 : 450;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","        \tautoScroll: true,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 500,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            items: [throughtputContainer, throughtputGraphContainer]","        });","\t\t","\t\t//5. add the nfopanel to the appropriate app container.","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_processThroughputDataForGraph: function(){","\t    var that = this;","\t\tthis.groupedSeries = [];","\t\t","\t\t//initialize the groupseries","\t    Ext.Array.each(that.cycleTimeCategoryNames, function(catName) {","\t        that.groupedSeries.push({name: catName, data:[], stack: 'qSizes'});","\t    });","\t    ","\t    that.groupedSeries.push({name: 'N/A', data: [], stack: 'qSizes'});","\t    ","\t    this.chartData = {","\t\t\ttotalCount: 0,","\t\t\tmonths: {},","\t\t\tmonthCount: 0,","\t\t\tcategories: []","\t\t};\t","\t\t","\t\t    ","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t    that._buildThroughputChartData(record);","\t\t});","\t\t","\t\tthis._initAndDrawThroughputCharts(this.chartData);","\t},","\t","\t_buildThroughputChartData: function(record){","\t    var chartData = this.chartData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTimeCat = record.get(\"CycleTimeCategory\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    if(typeof chartData.months[recMonthNameCat] === \"undefined\"){","\t        chartData.months[recMonthNameCat] = {count: 0, monthNum: 0, cycletimes: {}, userStories: []};","\t        chartData.categories.push(recMonthNameCat);","\t        ","\t        for(var i=0; i<this.groupedSeries.length; ++i){","\t            this.groupedSeries[i].data.push(0); //add 0 for each month","\t        }","\t        ","\t        chartData.monthCount++;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].userStories.push(record);","\t    if(typeof chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] === 'undefined'){","\t        chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] =0;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat]++;","\t    chartData.months[recMonthNameCat].count++;","\t    chartData.totalCount++;","\t  ","\t    for(var s=0; s<this.groupedSeries.length; ++s){","\t        if(recCycleTimeCat === this.groupedSeries[s].name){","\t            this.groupedSeries[s].data[(chartData.monthCount -1)] = chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat];","\t        }","\t    }","\t   ","\t   this.chartData = chartData;","\t},","\t","\t//pre init for the charts ","\t_initAndDrawThroughputCharts: function(inputData) {\t\t\t\t\t\t\t\t\t\t\t\t","\t\tif (inputData.totalCount === 0) {","\t\t\treturn;","\t\t}\t\t\t\t\t\t","\t\t\t\t\t","\t\tvar throughput = [], i, qCount = 0, currTotalCount = 0, avgTotals = [], monthAVGs = [];","\t\t\t\t\t\t","\t\tfor (i in inputData.months) {\t\t\t","\t\t\tthroughput.push(inputData.months[i].count);","\t\t\tcurrTotalCount += inputData.months[i].count;","\t\t\tqCount++;","\t\t\t\t\t","\t\t\tavgTotals.push(Math.round(currTotalCount / qCount, 2));","\t\t}","\t\t\t\t\t","\t\tfor (i = 0; i < inputData.monthCount; ++i) {","\t\t\tmonthAVGs.push(Math.round(inputData.totalCount / inputData.monthCount, 2));","\t\t}","\t","\t\t//Finalize series","\t\tthis.groupedSeries.unshift({name: 'Throughput', data: throughput});","\t\tthis.groupedSeries.push({type: 'spline',name: 'Moving Average', data: avgTotals, color: 'blue', marker: {lineWidth: 1, fillColor: 'red'}});\t\t\t\t","\t\tthis.groupedSeries.push({type: 'spline',name: 'Average / Month', data: monthAVGs, color: 'purple', marker: {lineWidth: 1, fillColor: 'red'}});","\t\tthis.groupedSeries.push({name: 'Total UserStories: ' + inputData.totalCount, color: '#fff', stack:'blank'});","\t\t\t\t","\t\tthis._drawThroughputVerticalBarChart(inputData.categories, this.groupedSeries);\t\t\t","\t},","\t","\t// Configures and displays a horizontal bar chart","\t_drawThroughputVerticalBarChart: function(categories, data) {\t","\t\tvar conf = {","\t\t\tid: 'verticalBars',","\t\t\ttargetContainer: '#defaultChartContainer',","\t\t\tseries: data,\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'Throughput by Months',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Count'\t\t\t\t\t\t\t\t\t\t\t\t","\t\t};\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t","\t\tthis._drawThroughputBarChart(conf);","\t},\t\t\t\t\t\t\t\t","\t","\t//Draws and displays the bar chart ","\t_drawThroughputBarChart: function (conf) {\t\t\t\t\t","\t\tthis.throughputChart = Ext.create('Rally.ui.chart.Chart',{","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\tchartData: {series: conf.series},\t\t\t\t\t\t\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tplotOptions: {","\t\t\t\t\tcolumn: {","\t\t\t\t\t\tstacking: 'normal', ","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tpoint: {","\t\t\t\t\t\t\tevents: {","\t\t\t\t\t\t\t\tclick: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t//Need to implement","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}\t\t\t\t\t\t\t\t\t","\t\t\t\t},","\t\t\t\tchart: {plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false, type: conf.chartType},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {align: 'right', verticalAlign: 'top', x: 0, y: 100,layout: 'vertical'},","\t\t\t\ttitle: {text: conf.chartTitle},","\t\t\t\ttooltip: {","\t\t\t\t\tformatter: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name + ' | ' + this.x + '</b><br/>'+","\t\t\t\t\t\t\t'<b>'+ this.y + '</b> User Stories<br/><i>(Click to view User Stories)</i>';","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{title: {text: conf.yAxisTitle}}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}]","\t\t\t}","\t\t});","\t},\t\t","\t","\t_createThroughputGraphContainer: function(throughputChart){","\t\t","\t\tvar graphContainer = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultChartContainer', ","\t\t\t    id: 'defaultChartContainer',","\t            layout: {","\t                type: 'vbox',","\t                align: 'stretch',","\t                padding: 5","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [throughputChart]","\t        });","\t     ","\t    return graphContainer;","\t},","\t","\t_createThroughputDataGrid: function(title, dataStore, gridId){","\t\t","\t    var grid = Ext.create('Rally.ui.grid.Grid', {","\t    \tid: gridId,","\t        title: title,","            store: dataStore,","            bodyBorder: true,","            columnCfgs: [","                {","                   text: 'Formatted ID', dataIndex: 'FormattedID', width: 100","                },","                {","                    text: 'Name', dataIndex: 'Name', width: 500","                },","                {","                    text: 'Accepted Date', dataIndex: 'AcceptedDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'InProgress Date', dataIndex: 'InProgressDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'Owner', dataIndex: 'Owner', flex: 1, emptyCellText: 'No Owner',","                    renderer: function(value){","                        if(value && value._refObjectName)","                            return value._refObjectName;","                    }","                },","                {","                    text: 'Tags', dataIndex: 'Tags', flex: 1, emptyCellText: 'No Tags',","                    renderer: function(value){","                        if(value && value.Name)","                            return value.Name;","                    }","                },","                {","                    text: 'CycleTime', dataIndex: 'CycleTime', flex: 1","                },","                {","                    text: 'CycleTime Category', dataIndex: 'CycleTimeCategory', flex: 1","                },","             ]","        });","        ","        return grid;","\t},","\t","  /* ####################################################################################################################################################################### */","  ","  /* ============================================================================================================================== */","  /* This Section is entirely for Configuring SLA & WIP LIMIT metrics */","  /* ============================================================================================================================== */","  ","    _createDataStoreForSLAAndWipLimit: function(){","    \tvar me = this;","    \tthis._initializingForWipSLAControls();","    \tthis.loadStoriesAndSnapshots().then(Ext.bind(function(data){","            ","            me.currWipLimitMessage = '<div style=\"text-indent: 1em;\"><b>Current</b> WIP is : <font size=\"3\" color=\"Black\"><b>[WIP]</b></font></div>';","\t\t\tme.preWipLimitMessage = '<div style=\"text-indent: 5em;\">Previous WIP is : <font size=\"2\" color=\"Black\"><b>[WIP]</b></font></div>';","\t\t    var wipLimitContainer = me._createMetricsContainer('wipLimit', me.currWipLimitMessage, me.preWipLimitMessage);","\t\t\tvar pastRangeWipLimitDataGrid = me.getDurationGrid(data.kanbanDurationStore, 'c_KanbanState', 'Durations by Kanban-State');","\t\t    me._configureMetricsContainer('panel3', 'WIP Limit', wipLimitContainer, 'wipContainer', 'WipLimitSLAReport', pastRangeWipLimitDataGrid, false);","\t\t        ","\t\t    me.currSLALimitMessage = '<div style=\"text-indent: 1em;\"><b>Current</b> SLA is : <font size=\"3\" color=\"Black\"><b>'+ me.getTeamSLA() + '</b> days</font></div>';","\t\t    var slaLimitContainer = me._createSLAMetricsContainer('slaLimit', me.currSLALimitMessage);","\t\t    var overSLAGrid = me.getStoryGrid('overSLAGrid', data.overSLAStore, 'Stories &gt; SLA limit (' + me.getTeamSLA() + ' days)', 'left');","            var underSLAGrid = me.getStoryGrid('underSLAGrid', data.underSLAStore, 'Stories &lt; SLA Limit  (' + me.getTeamSLA() + ' days)', 'left');","\t\t    me._configureSLAMetricsContainer('panel4', 'SLA Limit', slaLimitContainer, 'slaContainer', 'WipLimitSLAReport', overSLAGrid, underSLAGrid, true);","        }));","    },","    ","    _initializingForWipSLAControls: function(){","\t    //initiatilizing for SLA & Wip Limit","\t    this.defaultTeamSLA = 10;","        ","        if (this.kanbanDurationGrid) { //Destroy grids","            this.kanbanDurationGrid.destroy();","            this.overSLAGrid.destroy();","            this.underSLAGrid.destroy();","        }","        ","        if (!this.isTeamSLASet()) {","           this.info += '<div id=\"appHint\">Please set a value for the Team SLA in the App-Settings.<br/>A default of <b>' + this.defaultTeamSLA + ' days</b> is used.</div>'; ","        } ","        ","        this.dataStore = {","                kanbanStateDurations: {},","                kanbanStates: {}","            };","        ","        Ext.getCmp('infoContainer').update(this.info);","    },","    ","    isTeamSLASet: function() {","        return _.parseInt(this.getSetting('teamSLA')) > 0;","    },","    ","    loadStoriesAndSnapshots: function() {","\t\tvar currDate = new Date();","\t\tvar prevDate = currDate.getDate() - 30;","\t\t","        var start =  Ext.Date.format(currDate.getDate(), \"Y-m-d\");","        var end = Ext.Date.format(this.currEndRallyDateFilter, \"Y-m-d\");","        ","        var me = this;","        var snapshots = this.getSnapshots({","            fetch: ['ObjectID'],","            findConfig: {","                \"_TypeHierarchy\": \"HierarchicalRequirement\",","                \"_PreviousValues.ScheduleState\": {","                    \"$exists\": true,","                    \"$lt\": \"Accepted\"","                },","                \"ScheduleState\": {","                    \"$gte\": \"Accepted\"","                },","                \"_ValidFrom\": {","                    \"$lt\": \"2015-01-31TZ\",","                    \"$gte\": \"2014-12-01TZ\"","                },","                \"Project\" : this.context.getProject().ObjectID","            }","        });","        ","        return Deft.Promise.all([snapshots]).then(function(results){","            var ids = [];","             _.each(results[0], function(r) {","                if (ids.indexOf(r.ObjectID <0)) {","                      ids.push(r.ObjectID);","                }","            });","            return me.loadStories(ids);","        });","    },","    ","     getSnapshots: function(config) {","        var workspaceOid = this.context.getWorkspace().ObjectID;","        var deferred = new Deft.Deferred();","        Ext.create('Rally.data.lookback.SnapshotStore', _.merge({","            // TODO - account for > 20k results","            autoLoad: true,","            context: {","                workspace: '/workspace/' + workspaceOid","            },","            listeners: {","                load: function(store, data, success) {","                    deferred.resolve(_.pluck(data, 'raw'));","                }","            }","        }, config));","","        return deferred.getPromise();","    },","    ","    loadStories: function(ids) {","        var me = Rally.getApp();","        var snapshots = me.getSnapshots({","            fetch: ['_ValidFrom', '_ValidTo', 'c_KanbanState', 'ScheduleState', '_UnformattedID', 'Name'],","            hydrate: ['ScheduleState'],","            findConfig: {","                \"ObjectID\": {","                    \"$in\": ids","                },","                 \"c_KanbanState\" : {","                  \"$exists\": true  ","                }","            }","        });","        ","        return Deft.Promise.all([ snapshots]).then(function(result) {","            var stories = result[0], workdays, validTo;","            var results = {stories: {}, totalAcceptedStories:0, totalInProgressWorkDays: 0};","             ","            _.each(stories, function(snapshot) {","                snapshot.cycleTime = snapshot.cycleTime || 0;","                snapshot.FormattedID = snapshot.FormattedID || \"US\" + snapshot._UnformattedID;","                snapshot._ref = snapshot._ref || '/userstory/' + snapshot.ObjectID;","        ","                me.initStates(snapshot);","                validTo = (snapshot._ValidTo.indexOf('9999') >= 0) ? NOW : snapshot._ValidTo;","                workdays = me.getWorkingDays(snapshot._ValidFrom, validTo);","","               if (_.isUndefined(results.stories[snapshot.ObjectID])) {","                    results.stories[snapshot.ObjectID] = snapshot;","                    results.totalAcceptedStories++;","                    me.dataStore.kanbanStates[snapshot.ObjectID] = [];","                }","                ","                if (snapshot.ScheduleState === 'In-Progress') {","                    results.stories[snapshot.ObjectID].cycleTime += workdays;","                    results.totalInProgressWorkDays+= workdays;","                }","                ","                me.updateStates(snapshot, workdays);","            });","            ","            results.avgCycleTime = Math.ceil(results.totalInProgressWorkDays / results.totalAcceptedStories);","            results.kanbanDurationStore = me.createCustomStore(_.values(me.dataStore.kanbanStateDurations));","           ","            return me.getOutliers(results);","        });","    },","    ","    initStates: function(snapshot) {","        this.dataStore.kanbanStateDurations[snapshot.c_KanbanState]  = this.dataStore.kanbanStateDurations[snapshot.c_KanbanState] || {storyCount:0, workdays: 0, snapshot: snapshot};","    },","    ","     getWorkingDays: function(startDate, endDate) {","\t\tvar currentDate = new Date(startDate), result = 0, weekDay, difference;","\t\tvar minutes = 1000 * 60;","        var hours = minutes * 60;","        var days = hours * 24;","        endDate = new Date(endDate);","","\t\twhile (currentDate <= endDate)  {","            difference = (endDate.getTime() / days) - (currentDate.getTime() / days);","            if (difference > 0) { //only count days when difference is >= 1 day","                weekDay = currentDate.getDay();","                if (weekDay !== 0 && weekDay !== 6) {","                    result += difference > 1 ? 1 : difference;","                }","            }","\t\t\tcurrentDate.setDate(currentDate.getDate()+1); ","\t\t}","\t\treturn result;","\t},","\t","\tupdateStates: function(snapshot, workdays) {","        if (this.dataStore.kanbanStates[snapshot.ObjectID].indexOf(snapshot.c_KanbanState) < 0) {","            this.dataStore.kanbanStates[snapshot.ObjectID].push(snapshot.c_KanbanState);","            this.dataStore.kanbanStateDurations[snapshot.c_KanbanState].storyCount++;","        }","        ","        this.dataStore.kanbanStateDurations[snapshot.c_KanbanState].workdays += workdays;","    },","    ","    createCustomStore: function(data) {","        return Ext.create('Rally.data.custom.Store', {data: data});","    },","    ","    getOutliers: function(data) {","        var teamSLA = this.getTeamSLA();","        var overSLAStories = [], underSLAStories = [];","        ","        _.each(data.stories, function(story, ObjectID){","            if  (story.cycleTime > teamSLA) {","                overSLAStories.push(story);","            }","            if  (story.cycleTime <= teamSLA) {","                underSLAStories.push(story);","            }","        });","        ","        data.overSLAStore = Rally.getApp().createCustomStore(_.sortBy(overSLAStories, 'cycleTime').reverse());","        data.underSLAStore = Rally.getApp().createCustomStore(_.sortBy(underSLAStories, 'cycleTime').reverse());","        ","        return data;","    },","    ","    getDurationGrid: function(store, state, title) {","        return Ext.create('Rally.ui.grid.Grid', {","            title: title,","            store: store,","            showPagingToolbar: false,","            showRowActionsColumn: false,","            columnCfgs: [","                {text: 'State', width: 150, renderer: function(value, meta, record){return record.get('snapshot')[state];}},","                {text: 'AVG time', renderer: function(value, meta, record) {return Math.ceil(record.get('workdays') / record.get('storyCount')) + ' days';}},","                {text: '# Stories', dataIndex: 'storyCount'}","            ]","        }); ","    },","    ","    getStoryGrid: function(gridId, store, title, css) {","        return Ext.create('Rally.ui.grid.Grid', {","        \tid: gridId,","        \tbodyBorder: true,","        \tautoScroll: true,","        \tborder: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","        \tshowPagingToolbar: false,","            showRowActionsColumn: false,","            title: title,","            store: store,","            width: 350,","            columnCfgs: [","                {text: 'Formatted-ID', dataIndex: 'FormattedID',  xtype: 'templatecolumn', tpl: Ext.create('Rally.ui.renderer.template.FormattedIDTemplate')},","                {text: 'Cycle-Time', renderer: function(value, meta, record){return record.get('cycleTime').toFixed(1) + ' days';}}","            ],","            storeConfig: {","                 model: 'userstory'","            }","        });","    },","    ","    getTeamSLA: function() {","        return this.isTeamSLASet() ? this.getSetting('teamSLA') : this.defaultTeamSLA;","    },","    ","    _configureSLAMetricsContainer: function(panelId, titleName, slaLimitContainer, containerId, reportId, outRangeDataGrid, inRangeDataGrid, hasGraph){","\t\tvar widthValue = hasGraph? 750 : 450;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar myGridContainer = Ext.create('Ext.container.Container', {","         \tid: 'storyGridContainer',","         \tautoScroll: true,","         \theight: 200,","            layout: {","                type: 'hbox',","                align: 'fit',","                padding: 10","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [outRangeDataGrid, inRangeDataGrid]","        });","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","        \tautoScroll: true,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 300,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            items: [slaLimitContainer, myGridContainer]","        });","        ","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_createSLAMetricsContainer: function(containerId, currMessage){","\t\t","\t\tvar myContainer = Ext.create('Ext.container.Container', {","         \tid: containerId,","         \tautoScroll: true,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currMessage","            }]","        });","        ","        return myContainer;","\t},","    ","    /* ####################################################################################################################################################################### */","    ","\t_createMetricsContainer: function(containerId, currMessage, prevMessage){","\t\t","\t\tvar myContainer = Ext.create('Ext.container.Container', {","         \tid: containerId,","         \tautoScroll: true,","            layout: {","                type: 'hbox',","                align: 'fit',","                padding: 5","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currMessage","            },","            {","                xtype: 'label',","                html: prevMessage","            }]","        });","        ","        return myContainer;","\t},","\t","\t_configureMetricsContainer: function(panelId, titleName, throughtputContainer, containerId, reportId, pastRangeDataGrid, hasGraph){","\t\tvar widthValue = hasGraph? 750 : 500;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","        \tautoScroll: true,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 300,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            items: [throughtputContainer, pastRangeDataGrid]","        });","        ","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t//Note: Need to refactor to re-use the same methord for Pie or Bar graph.","\t_createCycleTimePieContainer: function(cycleTimePie, bySizePie){","\t\t","\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultPieChartContainer', ","\t\t\t    id: 'defaultPieChartContainer',","\t            layout: {","\t                type: 'hbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [cycleTimePie, bySizePie]","\t        });","\t},","\t","","\t","\t/* Configures and displays a pie chart*/","\t_drawPie: function (id, name, text, data, extraData) {\t","\t\t","\t\tvar chart = {","\t\t\txtype: 'rallychart',","\t\t\tid: id,","\t\t\theight: 400,","\t\t\twidth: 400,\t","\t\t\tstyle: {float: 'left'},","\t\t\tchartData: {","\t\t\t\tseries: [{","\t\t\t\t\ttype: 'pie',","\t\t\t\t\tname: name,","\t\t\t\t\tdata: data","\t\t\t\t}]","\t\t\t},","\t\t\tchartConfig: {\t\t\t\t\t\t\t","\t\t\t\tchart: {","\t\t\t\t\tplotBackgroundColor: null,","\t\t\t\t\tplotBorderWidth: null,","\t\t\t\t\tplotShadow: false,","\t\t\t\t\ttype: 'pie'","\t\t\t\t},","\t\t\t\txAxis: {},//must specify empty x-axis due to bug","\t\t\t\ttitle: {","\t\t\t\t\ttext: text","\t\t\t\t},","\t\t\t\ttooltip: {","\t\t\t\t\tpointFormat: '{series.name}: <b>{point.y}</b>',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\tpercentageDecimals: 1,","\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\treturn _formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t},","\t\t\t\tplotOptions: {","\t\t\t\t\tpie: {","\t\t\t\t\t\tallowPointSelect: true,","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tdataLabels: {","\t\t\t\t\t\t\tenabled: true,","\t\t\t\t\t\t\tcolor: '#000000',","\t\t\t\t\t\t\tconnectorColor: '#000000',\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\treturn Rally.getApp()._formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t};","\t\t\t\t\t","\t\treturn chart;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t},","\t","\t/* formats lables for charts */","\t_formatLabels: function(id, that, extraData) {","\t\tswitch (id) {","\t\t\tcase 'cycleTimePie':\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\treturn '<b>' + that.point.name +'</b><br/>AVG Cycle Time: '+ that.y;","\t\t\tcase 'bySizePie' :","\t\t\t\treturn '<b>'+ that.point.name +'</b><br/>Count: '+ that.y; ","\t\t}\t\t\t\t","\t}","\t","});"]},{"start":{"row":0,"column":0},"end":{"row":1292,"column":3},"action":"insert","lines":["var types = Ext.data.Types; // allow shorthand type access","Ext.define('ThroughputDataModel', {","\textend: 'Ext.data.Model',","\tfields: [","                {name: 'FormattedID', mapping: 'FormattedID', type: types.STRING},","                {name: 'Name', mapping: 'Name', type: types.STRING},","                {name: 'AcceptedDate', mapping: 'AcceptedDate', type: types.DATE },","                {name: 'InProgressDate', mapping: 'InProgressDate', type: types.DATE },","                {name: 'Tags', mapping: 'Tags', type: types.STRING},","                {name: 'Owner', mapping: 'Owner', type: types.OBJECT},","                {name: 'CycleTime', mapping: 'CycleTime', type: types.FLOAT},","                {name: 'CycleTimeCategory', mapping: 'CycleTimeCategory', type: types.STRING}","            ]","});","","var NOW = new Date();","","Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    autoScroll: true,","    defaultTeamSLA: 10,","    getSettingsFields: function() {","        return [","            {","                name: 'teamSLA',","                fieldLabel: 'Team SLA value (days)',","                xtype: 'rallynumberfield'","            },","            {","                name: 'excludeDefects',","                xtype: 'rallycheckboxfield',","\t\t        fieldLabel: 'Exclude Defects',","\t\t        value: false","            },","            {","            \tname: 'excludeWeekends',","\t\t        xtype: 'rallycheckboxfield',","\t\t        fieldLabel: 'Exclude Weekends',","\t\t        value: false","\t\t    }","        ];","    },","    items:[","    \t{","            xtype: 'container', id: 'infoContainer', itemId: 'infoContainer', border: 0","        },","    \t{xtype: 'container', itemId: 'throughputCycleTimeReport', id: 'throughputCycleTimeReport', ","            items: [\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t{xtype: 'container', itemId: 'throughputContainer', id: 'throughputContainer', title: 'Throughput'},","\t\t\t\t{xtype: 'container', itemId: 'cycleTimeContainer', id: 'cycleTimeContainer', title: 'Cycle-Time'}","\t\t\t],","\t\t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:5","\t\t    }","\t\t},\t","    \t{xtype: 'container', itemId: 'WipLimitSLAReport', id: 'WipLimitSLAReport', ","            items: [\t","            \t{xtype: 'container', itemId: 'slaContainer', id: 'slaContainer', title: 'SLA Counter'},","            \t{xtype: 'container', itemId: 'wipContainer', id: 'wipContainer', title: 'WIP Limit'}","\t\t\t],","    \t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:5","\t\t    }","    \t}","\t],","\t","    layout:{","        type:'vbox',","        align:'stretch',","        padding:5","    },","    ","    cycleTimeCategoryNames: [\"0-5 days\", \"6-10 days\", \"11-15 days\", \"16-20 days\", \"21-25 days\", \"26-30 days\", \"31+ days\"],","    cycleTimeDistRange: 5,","\t","    launch: function() {","    \t","    \tthis.activeViews = ['throughputCycleTimeReport','WipLimitSLAReport'];","    \tthis._init();","        this.currThroughputMessage = '<div>The Throughput for current period (between Start Date & End Date) is : <b> 10 </b></div>';","\t    this.prevThroughputMessage =  '<div>The Throughput for Previous period (between Start Date & End Date) is : <b> 10 </b></div>';","\t    ","\t    this._determineDateRangeForKanbanMetrics();","\t    ","\t    this._initializingInfoForKanbanMetrics();","        ","        this._createDataStoreForKanbanMetrics();","    },","    ","     /* Initializes the app */","\t_init: function() {\t","\t\tvar that = this;","\t\t//dynamicItems hold created ui items, which needs to be destroyed before re-drawing","\t\tif (typeof this.dynamicItems === \"undefined\"){","\t\t\tthis.dynamicItems = {};","\t\t}","\t\t","\t\tExt.Array.each(this.activeViews, function(viewName){","\t\t\tif (typeof that.dynamicItems[viewName] === \"undefined\"){","\t\t\t\tthat.dynamicItems[viewName] = {};","\t\t\t}","\t\t\telse {","\t\t\t\tvar item;","\t\t","\t\t\t\tfor (item in that.dynamicItems[viewName]) {","\t\t\t\t\tthat.dynamicItems[viewName][item].destroy();","\t\t\t\t}","\t\t\t}\t","\t\t});","\t},","\t","\t/* ============================================================================================================================== */","\t/* This Section is entirely for determine the Kanban Metrics Datastore */","\t/* ============================================================================================================================== */","\t","\t_determineDateRangeForKanbanMetrics: function(){","        this.curr_End_Date = new Date();","        ","        //Determine a date 30 days prior to current date.","        var tmp_Curr_Date = new Date();","        tmp_Curr_Date.setDate(tmp_Curr_Date.getDate()-30);","        this.curr_Start_Date = tmp_Curr_Date;","        ","        this.currStartRallyDateFilter = this.curr_Start_Date.getFullYear() + '-' + (parseInt(this.curr_Start_Date.getMonth(), 10) + 1)  + '-' + this.curr_Start_Date.getDate();","        this.currEndRallyDateFilter = this.curr_End_Date.getFullYear() + '-' + (parseInt(this.curr_End_Date.getMonth(), 10) + 1)  + '-' + this.curr_End_Date.getDate();","        ","        var tmp_Prev_Date = new Date();","        tmp_Prev_Date.setDate(tmp_Prev_Date.getDate()-60);","        this.prev_Start_Date = tmp_Prev_Date;","        this.prev_End_Date = Ext.Date.add(this.curr_Start_Date, Ext.Date.DAY, -1);","        ","        this.prevStartRallyDateFilter = this.prev_Start_Date.getFullYear() + '-' + (parseInt(this.prev_Start_Date.getMonth(), 10)+1) + '-' + this.prev_Start_Date.getDate();","        this.prevEndRallyDateFilter = this.prev_End_Date.getFullYear() + '-' + (parseInt(this.prev_End_Date.getMonth(), 10)+1) + '-' + this.prev_End_Date.getDate();","        ","        this.past_Date_SixMonth = Ext.Date.add(this.curr_Start_Date, Ext.Date.MONTH, -5);","        this.pastDateSixMonthFilter = this.past_Date_SixMonth.getFullYear() + '-' + (parseInt(this.past_Date_SixMonth.getMonth(), 10)+1) + '-' + this.past_Date_SixMonth.getDate();","    }, ","    ","    _initializingInfoForKanbanMetrics: function(){","\t    //initiatilizing for SLA & Wip Limit","\t   this.info = '<div><table style=\"width:100%\"><tr>' + ","\t    \t\t\t\t  '<td style=\"width: 60%;border-collapse: collapse;padding: 5px;text-align: left;\">The <i><b>Current</b></i> period is between <b>' + this.currStartRallyDateFilter + '</b> and <b>'+ this.currEndRallyDateFilter + '</b>.'+","\t    \t\t\t\t  '&nbsp;&nbsp;&nbsp;&nbsp; The <i><b>Previous</b></i> period is between <b>' + this.prevStartRallyDateFilter + '</b> and <b>'+ this.prevEndRallyDateFilter + '</b>.</td>'+","\t    \t\t\t\t  '<td style=\"colspan: 2;border-collapse: collapse;padding: 5px;text-align: right;\"><a href=\"https://docs.google.com/a/perceptivesoftware.com/forms/d/1rnekZgmU2TXFLmp6ZnA9r_GVJ_Jtxl3pmD-Ue6d9d_I/viewform\" target=\"_blank\">'+","\t    \t\t\t\t  '<img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTBcWuf-1wP77kte37enC-cO7QdgPVY0Xv_nsbIiYEWvdVoEhUP\" alt=\"Feedback\" style=\"width:75px;height:15px;border:0\"></a></td>' +","\t    \t\t\t\t  '</tr></table></div>';","\t","        ","        Ext.getCmp('infoContainer').update(this.info);","    },","    ","     _createDataStoreForKanbanMetrics: function(){","        //Determine the data filter for store.","        this.filter = Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '>=',","\t\t\tvalue: this.pastDateSixMonthFilter","\t\t}).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '<=',","\t\t\tvalue: this.currEndRallyDateFilter","\t\t})).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'ScheduleState',","\t\t\toperator: '=',","\t\t\tvalue: 'Accepted'","\t\t}));","\t\t","\t\t//Record all columns that needs to be fetched.","\t\tthis.fetchDataColumns = ['FormattedID', 'Name', 'AcceptedDate', 'InProgressDate', 'Tags', 'Owner', 'c_KanbanState','ScheduleState'];","\t\t","\t\t//configure the data store context.","\t\tthis.contextConfig = {","            workspace: this.getContext().getWorkspace()._Ref,","            project: this.getContext().getProject()._ref,","            projectScopeUp: false,","            projectScopeDown: true,","            limit: 'infinity'","        };","\t   ","\t   //set the sorter config for data store.","\t   this.sorterConfig = [{","                        \tproperty: 'AcceptedDate',","                        \tdirection: 'ASC'","                        },","                        {","                            property: 'FormattedID',","                            direction: 'ASC'","                        }];","                        ","\t\tthis._createUserStoryDataStore();","    },","    ","     _createUserStoryDataStore: function(){","\t    var myUserStoryStore = Ext.create('Rally.data.wsapi.Store', {","\t        model: 'HierarchicalRequirement',","\t        fetch: this.fetchDataColumns,","\t        autoLoad: true,","\t        context: this.contextConfig,","\t        filters: this.filter,","\t        sorters: this.sorterConfig,","\t        listeners: {","\t            load: function(store, data, success){","\t            \tthis.currUserStoriesColl = [];","\t                this.prevUserStoriesColl = [];","\t                this.pastRangeUserStoriesColl = [];","\t                var that = this;","\t               ","\t                Ext.Array.each(data, function(userStory) {","\t                    if(userStory && userStory.get('AcceptedDate')){","\t                    \tif(userStory.get('AcceptedDate') >= that.curr_Start_Date){","\t                            that.currUserStoriesColl.push(that._createKanbanmetRicsData(userStory));","\t                        }if(userStory.get('AcceptedDate') < that.curr_Start_Date && userStory.get('AcceptedDate') >= that.prev_Start_Date){","\t                            that.prevUserStoriesColl.push(that._createKanbanmetRicsData(userStory));","\t                        }","\t                        that.pastRangeUserStoriesColl.push(that._createKanbanmetRicsData(userStory));","\t                    }","\t                });","\t                ","\t                this._createDefectStore();","\t            },","\t            scope: this","\t        }","\t  });","\t},","\t","\t_createKanbanmetRicsData: function(rallyObject){","\t    var cycleTime = 0;","\t    var cycleTimeCat = \"N/A\";","\t    //Determine the cycle time for each object.","\t    if(rallyObject.get('AcceptedDate') && rallyObject.get('InProgressDate')){","\t        cycleTime = Rally.util.DateTime.getDifference(rallyObject.get('AcceptedDate'), rallyObject.get('InProgressDate'), 'day');","\t    }","\t    ","\t    for(var i =0; i<this.cycleTimeCategoryNames.length; i++){","\t        var lowerRange = i*this.cycleTimeDistRange, upperRange = lowerRange + 5;","\t        ","\t        if((cycleTime >lowerRange && cycleTime <= upperRange) || (lowerRange === 30 && cycleTime > lowerRange))","\t            cycleTimeCat = this.cycleTimeCategoryNames[i];","\t    }","\t    ","\t    //Generate the node for throghput data.","\t    var data = Ext.create('ThroughputDataModel', {","\t        FormattedID: rallyObject.get('FormattedID'), ","\t        Name: rallyObject.get('Name'), ","\t        AcceptedDate: rallyObject.get('AcceptedDate'), ","\t        InProgressDate: rallyObject.get('InProgressDate'), ","\t        Tags: rallyObject.get('Tags'), ","\t        Owner: rallyObject.get('Owner'),","\t        CycleTime: cycleTime,","\t        CycleTimeCategory: cycleTimeCat","\t    });","\t    ","\t    return data;","\t},","\t","\t_createDefectStore: function(){","\t    var that = this;","\t    var myDefectStore = Ext.create('Rally.data.wsapi.Store', {","            model: 'Defect',","            fetch: this.fetchDataColumns,","            autoLoad: true,","            context: this.contextConfig,","            filters: this.filter,","            sorters: this.sorterConfig,","            listeners: {","                load: function(store, data, success){","                    Ext.Array.each(data, function(defect){","                        if(defect && defect.get('AcceptedDate')){","                        \tif(defect.get('AcceptedDate') >= that.curr_Start_Date){","                            \tthat._insertRecordInOrder(that.currUserStoriesColl, that._createKanbanmetRicsData(defect));","                            }if(defect.get('AcceptedDate') < that.curr_Start_Date && defect.get('AcceptedDate') >= that.prev_Start_Date){","                                that._insertRecordInOrder(that.prevUserStoriesColl, that._createKanbanmetRicsData(defect));","                            }","                            that._insertRecordInOrder(that.pastRangeUserStoriesColl, that._createKanbanmetRicsData(defect));","                        }","                           ","                    });","                    ","                   this.currThroughputValue = this.currUserStoriesColl.length;","\t               this.prevThroughputValue = this.prevUserStoriesColl.length;","\t               ","\t               this.currAvgCycleTimeValue = this._determineAvgCycleTime(this.currUserStoriesColl);","\t               this.prevAvgCycleTimeValue = this._determineAvgCycleTime(this.prevUserStoriesColl);","\t               ","\t               this._determineWIPLimit();","\t                ","\t               this.currThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.currUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.prevThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.prevUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.pastRangeThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        model: 'ThroughputDataModel',","                        data: this.pastRangeUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this._createKanbanMetricsMessagePanel();","                },","                scope: this","            }","\t  });","\t},","\t","\t_determineAvgCycleTime: function(dataColl){","\t\tvar totalCycleTime = 0;","\t\tvar avgCycleTime = 0;","\t\tvar count = dataColl.length;","\t\tExt.Array.each(dataColl, function(data) {","\t\t    var cycleTime = data.get(\"CycleTime\");","\t\t    ","\t\t    if(cycleTime > 0){","\t\t    \ttotalCycleTime= totalCycleTime + cycleTime; //Math.ceil(pieData.months[recMonthNameCat].totalCycleTime/ pieData.months[recMonthNameCat].count);","\t\t    }","\t\t}); ","\t\t","\t\tavgCycleTime = count > 0 ? Math.ceil(totalCycleTime / count) : 0;","\t\t","\t\treturn avgCycleTime;","\t},","\t","\t_determineWIPLimit: function(){","\t\t//Determining avg. WIP Limit using Little's Formula","\t\t//which states: L = N*W where N is the rate of arrival and","\t\t//W is the total time taken for entire process.","\t\t","\t\tvar currDayDiff = Rally.util.DateTime.getDifference(this.curr_End_Date, this.curr_Start_Date, 'day');","\t\tthis.currWIPLimitValue = Math.ceil((this.currThroughputValue/currDayDiff)*this.currAvgCycleTimeValue);","\t\t","\t\tvar prevDayDiff = Rally.util.DateTime.getDifference(this.prev_End_Date, this.prev_Start_Date, 'day');","\t\tthis.prevWIPLimitValue = Math.ceil((this.prevThroughputValue/prevDayDiff)*this.prevAvgCycleTimeValue);","\t},","\t","\t_insertRecordInOrder: function(dataColl, record){","\t\tvar closestRecord = record;","\t\tvar recordDate = record.get(\"AcceptedDate\");","\t\t","\t\tExt.Array.each(dataColl, function(data) {","\t\t    var dataDate = data.get(\"AcceptedDate\");","\t\t    if(dataDate && recordDate && dataDate.getMonth() === recordDate.getMonth()){","\t\t    \tif(dataDate <= recordDate)","\t\t    \t\tclosestRecord = data;","\t\t    }","\t\t});","\t\t","\t\tvar dataIndex = dataColl.indexOf(closestRecord);","\t\tif(dataIndex != -1){","\t\t\tdataColl.splice(dataIndex, 0, record);","\t\t}","\t\telse{","\t\t\tdataColl.push(record);","\t\t}","\t},","\t","\t _createKanbanMetricsMessagePanel: function(){","    \t","    \tthis._configureCycleTimeMetricsContainer('panel1', 'CycleTime', 'cycleTimeContainer', 'throughputCycleTimeReport', true);","    \t","\t    this._configureThroughputMetricsContainer('panel2', 'Throughput', 'throughputContainer', 'throughputCycleTimeReport', true);","\t    ","\t    this._createDataStoreForSLAAndWipLimit();","\t},","\t","\t/* ####################################################################################################################################################################### */","\t","\t/* ============================================================================================================================== */","\t/* This Section is entirely for Configuring CYCLETIME metrics */","\t/* ============================================================================================================================== */","\t","\t_configureCycleTimeMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){","\t\t//1. Create the message panel container for showing the cumulative data.","\t\tthis.currCycleTimeMessage = '<div style=\"text-indent: 2em;\"><b>Current</b> Avg. CycleTime is : <font size=\"2\" color=\"Black\"><b> ' + this.currAvgCycleTimeValue + ' days.</b></font></div>';","\t    this.prevCycleTimeMessage = '<div style=\"text-indent: 5em;\">Previous Avg. CycleTime is : <font size=\"1\" color=\"Black\"><b>' + this.prevAvgCycleTimeValue + ' days.</b></font></div>';","\t\tvar cycleTimeContainer = this._createMetricsContainer('Cycle Time', this.currCycleTimeMessage, this.prevCycleTimeMessage);","\t\t","\t\t","\t\t//2. Create the throughput graph.","\t\tthis._processCycleTimeDataForGraph();","\t\tvar cycleTimeGraphContainer = this.cycleTimePieOrBarGraphChart;","\t\t","\t\t//3. cretae the infopanel to add all the above components.","\t\tvar widthValue = 500;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","        \tautoScroll: true,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 500,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            items: [cycleTimeContainer, cycleTimeGraphContainer]","        });","\t\t","\t\t//5. add the nfopanel to the appropriate app container.","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_processCycleTimeDataForGraph: function(){","\t\tvar that = this;","\t\t","\t   this.pieData = {","\t   \ttotalCount: 0, ","\t   \tmonths: {},","\t   \tmonthCount: 0,","\t   \tcategories: []","\t   };","\t\t","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t\tthat._buildCycleTimeChartData(record);","\t\t});","\t\t","\t\tthis._initAndDrawCycleTimeCharts(this.pieData);","\t},","\t","\t_buildCycleTimeChartData: function(record){","\t\tvar pieData = this.pieData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTime = record.get(\"CycleTime\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    if(typeof pieData.months[recMonthNameCat] === \"undefined\"){","\t        pieData.months[recMonthNameCat] = {count: 0, avgCycleTime: 0, totalCycleTime: 0, cycletimes: []};","\t        pieData.categories.push(recMonthNameCat);","\t        ","\t        pieData.monthCount++;","\t    }","\t    ","\t    pieData.months[recMonthNameCat].cycletimes.push(recCycleTime);","\t    pieData.months[recMonthNameCat].count++;","\t    pieData.months[recMonthNameCat].totalCycleTime = pieData.months[recMonthNameCat].totalCycleTime + recCycleTime;","\t    pieData.months[recMonthNameCat].avgCycleTime = Math.ceil(pieData.months[recMonthNameCat].totalCycleTime/ pieData.months[recMonthNameCat].count);","\t    pieData.totalCount++;","\t   ","\t   this.pieData = pieData;","\t},","\t","\t_initAndDrawCycleTimeCharts: function(pieData) {\t\t\t\t","\t\tvar cycleTimeData = [], sizeData = [], categories = [];","\t\t\t\t\t","\t\tif (pieData.totalCount === 0) {","\t\t\treturn;","\t\t}","\t\t","\t\tfor (month in pieData.months){","\t\t\tcycleTimeData.push([month, pieData.months[month].avgCycleTime]);","\t\t\tsizeData.push([month, pieData.months[month].count]);","\t\t\tcategories.push(month);","\t\t}","\t\t","\t\tvar cycleTimeHorBarGraph = this._drawCycleTimeHorizontalBarChart(categories, cycleTimeData);","\t\tthis._createCycleTimeBarGraphContainer(cycleTimeHorBarGraph);","\t},","\t","\t_createCycleTimeBarGraphContainer: function(barGraph){","\t\t","\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultPieChartContainer', ","\t\t\t    id: 'defaultPieChartContainer',","\t            layout: {","\t                type: 'hbox',","\t                align: 'stretch',","\t                padding: 5","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [barGraph]","\t        });","\t},","\t","\t\t/* Configures and displays a horizontal bar chart */","\t_drawCycleTimeHorizontalBarChart: function(categories, leadTimeData) {\t","\t\tvar conf = {","\t\t\tid: 'horizontalBars',","\t\t\tseries: [{name: 'Avg. Cycle Time', data: leadTimeData}],\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'Avg. Cycle Time by Months',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Days',","\t\t\t_formatLabelsAppendix: ' days',","\t\t\tplotOptions: {","                bar: {","                    dataLabels: {","                        enabled: this.getSetting('showDataLabels')","                    }","                }","            }","\t\t};\t\t\t\t\t\t\t\t\t\t","\t\t","\t\treturn this._drawCycleTimeBarChart(conf);","\t},","\t","\t/* Draws and displays the bar chart */","\t_drawCycleTimeBarChart: function (conf) {\t\t\t\t\t","\t\t","\t\tvar chart = {","\t\t\txtype: 'rallychart',","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\twidth: 485,","\t\t\tchartData: {","\t\t\t\tseries: conf.series\t\t\t\t\t\t\t\t","\t\t\t},","\t\t\tchartColors: ['#FF3333', '#00CC00'],\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tchart: {","\t\t\t\t\tplotBackgroundColor: null,","\t\t\t\t\tplotBorderWidth: null,","\t\t\t\t\tplotShadow: false,","\t\t\t\t\ttype: conf.chartType\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {\t\t\t\t\t\t\t\t\t","\t\t\t\t\talign: 'right',","\t\t\t\t\tverticalAlign: 'top',","\t\t\t\t\tx: 0,","\t\t\t\t\ty: 100,\t\t\t\t\t\t\t\t\t","\t\t\t\t\tlayout: 'vertical'","\t\t\t\t},","\t\t\t\ttitle: {","\t\t\t\t\ttext: conf.chartTitle","\t\t\t\t},","\t\t\t\ttooltip: {","\t\t\t\t\t_formatLabels: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name +'</b><br/>'+","\t\t\t\t\t\tthis.x +': '+ this.y + conf._formatLabelsAppendix;","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{","\t\t\t\t\ttitle: {text: conf.yAxisTitle}","\t\t\t\t}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}],","\t\t\t\tplotOptions: conf.plotOptions","\t\t\t}","\t\t};","\t\t","\t\treturn chart;\t","\t},","\t","\t/* ####################################################################################################################################################################### */","\t","\t/* ============================================================================================================================== */","\t/* This Section is entirely for Configuring THROUGHPUT metrics */","\t/* ============================================================================================================================== */","\t","\t_configureThroughputMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){","\t\t","\t\t//1. Create the message panel container for showing the cumulative data.","\t\tthis.currThroughputMessage = '<div style=\"text-indent: 1em;\"> <b>Current</b> Throughput is : <font size=\"3\" color=\"Black\"><b>' + this.currThroughputValue + '</b></font></div>';","\t    this.prevThroughputMessage = '<div style=\"text-indent: 5em;\"> Previous Throughput is : <font size=\"2\" color=\"Black\"><b>' + this.prevThroughputValue + '</b></font></div>';","\t\tvar throughtputContainer = this._createMetricsContainer('throughput', this.currThroughputMessage, this.prevThroughputMessage);","\t\t","\t\t","\t\t//2. Create the throughput graph.","\t\tthis._processThroughputDataForGraph();","\t\tvar throughtputGraphContainer = this._createThroughputGraphContainer(this.throughputChart);","\t\t","\t\t//3. cretae the throuput data grid.","\t\tvar pastRangeThroghtputGridTitle = 'View Throughput Data';","\t    var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore, 'throughputGrid');","\t\t","\t\t//4. cretae the infopanel to add all the above components.","\t\tvar widthValue = hasGraph? 750 : 450;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","        \tautoScroll: true,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 500,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            items: [throughtputContainer, throughtputGraphContainer]","        });","\t\t","\t\t//5. add the nfopanel to the appropriate app container.","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_processThroughputDataForGraph: function(){","\t    var that = this;","\t\tthis.groupedSeries = [];","\t\t","\t\t//initialize the groupseries","\t    Ext.Array.each(that.cycleTimeCategoryNames, function(catName) {","\t        that.groupedSeries.push({name: catName, data:[], stack: 'qSizes'});","\t    });","\t    ","\t    that.groupedSeries.push({name: 'N/A', data: [], stack: 'qSizes'});","\t    ","\t    this.chartData = {","\t\t\ttotalCount: 0,","\t\t\tmonths: {},","\t\t\tmonthCount: 0,","\t\t\tcategories: []","\t\t};\t","\t\t","\t\t    ","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t    that._buildThroughputChartData(record);","\t\t});","\t\t","\t\tthis._initAndDrawThroughputCharts(this.chartData);","\t},","\t","\t_buildThroughputChartData: function(record){","\t    var chartData = this.chartData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTimeCat = record.get(\"CycleTimeCategory\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    if(typeof chartData.months[recMonthNameCat] === \"undefined\"){","\t        chartData.months[recMonthNameCat] = {count: 0, monthNum: 0, cycletimes: {}, userStories: []};","\t        chartData.categories.push(recMonthNameCat);","\t        ","\t        for(var i=0; i<this.groupedSeries.length; ++i){","\t            this.groupedSeries[i].data.push(0); //add 0 for each month","\t        }","\t        ","\t        chartData.monthCount++;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].userStories.push(record);","\t    if(typeof chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] === 'undefined'){","\t        chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] =0;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat]++;","\t    chartData.months[recMonthNameCat].count++;","\t    chartData.totalCount++;","\t  ","\t    for(var s=0; s<this.groupedSeries.length; ++s){","\t        if(recCycleTimeCat === this.groupedSeries[s].name){","\t            this.groupedSeries[s].data[(chartData.monthCount -1)] = chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat];","\t        }","\t    }","\t   ","\t   this.chartData = chartData;","\t},","\t","\t//pre init for the charts ","\t_initAndDrawThroughputCharts: function(inputData) {\t\t\t\t\t\t\t\t\t\t\t\t","\t\tif (inputData.totalCount === 0) {","\t\t\treturn;","\t\t}\t\t\t\t\t\t","\t\t\t\t\t","\t\tvar throughput = [], i, qCount = 0, currTotalCount = 0, avgTotals = [], monthAVGs = [];","\t\t\t\t\t\t","\t\tfor (i in inputData.months) {\t\t\t","\t\t\tthroughput.push(inputData.months[i].count);","\t\t\tcurrTotalCount += inputData.months[i].count;","\t\t\tqCount++;","\t\t\t\t\t","\t\t\tavgTotals.push(Math.round(currTotalCount / qCount, 2));","\t\t}","\t\t\t\t\t","\t\tfor (i = 0; i < inputData.monthCount; ++i) {","\t\t\tmonthAVGs.push(Math.round(inputData.totalCount / inputData.monthCount, 2));","\t\t}","\t","\t\t//Finalize series","\t\tthis.groupedSeries.unshift({name: 'Throughput', data: throughput});","\t\tthis.groupedSeries.push({type: 'spline',name: 'Moving Average', data: avgTotals, color: 'blue', marker: {lineWidth: 1, fillColor: 'red'}});\t\t\t\t","\t\tthis.groupedSeries.push({type: 'spline',name: 'Average / Month', data: monthAVGs, color: 'purple', marker: {lineWidth: 1, fillColor: 'red'}});","\t\tthis.groupedSeries.push({name: 'Total UserStories: ' + inputData.totalCount, color: '#fff', stack:'blank'});","\t\t\t\t","\t\tthis._drawThroughputVerticalBarChart(inputData.categories, this.groupedSeries);\t\t\t","\t},","\t","\t// Configures and displays a horizontal bar chart","\t_drawThroughputVerticalBarChart: function(categories, data) {\t","\t\tvar conf = {","\t\t\tid: 'verticalBars',","\t\t\ttargetContainer: '#defaultChartContainer',","\t\t\tseries: data,\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'Throughput by Months',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Count'\t\t\t\t\t\t\t\t\t\t\t\t","\t\t};\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t","\t\tthis._drawThroughputBarChart(conf);","\t},\t\t\t\t\t\t\t\t","\t","\t//Draws and displays the bar chart ","\t_drawThroughputBarChart: function (conf) {\t\t\t\t\t","\t\tthis.throughputChart = Ext.create('Rally.ui.chart.Chart',{","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\tchartData: {series: conf.series},\t\t\t\t\t\t\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tplotOptions: {","\t\t\t\t\tcolumn: {","\t\t\t\t\t\tstacking: 'normal', ","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tpoint: {","\t\t\t\t\t\t\tevents: {","\t\t\t\t\t\t\t\tclick: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t//Need to implement","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}\t\t\t\t\t\t\t\t\t","\t\t\t\t},","\t\t\t\tchart: {plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false, type: conf.chartType},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {align: 'right', verticalAlign: 'top', x: 0, y: 100,layout: 'vertical'},","\t\t\t\ttitle: {text: conf.chartTitle},","\t\t\t\ttooltip: {","\t\t\t\t\tformatter: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name + ' | ' + this.x + '</b><br/>'+","\t\t\t\t\t\t\t'<b>'+ this.y + '</b> User Stories<br/><i>(Click to view User Stories)</i>';","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{title: {text: conf.yAxisTitle}}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}]","\t\t\t}","\t\t});","\t},\t\t","\t","\t_createThroughputGraphContainer: function(throughputChart){","\t\t","\t\tvar graphContainer = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultChartContainer', ","\t\t\t    id: 'defaultChartContainer',","\t            layout: {","\t                type: 'vbox',","\t                align: 'stretch',","\t                padding: 5","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [throughputChart]","\t        });","\t     ","\t    return graphContainer;","\t},","\t","\t_createThroughputDataGrid: function(title, dataStore, gridId){","\t\t","\t    var grid = Ext.create('Rally.ui.grid.Grid', {","\t    \tid: gridId,","\t        title: title,","            store: dataStore,","            bodyBorder: true,","            columnCfgs: [","                {","                   text: 'Formatted ID', dataIndex: 'FormattedID', width: 100","                },","                {","                    text: 'Name', dataIndex: 'Name', width: 500","                },","                {","                    text: 'Accepted Date', dataIndex: 'AcceptedDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'InProgress Date', dataIndex: 'InProgressDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'Owner', dataIndex: 'Owner', flex: 1, emptyCellText: 'No Owner',","                    renderer: function(value){","                        if(value && value._refObjectName)","                            return value._refObjectName;","                    }","                },","                {","                    text: 'Tags', dataIndex: 'Tags', flex: 1, emptyCellText: 'No Tags',","                    renderer: function(value){","                        if(value && value.Name)","                            return value.Name;","                    }","                },","                {","                    text: 'CycleTime', dataIndex: 'CycleTime', flex: 1","                },","                {","                    text: 'CycleTime Category', dataIndex: 'CycleTimeCategory', flex: 1","                },","             ]","        });","        ","        return grid;","\t},","\t","  /* ####################################################################################################################################################################### */","  ","  /* ============================================================================================================================== */","  /* This Section is entirely for Configuring SLA & WIP LIMIT metrics */","  /* ============================================================================================================================== */","  ","    _createDataStoreForSLAAndWipLimit: function(){","    \tvar me = this;","    \tthis._initializingForWipSLAControls();","    \tthis.loadStoriesAndSnapshots().then(Ext.bind(function(data){","            ","            me.currWipLimitMessage = '<div style=\"text-indent: 1em;\"><b>Current</b> WIP is : <font size=\"3\" color=\"Black\"><b>'+ me.currWIPLimitValue +'</b></font></div>';","\t\t\tme.preWipLimitMessage = '<div style=\"text-indent: 5em;\">Previous WIP is : <font size=\"2\" color=\"Black\"><b>'+ me.prevWIPLimitValue +'</b></font></div>';","\t\t    var wipLimitContainer = me._createMetricsContainer('wipLimit', me.currWipLimitMessage, me.preWipLimitMessage);","\t\t\tvar pastRangeWipLimitDataGrid = me.getDurationGrid(data.kanbanDurationStore, 'c_KanbanState', 'Durations by Kanban-State');","\t\t    me._configureMetricsContainer('panel3', 'WIP Limit', wipLimitContainer, 'wipContainer', 'WipLimitSLAReport', pastRangeWipLimitDataGrid, false);","\t\t        ","\t\t    me.currSLALimitMessage = '<div style=\"text-indent: 1em;\"><b>Current</b> SLA is : <font size=\"3\" color=\"Black\"><b>'+ me.getTeamSLA() + '</b> days</font></div>';","\t\t    var slaLimitContainer = me._createSLAMetricsContainer('slaLimit', me.currSLALimitMessage);","\t\t    var overSLAGrid = me.getStoryGrid('overSLAGrid', data.overSLAStore, 'Stories &gt; SLA limit (' + me.getTeamSLA() + ' days)', 'left');","            var underSLAGrid = me.getStoryGrid('underSLAGrid', data.underSLAStore, 'Stories &lt; SLA Limit  (' + me.getTeamSLA() + ' days)', 'left');","\t\t    me._configureSLAMetricsContainer('panel4', 'SLA Limit', slaLimitContainer, 'slaContainer', 'WipLimitSLAReport', overSLAGrid, underSLAGrid, true);","        }));","    },","    ","    _initializingForWipSLAControls: function(){","\t    //initiatilizing for SLA & Wip Limit","\t    this.defaultTeamSLA = 10;","        ","        if (this.kanbanDurationGrid) { //Destroy grids","            this.kanbanDurationGrid.destroy();","            this.overSLAGrid.destroy();","            this.underSLAGrid.destroy();","        }","        ","        if (!this.isTeamSLASet()) {","           this.info += '<div id=\"appHint\">Please set a value for the Team SLA in the App-Settings.<br/>A default of <b>' + this.defaultTeamSLA + ' days</b> is used.</div>'; ","        } ","        ","        this.dataStore = {","                kanbanStateDurations: {},","                kanbanStates: {}","            };","        ","        Ext.getCmp('infoContainer').update(this.info);","    },","    ","    isTeamSLASet: function() {","        return _.parseInt(this.getSetting('teamSLA')) > 0;","    },","    ","    loadStoriesAndSnapshots: function() {","\t\tvar currDate = new Date();","\t\tvar prevDate = currDate.getDate() - 30;","\t\t","\t\tvar start = this.prevStartRallyDateFilter + \"TZ\";","        var end = this.currEndRallyDateFilter + \"TZ\";","        ","        var me = this;","        var snapshots = this.getSnapshots({","            fetch: ['ObjectID'],","            findConfig: {","                \"_TypeHierarchy\": \"HierarchicalRequirement\",","                \"_PreviousValues.ScheduleState\": {","                    \"$exists\": true,","                    \"$lt\": \"Accepted\"","                },","                \"ScheduleState\": {","                    \"$gte\": \"Accepted\"","                },","                \"_ValidFrom\": {","                    \"$lt\": \tend,\t\t\t\t\t//\"2015-01-31TZ\",\t\t\t\t\t//TODO: Need to change to actual start period.","                    \"$gte\": start\t\t\t\t\t//\"2014-12-01TZ\"\t\t\t\t\t//TODO: Need to change to actual end period.","                },","                \"Project\" : this.context.getProject().ObjectID","            }","        });","        ","        return Deft.Promise.all([snapshots]).then(function(results){","            var ids = [];","             _.each(results[0], function(r) {","                if (ids.indexOf(r.ObjectID <0)) {","                      ids.push(r.ObjectID);","                }","            });","            return me.loadStories(ids);","        });","    },","    ","     getSnapshots: function(config) {","        var workspaceOid = this.context.getWorkspace().ObjectID;","        var deferred = new Deft.Deferred();","        Ext.create('Rally.data.lookback.SnapshotStore', _.merge({","            // TODO - account for > 20k results","            autoLoad: true,","            context: {","                workspace: '/workspace/' + workspaceOid","            },","            listeners: {","                load: function(store, data, success) {","                    deferred.resolve(_.pluck(data, 'raw'));","                }","            }","        }, config));","","        return deferred.getPromise();","    },","    ","    loadStories: function(ids) {","        var me = Rally.getApp();","        var snapshots = me.getSnapshots({","            fetch: ['_ValidFrom', '_ValidTo', 'c_KanbanState', 'ScheduleState', '_UnformattedID', 'Name'],","            hydrate: ['ScheduleState'],","            findConfig: {","                \"ObjectID\": {","                    \"$in\": ids","                },","                 \"c_KanbanState\" : {","                  \"$exists\": true  ","                }","            }","        });","        ","        return Deft.Promise.all([ snapshots]).then(function(result) {","            var stories = result[0], workdays, validTo;","            var results = {stories: {}, totalAcceptedStories:0, totalInProgressWorkDays: 0};","            me.dataStore.currKanbanStateDurations = {};","             ","            _.each(stories, function(snapshot) {","                snapshot.cycleTime = snapshot.cycleTime || 0;","                snapshot.FormattedID = snapshot.FormattedID || \"US\" + snapshot._UnformattedID;","                snapshot._ref = snapshot._ref || '/userstory/' + snapshot.ObjectID;","               ","                validTo = (snapshot._ValidTo.indexOf('9999') >= 0) ? NOW : snapshot._ValidTo;","                workdays = me.getWorkingDays(snapshot._ValidFrom, validTo);","                me.initStates(snapshot);","","               if (_.isUndefined(results.stories[snapshot.ObjectID])) {","                    results.stories[snapshot.ObjectID] = snapshot;","                    results.totalAcceptedStories++;","                    me.dataStore.kanbanStates[snapshot.ObjectID] = [];","                }","                ","                if (snapshot.ScheduleState === 'In-Progress') {","                    results.stories[snapshot.ObjectID].cycleTime += workdays;","                    results.totalInProgressWorkDays+= workdays;","                }","                ","                me.updateStates(snapshot, workdays, snapshot._ValidFrom);","            });","            ","            results.avgCycleTime = Math.ceil(results.totalInProgressWorkDays / results.totalAcceptedStories);","            results.kanbanDurationStore = me.createCustomStore(_.values(me.dataStore.kanbanStateDurations));","            results.currKanbanDurationStore = me.createCustomStore(_.values(me.dataStore.currKanbanStateDurations));","           ","            return me.getOutliers(results);","        });","    },","    ","    initStates: function(snapshot) {","        this.dataStore.kanbanStateDurations[snapshot.c_KanbanState]  = this.dataStore.kanbanStateDurations[snapshot.c_KanbanState] || {storyCount:0, workdays: 0, snapshot: snapshot};","        this.dataStore.currKanbanStateDurations[snapshot.c_KanbanState] = this.dataStore.currKanbanStateDurations[snapshot.c_KanbanState] || {storyCount: 0, workdays: 0, snapshot: snapshot};","    },","    ","     getWorkingDays: function(startDate, endDate) {","\t\tvar currentDate = new Date(startDate), result = 0, weekDay, difference;","\t\tvar minutes = 1000 * 60;","        var hours = minutes * 60;","        var days = hours * 24;","        endDate = new Date(endDate);","","\t\twhile (currentDate <= endDate)  {","            difference = (endDate.getTime() / days) - (currentDate.getTime() / days);","            if (difference > 0) { ","            \t//only count days when difference is >= 1 day","                weekDay = currentDate.getDay();","                if (weekDay !== 0 && weekDay !== 6) {","                    result += difference > 1 ? 1 : difference;","                }","            }","\t\t\tcurrentDate.setDate(currentDate.getDate()+1); ","\t\t}","\t\treturn result;","\t},","\t","\tupdateStates: function(snapshot, workdays, validFrom) {","\t\tvar validFromDate = new Date(validFrom);","\t\t","        if (this.dataStore.kanbanStates[snapshot.ObjectID].indexOf(snapshot.c_KanbanState) < 0) {","            this.dataStore.kanbanStates[snapshot.ObjectID].push(snapshot.c_KanbanState);","            this.dataStore.kanbanStateDurations[snapshot.c_KanbanState].storyCount++;","            ","            if(validFromDate >= this.curr_Start_Date && validFromDate <= this.curr_End_Date){","            \tthis.dataStore.currKanbanStateDurations[snapshot.c_KanbanState].storyCount++;","            }","        }","        ","        this.dataStore.kanbanStateDurations[snapshot.c_KanbanState].workdays += workdays;","       ","         if(validFromDate >= this.curr_Start_Date && validFromDate <= this.curr_End_Date){","            \tthis.dataStore.currKanbanStateDurations[snapshot.c_KanbanState].workdays += workdays;","          }","    },","    ","    createCustomStore: function(data) {","        return Ext.create('Rally.data.custom.Store', {data: data});","    },","    ","    getOutliers: function(data) {","        var teamSLA = this.getTeamSLA();","        var overSLAStories = [], underSLAStories = [];","        ","        _.each(data.stories, function(story, ObjectID){","            if  (story.cycleTime > teamSLA) {","                overSLAStories.push(story);","            }","            if  (story.cycleTime <= teamSLA) {","                underSLAStories.push(story);","            }","        });","        ","        data.overSLAStore = Rally.getApp().createCustomStore(_.sortBy(overSLAStories, 'cycleTime').reverse());","        data.underSLAStore = Rally.getApp().createCustomStore(_.sortBy(underSLAStories, 'cycleTime').reverse());","        ","        return data;","    },","    ","    getDurationGrid: function(store, state, title) {","        return Ext.create('Rally.ui.grid.Grid', {","            title: title,","            store: store,","            showPagingToolbar: false,","            showRowActionsColumn: false,","            columnCfgs: [","                {text: 'State', width: 150, renderer: function(value, meta, record){return record.get('snapshot')[state];}},","                {text: 'AVG time', renderer: function(value, meta, record) {return Math.ceil(record.get('workdays') / record.get('storyCount')) + ' days';}},","                {text: '# Stories', dataIndex: 'storyCount'}","            ]","        }); ","    },","    ","    getStoryGrid: function(gridId, store, title, css) {","        return Ext.create('Rally.ui.grid.Grid', {","        \tid: gridId,","        \tbodyBorder: true,","        \tautoScroll: true,","        \tborder: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","        \tshowPagingToolbar: false,","            showRowActionsColumn: false,","            title: title,","            store: store,","            width: 350,","            columnCfgs: [","                {text: 'Formatted-ID', dataIndex: 'FormattedID',  xtype: 'templatecolumn', tpl: Ext.create('Rally.ui.renderer.template.FormattedIDTemplate')},","                {text: 'Cycle-Time', renderer: function(value, meta, record){return record.get('cycleTime').toFixed(1) + ' days';}}","            ],","            storeConfig: {","                 model: 'userstory'","            }","        });","    },","    ","    getTeamSLA: function() {","        return this.isTeamSLASet() ? this.getSetting('teamSLA') : this.defaultTeamSLA;","    },","    ","    _configureSLAMetricsContainer: function(panelId, titleName, slaLimitContainer, containerId, reportId, outRangeDataGrid, inRangeDataGrid, hasGraph){","\t\tvar widthValue = hasGraph? 750 : 450;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar myGridContainer = Ext.create('Ext.container.Container', {","         \tid: 'storyGridContainer',","         \tautoScroll: true,","         \theight: 200,","            layout: {","                type: 'hbox',","                align: 'fit',","                padding: 10","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [outRangeDataGrid, inRangeDataGrid]","        });","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","        \tautoScroll: true,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 300,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            items: [slaLimitContainer, myGridContainer]","        });","        ","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_createSLAMetricsContainer: function(containerId, currMessage){","\t\t","\t\tvar myContainer = Ext.create('Ext.container.Container', {","         \tid: containerId,","         \tautoScroll: true,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currMessage","            }]","        });","        ","        return myContainer;","\t},","    ","    /* ####################################################################################################################################################################### */","    ","\t_createMetricsContainer: function(containerId, currMessage, prevMessage){","\t\t","\t\tvar myContainer = Ext.create('Ext.container.Container', {","         \tid: containerId,","         \tautoScroll: true,","            layout: {","                type: 'hbox',","                align: 'fit',","                padding: 5","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currMessage","            },","            {","                xtype: 'label',","                html: prevMessage","            }]","        });","        ","        return myContainer;","\t},","\t","\t_configureMetricsContainer: function(panelId, titleName, throughtputContainer, containerId, reportId, pastRangeDataGrid, hasGraph){","\t\tvar widthValue = hasGraph? 750 : 500;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","        \tautoScroll: true,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 300,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            items: [throughtputContainer, pastRangeDataGrid]","        });","        ","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t//Note: Need to refactor to re-use the same methord for Pie or Bar graph.","\t_createCycleTimePieContainer: function(cycleTimePie, bySizePie){","\t\t","\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultPieChartContainer', ","\t\t\t    id: 'defaultPieChartContainer',","\t            layout: {","\t                type: 'hbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [cycleTimePie, bySizePie]","\t        });","\t},","\t","","\t","\t/* Configures and displays a pie chart*/","\t_drawPie: function (id, name, text, data, extraData) {\t","\t\t","\t\tvar chart = {","\t\t\txtype: 'rallychart',","\t\t\tid: id,","\t\t\theight: 400,","\t\t\twidth: 400,\t","\t\t\tstyle: {float: 'left'},","\t\t\tchartData: {","\t\t\t\tseries: [{","\t\t\t\t\ttype: 'pie',","\t\t\t\t\tname: name,","\t\t\t\t\tdata: data","\t\t\t\t}]","\t\t\t},","\t\t\tchartConfig: {\t\t\t\t\t\t\t","\t\t\t\tchart: {","\t\t\t\t\tplotBackgroundColor: null,","\t\t\t\t\tplotBorderWidth: null,","\t\t\t\t\tplotShadow: false,","\t\t\t\t\ttype: 'pie'","\t\t\t\t},","\t\t\t\txAxis: {},//must specify empty x-axis due to bug","\t\t\t\ttitle: {","\t\t\t\t\ttext: text","\t\t\t\t},","\t\t\t\ttooltip: {","\t\t\t\t\tpointFormat: '{series.name}: <b>{point.y}</b>',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\tpercentageDecimals: 1,","\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\treturn _formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t},","\t\t\t\tplotOptions: {","\t\t\t\t\tpie: {","\t\t\t\t\t\tallowPointSelect: true,","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tdataLabels: {","\t\t\t\t\t\t\tenabled: true,","\t\t\t\t\t\t\tcolor: '#000000',","\t\t\t\t\t\t\tconnectorColor: '#000000',\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\treturn Rally.getApp()._formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t};","\t\t\t\t\t","\t\treturn chart;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t},","\t","\t/* formats lables for charts */","\t_formatLabels: function(id, that, extraData) {","\t\tswitch (id) {","\t\t\tcase 'cycleTimePie':\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\treturn '<b>' + that.point.name +'</b><br/>AVG Cycle Time: '+ that.y;","\t\t\tcase 'bySizePie' :","\t\t\t\treturn '<b>'+ that.point.name +'</b><br/>Count: '+ that.y; ","\t\t}\t\t\t\t","\t}","\t","});"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":1292,"column":3},"end":{"row":1292,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1422610131000}