{"filter":false,"title":"App.js","tooltip":"/App.js","undoManager":{"mark":2,"position":2,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":8,"column":0},"action":"remove","lines":["Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    items:{ html:'<a href=\"https://help.rallydev.com/apps/2.0rc3/doc/\">App SDK 2.0rc3 Docs</a>'},","    launch: function() {","        //Write app code here","    }","});",""]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":591,"column":0},"action":"insert","lines":["var types = Ext.data.Types; // allow shorthand type access","Ext.define('ThroughputDataModel', {","\textend: 'Ext.data.Model',","\tfields: [","                {name: 'FormattedID', mapping: 'FormattedID', type: types.STRING},","                {name: 'Name', mapping: 'Name', type: types.STRING},","                {name: 'AcceptedDate', mapping: 'AcceptedDate', type: types.DATE },","                {name: 'InProgressDate', mapping: 'InProgressDate', type: types.DATE },","                {name: 'Tags', mapping: 'Tags', type: types.STRING},","                {name: 'Owner', mapping: 'Owner', type: types.OBJECT},","                {name: 'CycleTime', mapping: 'CycleTime', type: types.FLOAT},","                {name: 'CycleTimeCategory', mapping: 'CycleTimeCategory', type: types.STRING}","            ]","});","","","","Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    items:[","    \t{xtype: 'container', itemId: 'throughputCycleReport', id: 'throughputCycleReport', ","            items: [\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t{xtype: 'container', itemId: 'cycleTimeContainer', id: 'cycleTimeContainer', title: 'Cycle-Time'},","\t\t\t\t{xtype: 'container', itemId: 'throughputContainer', id: 'throughputContainer', title: 'Throughput'}","\t\t\t],","\t\t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:5","\t\t    }","\t\t}],","    layout:{","        type:'vbox',","        align:'stretch',","        padding:10","    },","    ","    cycleTimeCategoryNames: [\"0-5 days\", \"6-10 days\", \"11-15 days\", \"16-20 days\", \"21-25 days\", \"26-30 days\", \"31+ days\"],","    cycleTimeDistRange: 5,","    ","    getSettingsFields:function()","\t{","\t\treturn[{","\t\t\tname:\"excludeWeekends\",","\t\t\txtype:\"rallycheckboxfield\",","\t\t\tfieldLabel:\"Exclude Weekends from Lead Time\"","\t\t}];","\t},","","\tconfig:{","\t\tdefaultSettings:{","\t\t    excludeWeekends:!0","\t\t}","\t},","\t","    launch: function() {","        ","        this._init();","        this._determineDateRangeForThroughput();","        this._createDataStoreForThroughput();","    },","    ","    _init: function() {\t","\t\t//dynamicItems hold created ui items, which needs to be destroyed before re-drawing","\t\tif (typeof this.dynamicItems === \"undefined\"){","\t\t\tthis.dynamicItems = {};","\t\t}","\t\t\t\t","\t\tif (typeof this.dynamicItems['throughputCycleReport'] === \"undefined\"){","\t\t\tthis.dynamicItems['throughputCycleReport'] = {};","\t\t}","\t\telse {","\t\t\tvar item;","\t","\t\t\tfor (item in this.dynamicItems['throughputCycleReport']) {","\t\t\t\tthis.dynamicItems['throughputCycleReport'][item].destroy();","\t\t\t}","\t\t}\t","\t},","    ","    _determineDateRangeForThroughput: function(){","        this.curr_End_Date = new Date();","        ","        //Determine a date 30 days prior to current date.","        var tmp_Curr_Date = new Date();","        tmp_Curr_Date.setDate(tmp_Curr_Date.getDate()-30);","        this.curr_Start_Date = tmp_Curr_Date;","        ","        this.currStartRallyDateFilter = this.curr_Start_Date.getFullYear() + '-' + (parseInt(this.curr_Start_Date.getMonth(), 10) + 1)  + '-' + this.curr_Start_Date.getDate();","        this.currEndRallyDateFilter = this.curr_End_Date.getFullYear() + '-' + (parseInt(this.curr_End_Date.getMonth(), 10) + 1)  + '-' + this.curr_End_Date.getDate();","        ","        var tmp_Prev_Date = new Date();","        tmp_Prev_Date.setDate(tmp_Prev_Date.getDate()-60);","        this.prev_Start_Date = tmp_Prev_Date;","        this.prev_End_Date = Ext.Date.add(this.curr_Start_Date, Ext.Date.DAY, -1);","        ","        this.prevStartRallyDateFilter = this.prev_Start_Date.getFullYear() + '-' + (parseInt(this.prev_Start_Date.getMonth(), 10)+1) + '-' + this.prev_Start_Date.getDate();","        this.prevEndRallyDateFilter = this.prev_End_Date.getFullYear() + '-' + (parseInt(this.prev_End_Date.getMonth(), 10)+1) + '-' + this.prev_End_Date.getDate();","        ","        this.past_Date_SixMonth = Ext.Date.add(this.curr_Start_Date, Ext.Date.MONTH, -5);","        this.pastDateSixMonthFilter = this.past_Date_SixMonth.getFullYear() + '-' + (parseInt(this.past_Date_SixMonth.getMonth(), 10)+1) + '-' + this.past_Date_SixMonth.getDate();","    }, ","    ","    _createDataStoreForThroughput: function(){","        //Determine the data filter for store.","        this.filter = Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '>=',","\t\t\tvalue: this.pastDateSixMonthFilter","\t\t}).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '<=',","\t\t\tvalue: this.currEndRallyDateFilter","\t\t})).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'c_KanbanState',","\t\t\toperator: '=',","\t\t\tvalue: 'Accepted'","\t\t}));","\t\t","\t\t//Record all columns that needs to be fetched.","\t\tthis.fetchDataColumns = ['FormattedID', 'Name', 'AcceptedDate', 'InProgressDate', 'Tags', 'Owner', 'c_KanbanState'];","\t\t","\t\t//configure the data store context.","\t\tthis.contextConfig = {","            workspace: this.getContext().getWorkspace()._Ref,","            project: this.getContext().getProject()._ref,","            projectScopeUp: false,","            projectScopeDown: true,","            limit: 'infinity'","        };","\t   ","\t   //set the sorter config for data store.","\t   this.sorterConfig = [{","                        \tproperty: 'AcceptedDate',","                        \tdirection: 'ASC'","                        },","                        {","                            property: 'FormattedID',","                            direction: 'ASC'","                        }];","                        ","\t\tthis._createUserStoryDataStore();","    },","    ","    _createUserStoryDataStore: function(){","\t    var myUserStoryStore = Ext.create('Rally.data.wsapi.Store', {","\t        model: 'HierarchicalRequirement',","\t        fetch: this.fetchDataColumns,","\t        autoLoad: true,","\t        context: this.contextConfig,","\t        filters: this.filter,","\t        sorters: this.sorterConfig,","\t        listeners: {","\t            load: function(store, data, success){","\t                this.currUserStoriesColl = [];","\t                this.prevUserStoriesColl = [];","\t                this.pastRangeUserStoriesColl = [];","\t                var that = this;","\t               ","\t                Ext.Array.each(data, function(userStory) {","\t                    if(userStory && userStory.get('AcceptedDate')){","\t                        if(userStory.get('AcceptedDate') >= that.curr_Start_Date){","\t                            that.currUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }if(userStory.get('AcceptedDate') < that.curr_Start_Date && userStory.get('AcceptedDate') >= that.prev_Start_Date){","\t                            that.prevUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }","\t                        ","\t                        that.pastRangeUserStoriesColl.push(that._createThroghputData(userStory));","\t                    }","\t                });","\t                ","\t                this._createDefectStore();","\t            },","\t            scope: this","\t        }","\t  });","\t},","\t","\t_createThroghputData: function(rallyObject){","\t    ","\t    var cycleTime = 0;","\t    var cycleTimeCat = \"N/A\";","\t    //Determine the cycle time for each object.","\t    if(rallyObject.get('AcceptedDate') && rallyObject.get('InProgressDate')){","\t        cycleTime = Rally.util.DateTime.getDifference(rallyObject.get('AcceptedDate'), rallyObject.get('InProgressDate'), 'day');","\t    }","\t    ","\t    for(var i =0; i<this.cycleTimeCategoryNames.length; i++){","\t        var lowerRange = i*this.cycleTimeDistRange, upperRange = lowerRange + 5;","\t        ","\t        if((cycleTime >lowerRange && cycleTime <= upperRange) || (lowerRange === 30 && cycleTime > lowerRange))","\t            cycleTimeCat = this.cycleTimeCategoryNames[i];","\t    }","\t    ","\t    //Generate the node for throghput data.","\t    var data = Ext.create('ThroughputDataModel', {","\t        FormattedID: rallyObject.get('FormattedID'), ","\t        Name: rallyObject.get('Name'), ","\t        AcceptedDate: rallyObject.get('AcceptedDate'), ","\t        InProgressDate: rallyObject.get('InProgressDate'), ","\t        Tags: rallyObject.get('Tags'), ","\t        Owner: rallyObject.get('Owner'),","\t        CycleTime: cycleTime,","\t        CycleTimeCategory: cycleTimeCat","\t    });","\t    ","\t    return data;","\t},","\t","\t_createDefectStore: function(){","\t    var that = this;","\t    var myDefectStore = Ext.create('Rally.data.wsapi.Store', {","            model: 'Defect',","            fetch: this.fetchDataColumns,","            autoLoad: true,","            context: this.contextConfig,","            filters: this.filter,","            sorters: this.sorterConfig,","            listeners: {","                load: function(store, data, success){","                    Ext.Array.each(data, function(defect){","                        if(defect && defect.get('AcceptedDate')){","                            if(defect.get('AcceptedDate') >= that.curr_Start_Date){","                            \tthat._insertRecordInOrder(that.currUserStoriesColl, that._createThroghputData(defect));","                            }if(defect.get('AcceptedDate') < that.curr_Start_Date && defect.get('AcceptedDate') >= that.prev_Start_Date){","                                that._insertRecordInOrder(that.prevUserStoriesColl, that._createThroghputData(defect));","                            }","                            ","                            that._insertRecordInOrder(that.pastRangeUserStoriesColl, that._createThroghputData(defect));","                        }","                           ","                    });","                    ","                    console.log('spite out Current US coll with defects: ', this.currUserStoriesColl);","\t                console.log('spite out previous US data coll with defects: ', this.prevUserStoriesColl);","\t                ","\t               this.currThroughputValue = this.currUserStoriesColl.length;","\t               this.prevThroughputValue = this.prevUserStoriesColl.length;","\t                ","\t                this.currThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.currUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.prevThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.prevUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.pastRangeThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        model: 'ThroughputDataModel',","                        data: this.pastRangeUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this._processStoreData();","                },","                scope: this","            }","\t  });","\t},","\t","\t_insertRecordInOrder: function(dataColl, record){","\t\tvar closestRecord = record;","\t\tvar recordDate = record.get(\"AcceptedDate\");","\t\t","\t\tExt.Array.each(dataColl, function(data) {","\t\t    var dataDate = data.get(\"AcceptedDate\");","\t\t    if(dataDate && recordDate && dataDate.getMonth() === recordDate.getMonth()){","\t\t    \tif(dataDate <= recordDate)","\t\t    \t\tclosestRecord = data;","\t\t    }","\t\t});","\t\t","\t\tvar dataIndex = dataColl.indexOf(closestRecord);","\t\tif(dataIndex != -1){","\t\t\tdataColl.splice(dataIndex, 0, record);","\t\t}","\t\telse{","\t\t\tdataColl.push(record);","\t\t}","\t},","\t","\t_processStoreData:  function() {","\t    var currThroghtputGridTitle = 'List all User Stories & defects for Current period (Between ' + this.currStartRallyDateFilter + ' & ' + this.currEndRallyDateFilter + ')';","\t    var currThroughputDataGrid = this._createThroughputDataGrid(currThroghtputGridTitle, this.currThroughputDataStore);","\t    ","\t    var prevThroghtputGridTitle = 'List all User Stories & defects for Previous period: (Between ' + this.prevStartRallyDateFilter + ' & ' + this.prevEndRallyDateFilter + ')';","\t    var prevThroughputDataGrid = this._createThroughputDataGrid(prevThroghtputGridTitle, this.prevThroughputDataStore);","\t    ","\t    var pastRangeThroghtputGridTitle = 'List all User Stories & defects for last 6 Months: (Between ' + this.pastDateSixMonthFilter + ' & ' + this.currEndRallyDateFilter + ')';","\t    var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore);","\t    ","\t    var currThroughputMessage = '<div>The Throughput for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b>' + this.currThroughputValue + '</b></div>';","\t    var prevThroughputMessage = '<div>The Throughput for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b>' + this.prevThroughputValue + '</b></div>';","\t    ","\t    this._createThroghputMessagePanel(currThroughputMessage, prevThroughputMessage);","\t    this._processThroughputDataForGraph();","\t    this._createThroghputGridPanel(currThroughputDataGrid, prevThroughputDataGrid, pastRangeThroughputDataGrid);","\t},","\t","\t_processThroughputDataForGraph: function(){","\t    var that = this;","\t\tthis.groupedSeries = [];","\t\t","\t\t//initialize the groupseries","\t    Ext.Array.each(that.cycleTimeCategoryNames, function(catName) {","\t        that.groupedSeries.push({name: catName, data:[], stack: 'qSizes'});","\t    });","\t    ","\t    that.groupedSeries.push({name: 'N/A', data: [], stack: 'qSizes'});","\t    ","\t    this.chartData = {","\t\t\ttotalCount: 0,","\t\t\tmonths: {},","\t\t\tmonthCount: 0,","\t\t\tcategories: []","\t\t};\t","\t\t    ","\t\tconsole.log('Spite out the Items: ', this.pastRangeUserStoriesColl);","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t    that._buildChartData(record);","\t\t});","\t\t","\t\tconsole.log('chartdata post configuration: ', this.chartData);","\t\tconsole.log('spite out groupedSeries: ', this.groupedSeries);","\t\t","\t\tthis._initAndDrawCharts(this.chartData);","\t},","\t","\t_buildChartData: function(record){","\t    var chartData = this.chartData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTimeCat = record.get(\"CycleTimeCategory\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    console.log(\"spite out accepted Month Number: \", recAcceptedDate.getMonth());","\t    ","\t    if(typeof chartData.months[recMonthNameCat] === \"undefined\"){","\t        chartData.months[recMonthNameCat] = {count: 0, monthNum: 0, cycletimes: {}, userStories: []};","\t        chartData.categories.push(recMonthNameCat);","\t        ","\t        for(var i=0; i<this.groupedSeries.length; ++i){","\t            this.groupedSeries[i].data.push(0); //add 0 for each month","\t        }","\t        ","\t        chartData.monthCount++;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].userStories.push(record);","\t    if(typeof chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] === 'undefined'){","\t        chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] =0;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat]++;","\t    chartData.months[recMonthNameCat].count++;","\t    chartData.totalCount++;","\t  ","\t    for(var s=0; s<this.groupedSeries.length; ++s){","\t        if(recCycleTimeCat === this.groupedSeries[s].name){","\t            this.groupedSeries[s].data[(chartData.monthCount -1)] = chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat];","\t        }","\t    }","\t   ","\t   this.chartData = chartData;","\t},","\t","\t//pre init for the charts ","\t_initAndDrawCharts: function(inputData) {\t\t\t\t\t\t\t\t\t\t\t\t","\t\tif (inputData.totalCount === 0) {","\t\t\treturn;","\t\t}\t\t\t\t\t\t","\t\t\t\t\t","\t\tvar throughput = [], i, qCount = 0, currTotalCount = 0, avgTotals = [], monthAVGs = [];","\t\t\t\t\t\t","\t\tfor (i in inputData.months) {\t\t\t","\t\t\tthroughput.push(inputData.months[i].count);","\t\t\tcurrTotalCount += inputData.months[i].count;","\t\t\tqCount++;","\t\t\t\t\t","\t\t\tavgTotals.push(Math.round(currTotalCount / qCount, 2));","\t\t}","\t\t\t\t\t","\t\tfor (i = 0; i < inputData.monthCount; ++i) {","\t\t\tmonthAVGs.push(Math.round(inputData.totalCount / inputData.monthCount, 2));","\t\t}","\t","\t\t//Finalize series","\t\tthis.groupedSeries.unshift({name: 'Throughput', data: throughput});","\t\tthis.groupedSeries.push({type: 'spline',name: 'Moving Average', data: avgTotals, color: 'blue', marker: {lineWidth: 1, fillColor: 'red'}});\t\t\t\t","\t\tthis.groupedSeries.push({type: 'spline',name: 'Average / Month', data: monthAVGs, color: 'purple', marker: {lineWidth: 1, fillColor: 'red'}});","\t\tthis.groupedSeries.push({name: 'Total UserStories: ' + inputData.totalCount, color: '#fff', stack:'blank'});","\t\t\t\t","\t\tthis._drawHorizontalBarChart(inputData.categories, this.groupedSeries);\t\t\t","\t},","\t","\t// Configures and displays a horizontal bar chart","\t_drawHorizontalBarChart: function(categories, data) {\t","\t\tvar conf = {","\t\t\tid: 'verticalBars',","\t\t\ttargetContainer: '#defaultChartContainer',","\t\t\tseries: data,\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'Throughput by Months',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Count'\t\t\t\t\t\t\t\t\t\t\t\t","\t\t};\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t","\t\tthis._drawBarChart(conf);","\t},\t\t\t\t\t\t\t\t","\t","\t//Draws and displays the bar chart ","\t_drawBarChart: function (conf) {\t\t\t\t\t","\t\tvar throughputChart = Ext.create('Rally.ui.chart.Chart',{","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\tchartData: {series: conf.series},\t\t\t\t\t\t\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tplotOptions: {","\t\t\t\t\tcolumn: {","\t\t\t\t\t\tstacking: 'normal', ","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tpoint: {","\t\t\t\t\t\t\tevents: {","\t\t\t\t\t\t\t\tclick: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t//Need to implement","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}\t\t\t\t\t\t\t\t\t","\t\t\t\t},","\t\t\t\tchart: {plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false, type: conf.chartType},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {align: 'right', verticalAlign: 'top', x: 0, y: 100,layout: 'vertical'},","\t\t\t\ttitle: {text: conf.chartTitle},","\t\t\t\ttooltip: {","\t\t\t\t\tformatter: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name + ' | ' + this.x + '</b><br/>'+","\t\t\t\t\t\t\t'<b>'+ this.y + '</b> User Stories<br/><i>(Click to view User Stories)</i>';","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{title: {text: conf.yAxisTitle}}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}]","\t\t\t}","\t\t});","\t\t","\t\tif(this.throughtputGraphContainer){","\t\t\tthis.throughtputGraphContainer.removeAll(true);","\t\t\tthis.throughtputGraphContainer.add(throughputChart);","\t\t}","\t\telse{","\t\t\t\tthis.throughtputGraphContainer = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultChartContainer', ","\t\t\t    id: 'defaultChartContainer',","\t            layout: {","\t                type: 'vbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [throughputChart]","\t        });","\t        ","\t        this.add(this.throughtputGraphContainer);","\t\t}","\t},\t\t\t\t","\t","\t_createThroghputMessagePanel: function(currThroughputMessage, prevThroughputMessage){","         var throughtputContainer = Ext.create('Ext.container.Container', {","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currThroughputMessage","            },","            {","                xtype: 'label',","                html: prevThroughputMessage","            }]","        });","        ","        //create the panel for displaying computed Throughput.","        if(this.infoPanel){","            this.infoPanel.removeAll(true);","            this.infoPanel.add(throughtputContainer);","        }","        else{","            this.infoPanel=Ext.create('Ext.form.Panel', {","            \t title: 'Throughput',","                renderTo: Ext.getBody(),","                layout: {","                    type: 'vbox',","                    align: 'stretch',","                    padding: 10","                },","                items: [throughtputContainer]","            });","            ","            this.add(this.infoPanel);","        }","\t},","\t","\t_createThroghputGridPanel: function(currThroughputDataGrid, prevThroughputDataGrid, pastRangeThroughputDataGrid){","\t    //create the grid panel to display the grid.","        if(this.gridPanel){","            this.gridPanel.removeAll(true);","            this.gridPanel.add(currThroughputDataGrid);","            this.gridPanel.add(prevThroughputDataGrid);","            this.gridPanel.add(pastRangeThroughputDataGrid);","        }","        else{","            ","            this.gridPanel=Ext.create('Ext.form.Panel', {","                renderTo: Ext.getBody(),","                title: 'View Details: ',","                layout: {","                    type: 'vbox',","                    align: 'stretch',","                    padding: 10","                },","                items: [currThroughputDataGrid, prevThroughputDataGrid, pastRangeThroughputDataGrid]","            });","            ","            this.add(this.gridPanel);","        }","\t},","\t","\t_createThroughputDataGrid: function(title, dataStore){","\t    var grid = Ext.create('Rally.ui.grid.Grid', {","\t        title: title,","            store: dataStore,","            bodyBorder: true,","            columnCfgs: [","                {","                   text: 'Formatted ID', dataIndex: 'FormattedID', width: 100","                },","                {","                    text: 'Name', dataIndex: 'Name', width: 500","                },","                {","                    text: 'Accepted Date', dataIndex: 'AcceptedDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'InProgress Date', dataIndex: 'InProgressDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'Owner', dataIndex: 'Owner', flex: 1, emptyCellText: 'No Owner',","                    renderer: function(value){","                        if(value && value._refObjectName)","                            return value._refObjectName;","                    }","                },","                {","                    text: 'Tags', dataIndex: 'Tags', flex: 1, emptyCellText: 'No Tags',","                    renderer: function(value){","                        if(value && value.Name)","                            return value.Name;","                    }","                },","                {","                    text: 'CycleTime', dataIndex: 'CycleTime', flex: 1","                },","                {","                    text: 'CycleTime Category', dataIndex: 'CycleTimeCategory', flex: 1","                },","             ]","        });","        ","        return grid;","\t}","});",""]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":591,"column":0},"action":"remove","lines":["var types = Ext.data.Types; // allow shorthand type access","Ext.define('ThroughputDataModel', {","\textend: 'Ext.data.Model',","\tfields: [","                {name: 'FormattedID', mapping: 'FormattedID', type: types.STRING},","                {name: 'Name', mapping: 'Name', type: types.STRING},","                {name: 'AcceptedDate', mapping: 'AcceptedDate', type: types.DATE },","                {name: 'InProgressDate', mapping: 'InProgressDate', type: types.DATE },","                {name: 'Tags', mapping: 'Tags', type: types.STRING},","                {name: 'Owner', mapping: 'Owner', type: types.OBJECT},","                {name: 'CycleTime', mapping: 'CycleTime', type: types.FLOAT},","                {name: 'CycleTimeCategory', mapping: 'CycleTimeCategory', type: types.STRING}","            ]","});","","","","Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    items:[","    \t{xtype: 'container', itemId: 'throughputCycleReport', id: 'throughputCycleReport', ","            items: [\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t{xtype: 'container', itemId: 'cycleTimeContainer', id: 'cycleTimeContainer', title: 'Cycle-Time'},","\t\t\t\t{xtype: 'container', itemId: 'throughputContainer', id: 'throughputContainer', title: 'Throughput'}","\t\t\t],","\t\t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:5","\t\t    }","\t\t}],","    layout:{","        type:'vbox',","        align:'stretch',","        padding:10","    },","    ","    cycleTimeCategoryNames: [\"0-5 days\", \"6-10 days\", \"11-15 days\", \"16-20 days\", \"21-25 days\", \"26-30 days\", \"31+ days\"],","    cycleTimeDistRange: 5,","    ","    getSettingsFields:function()","\t{","\t\treturn[{","\t\t\tname:\"excludeWeekends\",","\t\t\txtype:\"rallycheckboxfield\",","\t\t\tfieldLabel:\"Exclude Weekends from Lead Time\"","\t\t}];","\t},","","\tconfig:{","\t\tdefaultSettings:{","\t\t    excludeWeekends:!0","\t\t}","\t},","\t","    launch: function() {","        ","        this._init();","        this._determineDateRangeForThroughput();","        this._createDataStoreForThroughput();","    },","    ","    _init: function() {\t","\t\t//dynamicItems hold created ui items, which needs to be destroyed before re-drawing","\t\tif (typeof this.dynamicItems === \"undefined\"){","\t\t\tthis.dynamicItems = {};","\t\t}","\t\t\t\t","\t\tif (typeof this.dynamicItems['throughputCycleReport'] === \"undefined\"){","\t\t\tthis.dynamicItems['throughputCycleReport'] = {};","\t\t}","\t\telse {","\t\t\tvar item;","\t","\t\t\tfor (item in this.dynamicItems['throughputCycleReport']) {","\t\t\t\tthis.dynamicItems['throughputCycleReport'][item].destroy();","\t\t\t}","\t\t}\t","\t},","    ","    _determineDateRangeForThroughput: function(){","        this.curr_End_Date = new Date();","        ","        //Determine a date 30 days prior to current date.","        var tmp_Curr_Date = new Date();","        tmp_Curr_Date.setDate(tmp_Curr_Date.getDate()-30);","        this.curr_Start_Date = tmp_Curr_Date;","        ","        this.currStartRallyDateFilter = this.curr_Start_Date.getFullYear() + '-' + (parseInt(this.curr_Start_Date.getMonth(), 10) + 1)  + '-' + this.curr_Start_Date.getDate();","        this.currEndRallyDateFilter = this.curr_End_Date.getFullYear() + '-' + (parseInt(this.curr_End_Date.getMonth(), 10) + 1)  + '-' + this.curr_End_Date.getDate();","        ","        var tmp_Prev_Date = new Date();","        tmp_Prev_Date.setDate(tmp_Prev_Date.getDate()-60);","        this.prev_Start_Date = tmp_Prev_Date;","        this.prev_End_Date = Ext.Date.add(this.curr_Start_Date, Ext.Date.DAY, -1);","        ","        this.prevStartRallyDateFilter = this.prev_Start_Date.getFullYear() + '-' + (parseInt(this.prev_Start_Date.getMonth(), 10)+1) + '-' + this.prev_Start_Date.getDate();","        this.prevEndRallyDateFilter = this.prev_End_Date.getFullYear() + '-' + (parseInt(this.prev_End_Date.getMonth(), 10)+1) + '-' + this.prev_End_Date.getDate();","        ","        this.past_Date_SixMonth = Ext.Date.add(this.curr_Start_Date, Ext.Date.MONTH, -5);","        this.pastDateSixMonthFilter = this.past_Date_SixMonth.getFullYear() + '-' + (parseInt(this.past_Date_SixMonth.getMonth(), 10)+1) + '-' + this.past_Date_SixMonth.getDate();","    }, ","    ","    _createDataStoreForThroughput: function(){","        //Determine the data filter for store.","        this.filter = Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '>=',","\t\t\tvalue: this.pastDateSixMonthFilter","\t\t}).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '<=',","\t\t\tvalue: this.currEndRallyDateFilter","\t\t})).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'c_KanbanState',","\t\t\toperator: '=',","\t\t\tvalue: 'Accepted'","\t\t}));","\t\t","\t\t//Record all columns that needs to be fetched.","\t\tthis.fetchDataColumns = ['FormattedID', 'Name', 'AcceptedDate', 'InProgressDate', 'Tags', 'Owner', 'c_KanbanState'];","\t\t","\t\t//configure the data store context.","\t\tthis.contextConfig = {","            workspace: this.getContext().getWorkspace()._Ref,","            project: this.getContext().getProject()._ref,","            projectScopeUp: false,","            projectScopeDown: true,","            limit: 'infinity'","        };","\t   ","\t   //set the sorter config for data store.","\t   this.sorterConfig = [{","                        \tproperty: 'AcceptedDate',","                        \tdirection: 'ASC'","                        },","                        {","                            property: 'FormattedID',","                            direction: 'ASC'","                        }];","                        ","\t\tthis._createUserStoryDataStore();","    },","    ","    _createUserStoryDataStore: function(){","\t    var myUserStoryStore = Ext.create('Rally.data.wsapi.Store', {","\t        model: 'HierarchicalRequirement',","\t        fetch: this.fetchDataColumns,","\t        autoLoad: true,","\t        context: this.contextConfig,","\t        filters: this.filter,","\t        sorters: this.sorterConfig,","\t        listeners: {","\t            load: function(store, data, success){","\t                this.currUserStoriesColl = [];","\t                this.prevUserStoriesColl = [];","\t                this.pastRangeUserStoriesColl = [];","\t                var that = this;","\t               ","\t                Ext.Array.each(data, function(userStory) {","\t                    if(userStory && userStory.get('AcceptedDate')){","\t                        if(userStory.get('AcceptedDate') >= that.curr_Start_Date){","\t                            that.currUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }if(userStory.get('AcceptedDate') < that.curr_Start_Date && userStory.get('AcceptedDate') >= that.prev_Start_Date){","\t                            that.prevUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }","\t                        ","\t                        that.pastRangeUserStoriesColl.push(that._createThroghputData(userStory));","\t                    }","\t                });","\t                ","\t                this._createDefectStore();","\t            },","\t            scope: this","\t        }","\t  });","\t},","\t","\t_createThroghputData: function(rallyObject){","\t    ","\t    var cycleTime = 0;","\t    var cycleTimeCat = \"N/A\";","\t    //Determine the cycle time for each object.","\t    if(rallyObject.get('AcceptedDate') && rallyObject.get('InProgressDate')){","\t        cycleTime = Rally.util.DateTime.getDifference(rallyObject.get('AcceptedDate'), rallyObject.get('InProgressDate'), 'day');","\t    }","\t    ","\t    for(var i =0; i<this.cycleTimeCategoryNames.length; i++){","\t        var lowerRange = i*this.cycleTimeDistRange, upperRange = lowerRange + 5;","\t        ","\t        if((cycleTime >lowerRange && cycleTime <= upperRange) || (lowerRange === 30 && cycleTime > lowerRange))","\t            cycleTimeCat = this.cycleTimeCategoryNames[i];","\t    }","\t    ","\t    //Generate the node for throghput data.","\t    var data = Ext.create('ThroughputDataModel', {","\t        FormattedID: rallyObject.get('FormattedID'), ","\t        Name: rallyObject.get('Name'), ","\t        AcceptedDate: rallyObject.get('AcceptedDate'), ","\t        InProgressDate: rallyObject.get('InProgressDate'), ","\t        Tags: rallyObject.get('Tags'), ","\t        Owner: rallyObject.get('Owner'),","\t        CycleTime: cycleTime,","\t        CycleTimeCategory: cycleTimeCat","\t    });","\t    ","\t    return data;","\t},","\t","\t_createDefectStore: function(){","\t    var that = this;","\t    var myDefectStore = Ext.create('Rally.data.wsapi.Store', {","            model: 'Defect',","            fetch: this.fetchDataColumns,","            autoLoad: true,","            context: this.contextConfig,","            filters: this.filter,","            sorters: this.sorterConfig,","            listeners: {","                load: function(store, data, success){","                    Ext.Array.each(data, function(defect){","                        if(defect && defect.get('AcceptedDate')){","                            if(defect.get('AcceptedDate') >= that.curr_Start_Date){","                            \tthat._insertRecordInOrder(that.currUserStoriesColl, that._createThroghputData(defect));","                            }if(defect.get('AcceptedDate') < that.curr_Start_Date && defect.get('AcceptedDate') >= that.prev_Start_Date){","                                that._insertRecordInOrder(that.prevUserStoriesColl, that._createThroghputData(defect));","                            }","                            ","                            that._insertRecordInOrder(that.pastRangeUserStoriesColl, that._createThroghputData(defect));","                        }","                           ","                    });","                    ","                    console.log('spite out Current US coll with defects: ', this.currUserStoriesColl);","\t                console.log('spite out previous US data coll with defects: ', this.prevUserStoriesColl);","\t                ","\t               this.currThroughputValue = this.currUserStoriesColl.length;","\t               this.prevThroughputValue = this.prevUserStoriesColl.length;","\t                ","\t                this.currThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.currUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.prevThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.prevUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.pastRangeThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        model: 'ThroughputDataModel',","                        data: this.pastRangeUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this._processStoreData();","                },","                scope: this","            }","\t  });","\t},","\t","\t_insertRecordInOrder: function(dataColl, record){","\t\tvar closestRecord = record;","\t\tvar recordDate = record.get(\"AcceptedDate\");","\t\t","\t\tExt.Array.each(dataColl, function(data) {","\t\t    var dataDate = data.get(\"AcceptedDate\");","\t\t    if(dataDate && recordDate && dataDate.getMonth() === recordDate.getMonth()){","\t\t    \tif(dataDate <= recordDate)","\t\t    \t\tclosestRecord = data;","\t\t    }","\t\t});","\t\t","\t\tvar dataIndex = dataColl.indexOf(closestRecord);","\t\tif(dataIndex != -1){","\t\t\tdataColl.splice(dataIndex, 0, record);","\t\t}","\t\telse{","\t\t\tdataColl.push(record);","\t\t}","\t},","\t","\t_processStoreData:  function() {","\t    var currThroghtputGridTitle = 'List all User Stories & defects for Current period (Between ' + this.currStartRallyDateFilter + ' & ' + this.currEndRallyDateFilter + ')';","\t    var currThroughputDataGrid = this._createThroughputDataGrid(currThroghtputGridTitle, this.currThroughputDataStore);","\t    ","\t    var prevThroghtputGridTitle = 'List all User Stories & defects for Previous period: (Between ' + this.prevStartRallyDateFilter + ' & ' + this.prevEndRallyDateFilter + ')';","\t    var prevThroughputDataGrid = this._createThroughputDataGrid(prevThroghtputGridTitle, this.prevThroughputDataStore);","\t    ","\t    var pastRangeThroghtputGridTitle = 'List all User Stories & defects for last 6 Months: (Between ' + this.pastDateSixMonthFilter + ' & ' + this.currEndRallyDateFilter + ')';","\t    var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore);","\t    ","\t    var currThroughputMessage = '<div>The Throughput for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b>' + this.currThroughputValue + '</b></div>';","\t    var prevThroughputMessage = '<div>The Throughput for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b>' + this.prevThroughputValue + '</b></div>';","\t    ","\t    this._createThroghputMessagePanel(currThroughputMessage, prevThroughputMessage);","\t    this._processThroughputDataForGraph();","\t    this._createThroghputGridPanel(currThroughputDataGrid, prevThroughputDataGrid, pastRangeThroughputDataGrid);","\t},","\t","\t_processThroughputDataForGraph: function(){","\t    var that = this;","\t\tthis.groupedSeries = [];","\t\t","\t\t//initialize the groupseries","\t    Ext.Array.each(that.cycleTimeCategoryNames, function(catName) {","\t        that.groupedSeries.push({name: catName, data:[], stack: 'qSizes'});","\t    });","\t    ","\t    that.groupedSeries.push({name: 'N/A', data: [], stack: 'qSizes'});","\t    ","\t    this.chartData = {","\t\t\ttotalCount: 0,","\t\t\tmonths: {},","\t\t\tmonthCount: 0,","\t\t\tcategories: []","\t\t};\t","\t\t    ","\t\tconsole.log('Spite out the Items: ', this.pastRangeUserStoriesColl);","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t    that._buildChartData(record);","\t\t});","\t\t","\t\tconsole.log('chartdata post configuration: ', this.chartData);","\t\tconsole.log('spite out groupedSeries: ', this.groupedSeries);","\t\t","\t\tthis._initAndDrawCharts(this.chartData);","\t},","\t","\t_buildChartData: function(record){","\t    var chartData = this.chartData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTimeCat = record.get(\"CycleTimeCategory\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    console.log(\"spite out accepted Month Number: \", recAcceptedDate.getMonth());","\t    ","\t    if(typeof chartData.months[recMonthNameCat] === \"undefined\"){","\t        chartData.months[recMonthNameCat] = {count: 0, monthNum: 0, cycletimes: {}, userStories: []};","\t        chartData.categories.push(recMonthNameCat);","\t        ","\t        for(var i=0; i<this.groupedSeries.length; ++i){","\t            this.groupedSeries[i].data.push(0); //add 0 for each month","\t        }","\t        ","\t        chartData.monthCount++;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].userStories.push(record);","\t    if(typeof chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] === 'undefined'){","\t        chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] =0;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat]++;","\t    chartData.months[recMonthNameCat].count++;","\t    chartData.totalCount++;","\t  ","\t    for(var s=0; s<this.groupedSeries.length; ++s){","\t        if(recCycleTimeCat === this.groupedSeries[s].name){","\t            this.groupedSeries[s].data[(chartData.monthCount -1)] = chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat];","\t        }","\t    }","\t   ","\t   this.chartData = chartData;","\t},","\t","\t//pre init for the charts ","\t_initAndDrawCharts: function(inputData) {\t\t\t\t\t\t\t\t\t\t\t\t","\t\tif (inputData.totalCount === 0) {","\t\t\treturn;","\t\t}\t\t\t\t\t\t","\t\t\t\t\t","\t\tvar throughput = [], i, qCount = 0, currTotalCount = 0, avgTotals = [], monthAVGs = [];","\t\t\t\t\t\t","\t\tfor (i in inputData.months) {\t\t\t","\t\t\tthroughput.push(inputData.months[i].count);","\t\t\tcurrTotalCount += inputData.months[i].count;","\t\t\tqCount++;","\t\t\t\t\t","\t\t\tavgTotals.push(Math.round(currTotalCount / qCount, 2));","\t\t}","\t\t\t\t\t","\t\tfor (i = 0; i < inputData.monthCount; ++i) {","\t\t\tmonthAVGs.push(Math.round(inputData.totalCount / inputData.monthCount, 2));","\t\t}","\t","\t\t//Finalize series","\t\tthis.groupedSeries.unshift({name: 'Throughput', data: throughput});","\t\tthis.groupedSeries.push({type: 'spline',name: 'Moving Average', data: avgTotals, color: 'blue', marker: {lineWidth: 1, fillColor: 'red'}});\t\t\t\t","\t\tthis.groupedSeries.push({type: 'spline',name: 'Average / Month', data: monthAVGs, color: 'purple', marker: {lineWidth: 1, fillColor: 'red'}});","\t\tthis.groupedSeries.push({name: 'Total UserStories: ' + inputData.totalCount, color: '#fff', stack:'blank'});","\t\t\t\t","\t\tthis._drawHorizontalBarChart(inputData.categories, this.groupedSeries);\t\t\t","\t},","\t","\t// Configures and displays a horizontal bar chart","\t_drawHorizontalBarChart: function(categories, data) {\t","\t\tvar conf = {","\t\t\tid: 'verticalBars',","\t\t\ttargetContainer: '#defaultChartContainer',","\t\t\tseries: data,\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'Throughput by Months',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Count'\t\t\t\t\t\t\t\t\t\t\t\t","\t\t};\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t","\t\tthis._drawBarChart(conf);","\t},\t\t\t\t\t\t\t\t","\t","\t//Draws and displays the bar chart ","\t_drawBarChart: function (conf) {\t\t\t\t\t","\t\tvar throughputChart = Ext.create('Rally.ui.chart.Chart',{","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\tchartData: {series: conf.series},\t\t\t\t\t\t\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tplotOptions: {","\t\t\t\t\tcolumn: {","\t\t\t\t\t\tstacking: 'normal', ","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tpoint: {","\t\t\t\t\t\t\tevents: {","\t\t\t\t\t\t\t\tclick: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t//Need to implement","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}\t\t\t\t\t\t\t\t\t","\t\t\t\t},","\t\t\t\tchart: {plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false, type: conf.chartType},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {align: 'right', verticalAlign: 'top', x: 0, y: 100,layout: 'vertical'},","\t\t\t\ttitle: {text: conf.chartTitle},","\t\t\t\ttooltip: {","\t\t\t\t\tformatter: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name + ' | ' + this.x + '</b><br/>'+","\t\t\t\t\t\t\t'<b>'+ this.y + '</b> User Stories<br/><i>(Click to view User Stories)</i>';","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{title: {text: conf.yAxisTitle}}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}]","\t\t\t}","\t\t});","\t\t","\t\tif(this.throughtputGraphContainer){","\t\t\tthis.throughtputGraphContainer.removeAll(true);","\t\t\tthis.throughtputGraphContainer.add(throughputChart);","\t\t}","\t\telse{","\t\t\t\tthis.throughtputGraphContainer = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultChartContainer', ","\t\t\t    id: 'defaultChartContainer',","\t            layout: {","\t                type: 'vbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [throughputChart]","\t        });","\t        ","\t        this.add(this.throughtputGraphContainer);","\t\t}","\t},\t\t\t\t","\t","\t_createThroghputMessagePanel: function(currThroughputMessage, prevThroughputMessage){","         var throughtputContainer = Ext.create('Ext.container.Container', {","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 5","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currThroughputMessage","            },","            {","                xtype: 'label',","                html: prevThroughputMessage","            }]","        });","        ","        //create the panel for displaying computed Throughput.","        if(this.infoPanel){","            this.infoPanel.removeAll(true);","            this.infoPanel.add(throughtputContainer);","        }","        else{","            this.infoPanel=Ext.create('Ext.form.Panel', {","            \t title: 'Throughput',","                renderTo: Ext.getBody(),","                layout: {","                    type: 'vbox',","                    align: 'stretch',","                    padding: 10","                },","                items: [throughtputContainer]","            });","            ","            this.add(this.infoPanel);","        }","\t},","\t","\t_createThroghputGridPanel: function(currThroughputDataGrid, prevThroughputDataGrid, pastRangeThroughputDataGrid){","\t    //create the grid panel to display the grid.","        if(this.gridPanel){","            this.gridPanel.removeAll(true);","            this.gridPanel.add(currThroughputDataGrid);","            this.gridPanel.add(prevThroughputDataGrid);","            this.gridPanel.add(pastRangeThroughputDataGrid);","        }","        else{","            ","            this.gridPanel=Ext.create('Ext.form.Panel', {","                renderTo: Ext.getBody(),","                title: 'View Details: ',","                layout: {","                    type: 'vbox',","                    align: 'stretch',","                    padding: 10","                },","                items: [currThroughputDataGrid, prevThroughputDataGrid, pastRangeThroughputDataGrid]","            });","            ","            this.add(this.gridPanel);","        }","\t},","\t","\t_createThroughputDataGrid: function(title, dataStore){","\t    var grid = Ext.create('Rally.ui.grid.Grid', {","\t        title: title,","            store: dataStore,","            bodyBorder: true,","            columnCfgs: [","                {","                   text: 'Formatted ID', dataIndex: 'FormattedID', width: 100","                },","                {","                    text: 'Name', dataIndex: 'Name', width: 500","                },","                {","                    text: 'Accepted Date', dataIndex: 'AcceptedDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'InProgress Date', dataIndex: 'InProgressDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'Owner', dataIndex: 'Owner', flex: 1, emptyCellText: 'No Owner',","                    renderer: function(value){","                        if(value && value._refObjectName)","                            return value._refObjectName;","                    }","                },","                {","                    text: 'Tags', dataIndex: 'Tags', flex: 1, emptyCellText: 'No Tags',","                    renderer: function(value){","                        if(value && value.Name)","                            return value.Name;","                    }","                },","                {","                    text: 'CycleTime', dataIndex: 'CycleTime', flex: 1","                },","                {","                    text: 'CycleTime Category', dataIndex: 'CycleTimeCategory', flex: 1","                },","             ]","        });","        ","        return grid;","\t}","});",""]},{"start":{"row":0,"column":0},"end":{"row":889,"column":3},"action":"insert","lines":["var types = Ext.data.Types; // allow shorthand type access","Ext.define('ThroughputDataModel', {","\textend: 'Ext.data.Model',","\tfields: [","                {name: 'FormattedID', mapping: 'FormattedID', type: types.STRING},","                {name: 'Name', mapping: 'Name', type: types.STRING},","                {name: 'AcceptedDate', mapping: 'AcceptedDate', type: types.DATE },","                {name: 'InProgressDate', mapping: 'InProgressDate', type: types.DATE },","                {name: 'Tags', mapping: 'Tags', type: types.STRING},","                {name: 'Owner', mapping: 'Owner', type: types.OBJECT},","                {name: 'CycleTime', mapping: 'CycleTime', type: types.FLOAT},","                {name: 'CycleTimeCategory', mapping: 'CycleTimeCategory', type: types.STRING}","            ]","});","","Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    items:[","    \t{xtype: 'container', itemId: 'throughputCycleTimeReport', id: 'throughputCycleTimeReport', ","            items: [\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t{xtype: 'container', itemId: 'throughputContainer', id: 'throughputContainer', title: 'Throughput'},","\t\t\t\t{xtype: 'container', itemId: 'cycleTimeContainer', id: 'cycleTimeContainer', title: 'Cycle-Time'}","\t\t\t],","\t\t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:10","\t\t    }","\t\t},\t","    \t{xtype: 'container', itemId: 'WipLimitSLAReport', id: 'WipLimitSLAReport', ","            items: [\t\t","            \t{xtype: 'container', itemId: 'wipContainer', id: 'wipContainer', title: 'WIP Limit'},","\t\t\t\t{xtype: 'container', itemId: 'slaContainer', id: 'slaContainer', title: 'SLA Counter'}","\t\t\t],","    \t\tlayout:{","\t\t        type:'hbox',","\t\t        align:'stretch',","\t\t        padding:10","\t\t    }","    \t}","\t],","\t","    layout:{","        type:'vbox',","        align:'stretch',","        padding:10","    },","    ","    cycleTimeCategoryNames: [\"0-5 days\", \"6-10 days\", \"11-15 days\", \"16-20 days\", \"21-25 days\", \"26-30 days\", \"31+ days\"],","    cycleTimeDistRange: 5,","\t","    launch: function() {","    \t","    \tthis.activeViews = ['throughputCycleTimeReport','WipLimitSLAReport'];","    \tthis._init();","        this.currThroughputMessage = '<div>The Throughput for current period (between Start Date & End Date) is : <b> 10 </b></div>';","\t    this.prevThroughputMessage =  '<div>The Throughput for Previous period (between Start Date & End Date) is : <b> 10 </b></div>';","\t    ","\t    this._determineDateRangeForThroughput();","        ","        this._createDataStoreForThroughput();","    },","    ","    /* Initializes the app */","\t_init: function() {\t","\t\tvar that = this;","\t\t//dynamicItems hold created ui items, which needs to be destroyed before re-drawing","\t\tif (typeof this.dynamicItems === \"undefined\"){","\t\t\tthis.dynamicItems = {};","\t\t}","\t\t","\t\tExt.Array.each(this.activeViews, function(viewName){","\t\t\tif (typeof that.dynamicItems[viewName] === \"undefined\"){","\t\t\t\tthat.dynamicItems[viewName] = {};","\t\t\t}","\t\t\telse {","\t\t\t\tvar item;","\t\t","\t\t\t\tfor (item in that.dynamicItems[viewName]) {","\t\t\t\t\tthat.dynamicItems[viewName][item].destroy();","\t\t\t\t}","\t\t\t}\t","\t\t});","\t},","\t","\t _determineDateRangeForThroughput: function(){","        this.curr_End_Date = new Date();","        ","        //Determine a date 30 days prior to current date.","        var tmp_Curr_Date = new Date();","        tmp_Curr_Date.setDate(tmp_Curr_Date.getDate()-30);","        this.curr_Start_Date = tmp_Curr_Date;","        ","        this.currStartRallyDateFilter = this.curr_Start_Date.getFullYear() + '-' + (parseInt(this.curr_Start_Date.getMonth(), 10) + 1)  + '-' + this.curr_Start_Date.getDate();","        this.currEndRallyDateFilter = this.curr_End_Date.getFullYear() + '-' + (parseInt(this.curr_End_Date.getMonth(), 10) + 1)  + '-' + this.curr_End_Date.getDate();","        ","        var tmp_Prev_Date = new Date();","        tmp_Prev_Date.setDate(tmp_Prev_Date.getDate()-60);","        this.prev_Start_Date = tmp_Prev_Date;","        this.prev_End_Date = Ext.Date.add(this.curr_Start_Date, Ext.Date.DAY, -1);","        ","        this.prevStartRallyDateFilter = this.prev_Start_Date.getFullYear() + '-' + (parseInt(this.prev_Start_Date.getMonth(), 10)+1) + '-' + this.prev_Start_Date.getDate();","        this.prevEndRallyDateFilter = this.prev_End_Date.getFullYear() + '-' + (parseInt(this.prev_End_Date.getMonth(), 10)+1) + '-' + this.prev_End_Date.getDate();","        ","        this.past_Date_SixMonth = Ext.Date.add(this.curr_Start_Date, Ext.Date.MONTH, -5);","        this.pastDateSixMonthFilter = this.past_Date_SixMonth.getFullYear() + '-' + (parseInt(this.past_Date_SixMonth.getMonth(), 10)+1) + '-' + this.past_Date_SixMonth.getDate();","    }, ","    ","     _createDataStoreForThroughput: function(){","        //Determine the data filter for store.","        this.filter = Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '>=',","\t\t\tvalue: this.pastDateSixMonthFilter","\t\t}).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'AcceptedDate',","\t\t\toperator: '<=',","\t\t\tvalue: this.currEndRallyDateFilter","\t\t})).and(Ext.create('Rally.data.QueryFilter', {","\t\t\tproperty: 'c_KanbanState',","\t\t\toperator: '=',","\t\t\tvalue: 'Accepted'","\t\t}));","\t\t","\t\t//Record all columns that needs to be fetched.","\t\tthis.fetchDataColumns = ['FormattedID', 'Name', 'AcceptedDate', 'InProgressDate', 'Tags', 'Owner', 'c_KanbanState'];","\t\t","\t\t//configure the data store context.","\t\tthis.contextConfig = {","            workspace: this.getContext().getWorkspace()._Ref,","            project: this.getContext().getProject()._ref,","            projectScopeUp: false,","            projectScopeDown: true,","            limit: 'infinity'","        };","\t   ","\t   //set the sorter config for data store.","\t   this.sorterConfig = [{","                        \tproperty: 'AcceptedDate',","                        \tdirection: 'ASC'","                        },","                        {","                            property: 'FormattedID',","                            direction: 'ASC'","                        }];","                        ","\t\tthis._createUserStoryDataStore();","    },","    ","    _createUserStoryDataStore: function(){","\t    var myUserStoryStore = Ext.create('Rally.data.wsapi.Store', {","\t        model: 'HierarchicalRequirement',","\t        fetch: this.fetchDataColumns,","\t        autoLoad: true,","\t        context: this.contextConfig,","\t        filters: this.filter,","\t        sorters: this.sorterConfig,","\t        listeners: {","\t            load: function(store, data, success){","\t            \tthis.currUserStoriesColl = [];","\t                this.prevUserStoriesColl = [];","\t                this.pastRangeUserStoriesColl = [];","\t                var that = this;","\t               ","\t                Ext.Array.each(data, function(userStory) {","\t                    if(userStory && userStory.get('AcceptedDate')){","\t                    \tif(userStory.get('AcceptedDate') >= that.curr_Start_Date){","\t                            that.currUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }if(userStory.get('AcceptedDate') < that.curr_Start_Date && userStory.get('AcceptedDate') >= that.prev_Start_Date){","\t                            that.prevUserStoriesColl.push(that._createThroghputData(userStory));","\t                        }","\t                        that.pastRangeUserStoriesColl.push(that._createThroghputData(userStory));","\t                    }","\t                });","\t                ","\t                this._createDefectStore();","\t            },","\t            scope: this","\t        }","\t  });","\t},","\t","\t_createThroghputData: function(rallyObject){","\t    var cycleTime = 0;","\t    var cycleTimeCat = \"N/A\";","\t    //Determine the cycle time for each object.","\t    if(rallyObject.get('AcceptedDate') && rallyObject.get('InProgressDate')){","\t        cycleTime = Rally.util.DateTime.getDifference(rallyObject.get('AcceptedDate'), rallyObject.get('InProgressDate'), 'day');","\t    }","\t    ","\t    for(var i =0; i<this.cycleTimeCategoryNames.length; i++){","\t        var lowerRange = i*this.cycleTimeDistRange, upperRange = lowerRange + 5;","\t        ","\t        if((cycleTime >lowerRange && cycleTime <= upperRange) || (lowerRange === 30 && cycleTime > lowerRange))","\t            cycleTimeCat = this.cycleTimeCategoryNames[i];","\t    }","\t    ","\t    //Generate the node for throghput data.","\t    var data = Ext.create('ThroughputDataModel', {","\t        FormattedID: rallyObject.get('FormattedID'), ","\t        Name: rallyObject.get('Name'), ","\t        AcceptedDate: rallyObject.get('AcceptedDate'), ","\t        InProgressDate: rallyObject.get('InProgressDate'), ","\t        Tags: rallyObject.get('Tags'), ","\t        Owner: rallyObject.get('Owner'),","\t        CycleTime: cycleTime,","\t        CycleTimeCategory: cycleTimeCat","\t    });","\t    ","\t    return data;","\t},","\t","\t_createDefectStore: function(){","\t    var that = this;","\t    var myDefectStore = Ext.create('Rally.data.wsapi.Store', {","            model: 'Defect',","            fetch: this.fetchDataColumns,","            autoLoad: true,","            context: this.contextConfig,","            filters: this.filter,","            sorters: this.sorterConfig,","            listeners: {","                load: function(store, data, success){","                    Ext.Array.each(data, function(defect){","                        if(defect && defect.get('AcceptedDate')){","                        \tif(defect.get('AcceptedDate') >= that.curr_Start_Date){","                            \tthat._insertRecordInOrder(that.currUserStoriesColl, that._createThroghputData(defect));","                            }if(defect.get('AcceptedDate') < that.curr_Start_Date && defect.get('AcceptedDate') >= that.prev_Start_Date){","                                that._insertRecordInOrder(that.prevUserStoriesColl, that._createThroghputData(defect));","                            }","                            that._insertRecordInOrder(that.pastRangeUserStoriesColl, that._createThroghputData(defect));","                        }","                           ","                    });","                    ","                   this.currThroughputValue = this.currUserStoriesColl.length;","\t               this.prevThroughputValue = this.prevUserStoriesColl.length;","\t                ","\t               this.currThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.currUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.prevThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        data: this.prevUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this.pastRangeThroughputDataStore = Ext.create('Rally.data.custom.Store', {","                        model: 'ThroughputDataModel',","                        data: this.pastRangeUserStoriesColl,","                        pageSize: 100","                    });","                    ","                    this._createThroghputMessagePanel();","                },","                scope: this","            }","\t  });","\t},","\t","\t_insertRecordInOrder: function(dataColl, record){","\t\tvar closestRecord = record;","\t\tvar recordDate = record.get(\"AcceptedDate\");","\t\t","\t\tExt.Array.each(dataColl, function(data) {","\t\t    var dataDate = data.get(\"AcceptedDate\");","\t\t    if(dataDate && recordDate && dataDate.getMonth() === recordDate.getMonth()){","\t\t    \tif(dataDate <= recordDate)","\t\t    \t\tclosestRecord = data;","\t\t    }","\t\t});","\t\t","\t\tvar dataIndex = dataColl.indexOf(closestRecord);","\t\tif(dataIndex != -1){","\t\t\tdataColl.splice(dataIndex, 0, record);","\t\t}","\t\telse{","\t\t\tdataColl.push(record);","\t\t}","\t},","    ","    _createThroghputMessagePanel: function(){","    \t","    \tthis._configureCycleTimeMetricsContainer('panel1', 'CycleTime', 'cycleTimeContainer', 'throughputCycleTimeReport', true);","    \t","\t    this._configureThroughputMetricsContainer('panel2', 'Throughput', 'throughputContainer', 'throughputCycleTimeReport', true);","\t    ","     //   this.currWipLimitMessage = '<div>Work In Progress To be implemented</div>';","\t    // this.preWipLimitMessage = '<div>The Avg. CycleTime for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b> TBI </b></div>';","     //   var wipLimitContainer = this._createMetricsContainer('wipLimit', this.currThroughputMessage, this.prevThroughputMessage);","     //   var pastRangeWipLimitGridTitle = 'View Wip Limit Data';","\t    // var pastRangeWipLimitDataGrid = this._createThroughputDataGrid(pastRangeWipLimitGridTitle, this.pastRangeThroughputDataStore, 'wipLimitGrid');","     //   this._configureMetricsContainer('panel3', 'WIP Limit', wipLimitContainer, 'wipContainer', 'WipLimitSLAReport', pastRangeWipLimitDataGrid, false);","        ","     //   this.currCycleTimeMessage = '<div>The Avg. CycleTime for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b> TBI </b></div>';","\t    // this.prevCycleTimeMessage = '<div>The Avg. CycleTime for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b> TBI </b></div>';","     //   var slaLimitContainer = this._createMetricsContainer('slaLimit', this.currThroughputMessage, this.prevThroughputMessage);","     //   var pastRangeSLALimitGridTitle = 'View SLA Limit Data';","\t    // var pastRangeSLALimitDataGrid = this._createThroughputDataGrid(pastRangeSLALimitGridTitle, this.pastRangeThroughputDataStore, 'slaLimitGrid');","     //   this._configureMetricsContainer('panel4', 'SLA Limit', slaLimitContainer, 'slaContainer', 'WipLimitSLAReport', pastRangeSLALimitDataGrid, false);","\t},","\t","\t_createThroughputDataGrid: function(title, dataStore, gridId){","\t\tconsole.log('Data Grid creation................');","\t\t","\t    var grid = Ext.create('Rally.ui.grid.Grid', {","\t    \tid: gridId,","\t        title: title,","            store: dataStore,","            bodyBorder: true,","            columnCfgs: [","                {","                   text: 'Formatted ID', dataIndex: 'FormattedID', width: 100","                },","                {","                    text: 'Name', dataIndex: 'Name', width: 500","                },","                {","                    text: 'Accepted Date', dataIndex: 'AcceptedDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'InProgress Date', dataIndex: 'InProgressDate', width: 200, emptyCellText: 'No Date',","                    renderer: function(value){","                        if(value)","                            return (value.getFullYear() + '-' + (parseInt(value.getMonth(), 10) + 1)  + '-' + value.getDate());","                    }","                },","                {","                    text: 'Owner', dataIndex: 'Owner', flex: 1, emptyCellText: 'No Owner',","                    renderer: function(value){","                        if(value && value._refObjectName)","                            return value._refObjectName;","                    }","                },","                {","                    text: 'Tags', dataIndex: 'Tags', flex: 1, emptyCellText: 'No Tags',","                    renderer: function(value){","                        if(value && value.Name)","                            return value.Name;","                    }","                },","                {","                    text: 'CycleTime', dataIndex: 'CycleTime', flex: 1","                },","                {","                    text: 'CycleTime Category', dataIndex: 'CycleTimeCategory', flex: 1","                },","             ]","        });","        ","        return grid;","\t},","\t","\t_createMetricsContainer: function(containerId, currThroughputMessage, prevThroughputMessage){","\t\tconsole.log('creating metrics container.......');","\t\t","\t\tvar myContainer = Ext.create('Ext.container.Container', {","         \tid: containerId,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 15","            },","            renderTo: Ext.getBody(),","            border: 1,","            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","            items: [{","                xtype: 'label',","                html: currThroughputMessage","            },","            {","                xtype: 'label',","                html: prevThroughputMessage","            }]","        });","        ","        return myContainer;","\t},","\t","\t_configureMetricsContainer: function(panelId, titleName, throughtputContainer, containerId, reportId, pastRangeDataGrid, hasGraph){","\t\tconsole.log('start configuring the metrics container.......... for ' + containerId);","\t\tvar widthValue = hasGraph? 850 : 600;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tconsole.log('creating info panel to load message container and grid. for ' + containerId);","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 300,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 15","            },","            items: [throughtputContainer, pastRangeDataGrid]","        });","        ","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_configureCycleTimeMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){","\t\t//1. Create the message panel container for showing the cumulative data.","\t\tthis.currCycleTimeMessage = '<div>The Avg. CycleTime for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b> TBI </b></div>';","\t    this.prevCycleTimeMessage = '<div>The Avg. CycleTime for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b> TBI </b></div>';","\t\tvar cycleTimeContainer = this._createMetricsContainer('Cycle Time', this.currCycleTimeMessage, this.prevCycleTimeMessage);","\t\t","\t\t","\t\t//2. Create the throughput graph.","\t\tthis._processCycleTimeDataForGraph();","\t\tvar cycleTimeGraphContainer = this.cycleTimePieOrBarGraphChart;","\t\t","\t\t//3. cretae the throuput data grid.","\t\t// var pastRangeThroghtputGridTitle = 'View Throughput Data';","\t \t// var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore, 'throughputGrid');","\t\t","\t\t//4. cretae the infopanel to add all the above components.","\t\tvar widthValue = 600;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 550,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 15","            },","            items: [cycleTimeContainer, cycleTimeGraphContainer]","        });","\t\t","\t\t//5. add the nfopanel to the appropriate app container.","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_processCycleTimeDataForGraph: function(){","\t\tvar that = this;","\t\t","\t   this.pieData = {","\t   \ttotalCount: 0, ","\t   \tmonths: {},","\t   \tmonthCount: 0,","\t   \tcategories: []","\t   };","\t\t","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t\tthat._buildCycleTimeChartData(record);","\t\t});","\t\t","\t\tthis._initAndDrawCycleTimeCharts(this.pieData);","\t},","\t","\t_buildCycleTimeChartData: function(record){","\t\tvar pieData = this.pieData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTime = record.get(\"CycleTime\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    if(typeof pieData.months[recMonthNameCat] === \"undefined\"){","\t        pieData.months[recMonthNameCat] = {count: 0, avgCycleTime: 0, totalCycleTime: 0, cycletimes: []};","\t        pieData.categories.push(recMonthNameCat);","\t        ","\t        pieData.monthCount++;","\t    }","\t    ","\t    pieData.months[recMonthNameCat].cycletimes.push(recCycleTime);","\t    pieData.months[recMonthNameCat].count++;","\t    pieData.months[recMonthNameCat].totalCycleTime = pieData.months[recMonthNameCat].totalCycleTime + recCycleTime;","\t    pieData.months[recMonthNameCat].avgCycleTime = Math.ceil(pieData.months[recMonthNameCat].totalCycleTime/ pieData.months[recMonthNameCat].count);","\t    pieData.totalCount++;","\t   ","\t   this.pieData = pieData;","\t},","","\t_initAndDrawCycleTimeCharts: function(pieData) {\t\t\t\t","\t\tvar cycleTimeData = [], sizeData = [], categories = [];","\t\t\t\t\t","\t\tif (pieData.totalCount === 0) {","\t\t\treturn;","\t\t}","\t\t","\t\tfor (month in pieData.months){","\t\t\tcycleTimeData.push([month, pieData.months[month].avgCycleTime]);","\t\t\tsizeData.push([month, pieData.months[month].count]);","\t\t\tcategories.push(month);","\t\t}","\t\t","\t\tvar cycleTimeHorBarGraph = this._drawCycleTimeHorizontalBarChart(categories, cycleTimeData);","\t\tthis._createCycleTimeBarGraphContainer(cycleTimeHorBarGraph);","\t\t","\t\t// var cycleTimePie = this._drawPie('cycleTimePie', 'Cycle Time', 'Monthwise Avg. Cycle Time', cycleTimeData, pieData);","\t\t// var bySizePie = this._drawPie('bySizePie', 'Count', 'Monthwise Count', sizeData, pieData);\t","\t\t// this._createCycleTimePieContainer(cycleTimePie, bySizePie);","\t},","\t","\t_createCycleTimeBarGraphContainer: function(barGraph){","\t\t","\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultPieChartContainer', ","\t\t\t    id: 'defaultPieChartContainer',","\t            layout: {","\t                type: 'hbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [barGraph]","\t        });","\t},","\t","\t//Note: Need to refactor to re-use the same methord for Pie or Bar graph.","\t_createCycleTimePieContainer: function(cycleTimePie, bySizePie){","\t\t","\t\tthis.cycleTimePieOrBarGraphChart = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultPieChartContainer', ","\t\t\t    id: 'defaultPieChartContainer',","\t            layout: {","\t                type: 'hbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [cycleTimePie, bySizePie]","\t        });","\t},","\t","\t/* Configures and displays a horizontal bar chart */","\t_drawCycleTimeHorizontalBarChart: function(categories, leadTimeData) {\t","\t\tvar conf = {","\t\t\tid: 'horizontalBars',","\t\t\tseries: [{name: 'Cycle Time', data: leadTimeData}],\t","\t\t\tchartType: 'bar',","\t\t\tchartTitle: 'UserStory Cycle Time',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Days',","\t\t\t_formatLabelsAppendix: ' days',","\t\t\tplotOptions: {","                bar: {","                    dataLabels: {","                        enabled: this.getSetting('showDataLabels')","                    }","                }","            }","\t\t};\t\t\t\t\t\t\t\t\t\t","\t\t","\t\treturn this._drawCycleTimeBarChart(conf);","\t},","\t","\t/* Draws and displays the bar chart */","\t_drawCycleTimeBarChart: function (conf) {\t\t\t\t\t","\t\t","\t\tvar chart = {","\t\t\txtype: 'rallychart',","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\twidth: 550,","\t\t\tchartData: {","\t\t\t\tseries: conf.series\t\t\t\t\t\t\t\t","\t\t\t},","\t\t\tchartColors: ['#FF3333', '#00CC00'],\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tchart: {","\t\t\t\t\tplotBackgroundColor: null,","\t\t\t\t\tplotBorderWidth: null,","\t\t\t\t\tplotShadow: false,","\t\t\t\t\ttype: conf.chartType\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {\t\t\t\t\t\t\t\t\t","\t\t\t\t\talign: 'right',","\t\t\t\t\tverticalAlign: 'top',","\t\t\t\t\tx: 0,","\t\t\t\t\ty: 100,\t\t\t\t\t\t\t\t\t","\t\t\t\t\tlayout: 'vertical'","\t\t\t\t},","\t\t\t\ttitle: {","\t\t\t\t\ttext: conf.chartTitle","\t\t\t\t},","\t\t\t\ttooltip: {","\t\t\t\t\t_formatLabels: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name +'</b><br/>'+","\t\t\t\t\t\tthis.x +': '+ this.y + conf._formatLabelsAppendix;","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{","\t\t\t\t\ttitle: {text: conf.yAxisTitle}","\t\t\t\t}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}],","\t\t\t\tplotOptions: conf.plotOptions","\t\t\t}","\t\t};","\t\t","\t\treturn chart;\t","\t},","\t","\t/* Configures and displays a pie chart*/","\t_drawPie: function (id, name, text, data, extraData) {\t","\t\t","\t\tvar chart = {","\t\t\txtype: 'rallychart',","\t\t\tid: id,","\t\t\theight: 400,","\t\t\twidth: 400,\t","\t\t\tstyle: {float: 'left'},","\t\t\tchartData: {","\t\t\t\tseries: [{","\t\t\t\t\ttype: 'pie',","\t\t\t\t\tname: name,","\t\t\t\t\tdata: data","\t\t\t\t}]","\t\t\t},","\t\t\tchartConfig: {\t\t\t\t\t\t\t","\t\t\t\tchart: {","\t\t\t\t\tplotBackgroundColor: null,","\t\t\t\t\tplotBorderWidth: null,","\t\t\t\t\tplotShadow: false,","\t\t\t\t\ttype: 'pie'","\t\t\t\t},","\t\t\t\txAxis: {},//must specify empty x-axis due to bug","\t\t\t\ttitle: {","\t\t\t\t\ttext: text","\t\t\t\t},","\t\t\t\ttooltip: {","\t\t\t\t\tpointFormat: '{series.name}: <b>{point.y}</b>',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\tpercentageDecimals: 1,","\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\treturn _formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t},","\t\t\t\tplotOptions: {","\t\t\t\t\tpie: {","\t\t\t\t\t\tallowPointSelect: true,","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tdataLabels: {","\t\t\t\t\t\t\tenabled: true,","\t\t\t\t\t\t\tcolor: '#000000',","\t\t\t\t\t\t\tconnectorColor: '#000000',\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t_formatLabels: function() {\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\treturn Rally.getApp()._formatLabels(id, this, extraData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t};","\t\t\t\t\t","\t\treturn chart;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t},","\t","\t/* formats lables for charts */","\t_formatLabels: function(id, that, extraData) {","\t\tswitch (id) {","\t\t\tcase 'cycleTimePie':\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\treturn '<b>' + that.point.name +'</b><br/>AVG Cycle Time: '+ that.y;","\t\t\tcase 'bySizePie' :","\t\t\t\treturn '<b>'+ that.point.name +'</b><br/>Count: '+ that.y; ","\t\t}\t\t\t\t","\t},","\t","\t_configureThroughputMetricsContainer: function(panelId, titleName, containerId, reportId, hasGraph){","\t\t","\t\t//1. Create the message panel container for showing the cumulative data.","\t\tthis.currThroughputMessage = '<div>The Throughput for current period (between ' + this.currStartRallyDateFilter +' & '+ this.currEndRallyDateFilter +') is : <b>' + this.currThroughputValue + '</b></div>';","\t    this.prevThroughputMessage = '<div>The Throughput for previous period (between ' + this.prevStartRallyDateFilter +' & '+ this.prevEndRallyDateFilter +') is : <b>' + this.prevThroughputValue + '</b></div>';","\t\tvar throughtputContainer = this._createMetricsContainer('throughput', this.currThroughputMessage, this.prevThroughputMessage);","\t\t","\t\t","\t\t//2. Create the throughput graph.","\t\tthis._processThroughputDataForGraph();","\t\tvar throughtputGraphContainer = this._createThroughputGraphContainer(this.throughputChart);","\t\t","\t\t//3. cretae the throuput data grid.","\t\tvar pastRangeThroghtputGridTitle = 'View Throughput Data';","\t    var pastRangeThroughputDataGrid = this._createThroughputDataGrid(pastRangeThroghtputGridTitle, this.pastRangeThroughputDataStore, 'throughputGrid');","\t\t","\t\t//4. cretae the infopanel to add all the above components.","\t\tvar widthValue = hasGraph? 850 : 600;","\t\t","\t\tif (typeof this.dynamicItems[reportId][panelId] !== 'undefined') {","\t\t\tthis.dynamicItems[reportId][panelId].destroy();","\t\t}","\t\t","\t\tvar infoPanel=Ext.create('Ext.form.Panel', {","        \tid: panelId,","        \ttitle: titleName,","            renderTo: Ext.getBody(),","            width: widthValue,","            height: 550,","            layout: {","                type: 'vbox',","                align: 'stretch',","                padding: 15","            },","            items: [throughtputContainer, throughtputGraphContainer]","        });","\t\t","\t\t//5. add the nfopanel to the appropriate app container.","        this.dynamicItems[reportId][panelId] = Ext.getCmp(containerId).add(infoPanel);","\t},","\t","\t_createThroughputGraphContainer: function(throughputChart){","\t\t","\t\tvar graphContainer = Ext.create('Ext.container.Container', {","\t\t\t    itemId: 'defaultChartContainer', ","\t\t\t    id: 'defaultChartContainer',","\t            layout: {","\t                type: 'vbox',","\t                align: 'stretch',","\t                padding: 10","\t            },","\t            renderTo: Ext.getBody(),","\t            border: 1,","\t            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},","\t            items: [throughputChart]","\t        });","\t     ","\t    return graphContainer;","\t},","\t","\t_processThroughputDataForGraph: function(){","\t    var that = this;","\t\tthis.groupedSeries = [];","\t\t","\t\t//initialize the groupseries","\t    Ext.Array.each(that.cycleTimeCategoryNames, function(catName) {","\t        that.groupedSeries.push({name: catName, data:[], stack: 'qSizes'});","\t    });","\t    ","\t    that.groupedSeries.push({name: 'N/A', data: [], stack: 'qSizes'});","\t    ","\t    this.chartData = {","\t\t\ttotalCount: 0,","\t\t\tmonths: {},","\t\t\tmonthCount: 0,","\t\t\tcategories: []","\t\t};\t","\t\t","\t\t    ","\t\tExt.Array.each(this.pastRangeUserStoriesColl, function(record) {","\t\t    that._buildThroughputChartData(record);","\t\t});","\t\t","\t\tthis._initAndDrawThroughputCharts(this.chartData);","\t},","\t","\t_buildThroughputChartData: function(record){","\t    var chartData = this.chartData;","\t    var recAcceptedDate = record.get(\"AcceptedDate\");","\t    var recCycleTimeCat = record.get(\"CycleTimeCategory\");","\t    var recMonthNameCat = Ext.Date.getShortMonthName(recAcceptedDate.getMonth());","\t    ","\t    console.log(\"spite out accepted Month Number: \", recAcceptedDate.getMonth());","\t    ","\t    if(typeof chartData.months[recMonthNameCat] === \"undefined\"){","\t        chartData.months[recMonthNameCat] = {count: 0, monthNum: 0, cycletimes: {}, userStories: []};","\t        chartData.categories.push(recMonthNameCat);","\t        ","\t        for(var i=0; i<this.groupedSeries.length; ++i){","\t            this.groupedSeries[i].data.push(0); //add 0 for each month","\t        }","\t        ","\t        chartData.monthCount++;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].userStories.push(record);","\t    if(typeof chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] === 'undefined'){","\t        chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat] =0;","\t    }","\t    ","\t    chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat]++;","\t    chartData.months[recMonthNameCat].count++;","\t    chartData.totalCount++;","\t  ","\t    for(var s=0; s<this.groupedSeries.length; ++s){","\t        if(recCycleTimeCat === this.groupedSeries[s].name){","\t            this.groupedSeries[s].data[(chartData.monthCount -1)] = chartData.months[recMonthNameCat].cycletimes[recCycleTimeCat];","\t        }","\t    }","\t   ","\t   this.chartData = chartData;","\t},","\t","\t//pre init for the charts ","\t_initAndDrawThroughputCharts: function(inputData) {\t\t\t\t\t\t\t\t\t\t\t\t","\t\tif (inputData.totalCount === 0) {","\t\t\treturn;","\t\t}\t\t\t\t\t\t","\t\t\t\t\t","\t\tvar throughput = [], i, qCount = 0, currTotalCount = 0, avgTotals = [], monthAVGs = [];","\t\t\t\t\t\t","\t\tfor (i in inputData.months) {\t\t\t","\t\t\tthroughput.push(inputData.months[i].count);","\t\t\tcurrTotalCount += inputData.months[i].count;","\t\t\tqCount++;","\t\t\t\t\t","\t\t\tavgTotals.push(Math.round(currTotalCount / qCount, 2));","\t\t}","\t\t\t\t\t","\t\tfor (i = 0; i < inputData.monthCount; ++i) {","\t\t\tmonthAVGs.push(Math.round(inputData.totalCount / inputData.monthCount, 2));","\t\t}","\t","\t\t//Finalize series","\t\tthis.groupedSeries.unshift({name: 'Throughput', data: throughput});","\t\tthis.groupedSeries.push({type: 'spline',name: 'Moving Average', data: avgTotals, color: 'blue', marker: {lineWidth: 1, fillColor: 'red'}});\t\t\t\t","\t\tthis.groupedSeries.push({type: 'spline',name: 'Average / Month', data: monthAVGs, color: 'purple', marker: {lineWidth: 1, fillColor: 'red'}});","\t\tthis.groupedSeries.push({name: 'Total UserStories: ' + inputData.totalCount, color: '#fff', stack:'blank'});","\t\t\t\t","\t\tthis._drawThroughputVerticalBarChart(inputData.categories, this.groupedSeries);\t\t\t","\t},","\t","\t// Configures and displays a horizontal bar chart","\t_drawThroughputVerticalBarChart: function(categories, data) {\t","\t\tvar conf = {","\t\t\tid: 'verticalBars',","\t\t\ttargetContainer: '#defaultChartContainer',","\t\t\tseries: data,\t","\t\t\tchartType: 'column',","\t\t\tchartTitle: 'Throughput by Months',","\t\t\txAxisCategories: categories,","\t\t\txAxisTitle: 'Months',","\t\t\tyAxisTitle: 'Count'\t\t\t\t\t\t\t\t\t\t\t\t","\t\t};\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t","\t\tthis._drawThroughputBarChart(conf);","\t},\t\t\t\t\t\t\t\t","\t","\t//Draws and displays the bar chart ","\t_drawThroughputBarChart: function (conf) {\t\t\t\t\t","\t\tthis.throughputChart = Ext.create('Rally.ui.chart.Chart',{","\t\t\tid: conf.id,","\t\t\theight: 400,","\t\t\tchartData: {series: conf.series},\t\t\t\t\t\t\t","\t\t\tchartConfig: {\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\tplotOptions: {","\t\t\t\t\tcolumn: {","\t\t\t\t\t\tstacking: 'normal', ","\t\t\t\t\t\tcursor: 'pointer',","\t\t\t\t\t\tpoint: {","\t\t\t\t\t\t\tevents: {","\t\t\t\t\t\t\t\tclick: function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t//Need to implement","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t}\t\t\t\t\t\t\t\t\t","\t\t\t\t},","\t\t\t\tchart: {plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false, type: conf.chartType},\t\t\t\t\t\t\t\t","\t\t\t\tlegend: {align: 'right', verticalAlign: 'top', x: 0, y: 100,layout: 'vertical'},","\t\t\t\ttitle: {text: conf.chartTitle},","\t\t\t\ttooltip: {","\t\t\t\t\tformatter: function() {","\t\t\t\t\t\treturn '<b>'+ this.series.name + ' | ' + this.x + '</b><br/>'+","\t\t\t\t\t\t\t'<b>'+ this.y + '</b> User Stories<br/><i>(Click to view User Stories)</i>';","\t\t\t\t\t}","\t\t\t\t},\t\t\t\t","\t\t\t\tyAxis: [{title: {text: conf.yAxisTitle}}],","\t\t\t\txAxis: [{","\t\t\t\t\ttitle: {text: conf.xAxisTitle},","\t\t\t\t\tcategories: conf.xAxisCategories","\t\t\t\t}]","\t\t\t}","\t\t});","\t}\t\t\t","\t","});"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":889,"column":3},"end":{"row":889,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1422610129741,"hash":"2bdbc25d0217fb363ec2d5b79fe1ee2ebda855c8"}